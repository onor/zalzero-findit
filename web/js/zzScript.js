
// Generated by CoffeeScript 1.3.3

define('../../config/config',[], function() {
  return {
    unionConnection: {
      url: document.domain,
      port: 9933
    },
    unionGameServerId: "zalerioGameServer",
    userLevelImg: ["carauselbelts_otherplayers_white_belt.png", "carauselbelts_otherplayers_yellow_belt.png", "carauselbelts_otherplayers_orange_belt.png", "carauselbelts_otherplayers_green_belt.png", "carauselbelts_otherplayers_blue_belt.png", "carauselbelts_otherplayers_purple_belt.png", "carauselbelts_otherplayers_red_belt.png", "carauselbelts_otherplayers_brown_belt.png", "carauselbelts_otherplayers_black_belt.png"],
    userLevelImgBig: ["carauselbelts_main_player_white_belt.png", "carauselbelts_main_player_yellow_belt.png", "carauselbelts_main_player_orange_belt.png", "carauselbelts_main_player_green_belt.png", "carauselbelts_main_player_blue_belt.png", "carauselbelts_main_player_purple_belt.png", "carauselbelts_main_player_red_belt.png", "carauselbelts_main_player_brown_belt.png", "carauselbelts_main_player_black_belt.png"],
    isDevEnvironment: true
  };
});

// Generated by CoffeeScript 1.3.3

define('../../config/version',[],function() {
  return {
    version: null
  };
});

// Generated by CoffeeScript 1.3.3

define('../../helper/./sound',[], function() {
  var Sound;
  Sound = (function() {

    function Sound() {
      try {
        this.audioBaseUrl = baseUrl.replace('/index.php', '/');
        this.otherButton = new Audio(this.audioBaseUrl + "/sound/otherbuttons.wav");
        this.selectButton = new Audio(this.audioBaseUrl + "/sound/select_button.wav");
        this.popupApperence = new Audio(this.audioBaseUrl + "/sound/popupapperence.wav");
        this.closeButton = new Audio(this.audioBaseUrl + "/sound/closebutton.wav");
        this.tilePickup = new Audio(this.audioBaseUrl + "/sound/Tilepickup.wav");
        this.titleDrop = new Audio(baseUrl + "/sound/Tiledrop.wav");
        this.playButton = new Audio(baseUrl + "/sound/playbutton.wav");
        this.isPlaySound = true;
        this.isError = false;
      } catch (err) {
        this.isPlaySound = false;
        this.isError = true;
      }
    }

    Sound.prototype.onSound = function() {
      if (!this.isError) {
        return this.isPlaySound = true;
      }
    };

    Sound.prototype.offSound = function() {
      return this.isPlaySound = false;
    };

    Sound.prototype.playOtherButtonSound = function() {
      if (this.isPlaySound) {
        return this.otherButton.play();
      }
    };

    Sound.prototype.playSelectButtonSound = function() {
      if (this.isPlaySound) {
        return this.selectButton.play();
      }
    };

    Sound.prototype.playPopupApperenceSound = function() {
      if (this.isPlaySound) {
        return this.popupApperence.play();
      }
    };

    Sound.prototype.playCloseButtonSound = function() {
      if (this.isPlaySound) {
        return this.closeButton.play();
      }
    };

    Sound.prototype.playTilePickupSound = function() {
      if (this.isPlaySound) {
        return this.tilePickup.play();
      }
    };

    Sound.prototype.playTitleDropSound = function() {
      if (this.isPlaySound) {
        return this.titleDrop.play();
      }
    };

    Sound.prototype.playPlayButtonSound = function() {
      if (this.isPlaySound) {
        return this.playButton.play();
      }
    };

    return Sound;

  })();
  return new Sound;
});

// Generated by CoffeeScript 1.3.3

define('../../helper/confirmBox',['./sound'], function(sound) {
  var removeMessagePopup;
  removeMessagePopup = function() {
    sound.playCloseButtonSound();
    $('.overlay').remove();
    return $('.msg-outer-div').remove();
  };
  return window.messagePopup = function(message, callback, callback_param) {
    var msgCancelDiv, popUp;
    removeMessagePopup();
    sound.playPopupApperenceSound();
    popUp = $("<div class=\"overlay\"></div><div class=\"msg-outer-div bounceIn animated\">\n	  					<div class=\"msg-inner-div\"><div class=\"msgbox-msg\"><p>" + message + "</p></div><div class=\"msgbox-ok\">ok</div></div>\n</div>");
    if (typeof callback === 'undefined') {
      $('.msgbox-ok', popUp).on('click', function(e) {
        return removeMessagePopup();
      });
    } else {
      msgCancelDiv = $("<div class=\"msgbox-cancel\">cancel</div>");
      $('.msgbox-ok', popUp).addClass("msgbox-cancel");
      msgCancelDiv.on('click', function(e) {
        return removeMessagePopup();
      });
      $('.msgbox-ok', popUp).on('click', function(e) {
        callback(callback_param);
        return removeMessagePopup();
      });
    }
    $('.msgbox-ok', popUp).after(msgCancelDiv);
    return $('#active-screen').append(popUp);
  };
});

// Generated by CoffeeScript 1.3.3

define('../../config/./config',[], function() {
  return {
    unionConnection: {
      url: document.domain,
      port: 9933
    },
    unionGameServerId: "zalerioGameServer",
    userLevelImg: ["carauselbelts_otherplayers_white_belt.png", "carauselbelts_otherplayers_yellow_belt.png", "carauselbelts_otherplayers_orange_belt.png", "carauselbelts_otherplayers_green_belt.png", "carauselbelts_otherplayers_blue_belt.png", "carauselbelts_otherplayers_purple_belt.png", "carauselbelts_otherplayers_red_belt.png", "carauselbelts_otherplayers_brown_belt.png", "carauselbelts_otherplayers_black_belt.png"],
    userLevelImgBig: ["carauselbelts_main_player_white_belt.png", "carauselbelts_main_player_yellow_belt.png", "carauselbelts_main_player_orange_belt.png", "carauselbelts_main_player_green_belt.png", "carauselbelts_main_player_blue_belt.png", "carauselbelts_main_player_purple_belt.png", "carauselbelts_main_player_red_belt.png", "carauselbelts_main_player_brown_belt.png", "carauselbelts_main_player_black_belt.png"],
    isDevEnvironment: true
  };
});

// Generated by CoffeeScript 1.3.3

define('../../config/globals',["./config"], function(config) {
  var DEFAULT_PLAYER_IMG_URL, zzCMDListners, zzEvents, zzGlobals;
  DEFAULT_PLAYER_IMG_URL = "/olotheme/images/fbDefaultUser.gif";
  zzEvents = {
    JOINED_ROOM: "joinedRoomListener",
    RESET_GAME_VARIABLES: "resetGameVariables",
    CLIENT_ADDED_TO_ROOM: "clientAddedListener",
    CLIENT_REMOVED_FROM_ROOM: "clientRemovedListener",
    ROOM_SNAPSHOT: "roomSnapshotListener",
    CLIENT_SNAPSHOT: "clientSnapshotListener",
    ROOM_ATTR_UPDATE: "roomAttrUpdateListener",
    CLIENT_ATTR_UPDATE: "clientAttrUpdateListener",
    ROOM_OCCUPANTCOUNT_UPDATE: "roomOccupantCountUpdateListener",
    LOGGED_IN: "onLoginResult",
    RECEIVE_MESSAGE: "messageListener",
    SEND_UPC_MESSAGE: "send_upc_message",
    RECEIVE_USERVO: "received_userVO",
    REMOVE_USERVO: "remove_userVO",
    UPDATE_TTL: "update_ttl",
    CONNECTION_CLOSE: "connection_close",
    SEND_CHAT_MESSAGE: "send_chat_message",
    UPDATE_LOCAL_TTL: "update_local_ttl",
    BID_CHANGED: "bid_changed",
    SERVER_MESSAGE: "SERVER_MESSAGE",
    WINNER_CHANGE: "winner_change",
    CLIENT_JOINED: "client_joined",
    CLIENT_LEFT: "client_left",
    OLOTUTS_MESSAGE: "olotuts_message",
    CLIENT_BETS_PLACED: "zalerioUserBetPlaced"
  };
  zzGlobals = function() {
    var UserVO, clientCodes, clientVars, currentUserDBId, dataObjCodes, dataObjVars, gameDuration, generateAttrVars, getUserName, inviteStatus, msgCodes, msgVars, offlinePlayers, pageRefresh, roomCodes, roomVars, roomVarsFlag, setClockInterval, ttl, updateClock, updateGameDuration, updateTTL, userFBVOs, userVOs, userVOsIndex, userVOsPartyIndex, userVOsSeatIndex;
    inviteStatus = null;
    ttl = null;
    currentUserDBId = null;
    offlinePlayers = null;
    clientCodes = {
      USER_ID: "UI",
      USER_DISPLAY_NAME: "UD",
      USER_NAME: "UN",
      USER_UNION_ID: "UU",
      USER_FACEBOOK_ID: "UF",
      USER_PARTY_ID: "UP",
      USER_SEAT_ID: "UR",
      Z_USER_SCORE: "ZS",
      MY_TURN: "MT",
      THEIR_TURN: "TT",
      ALL_PAST_GAME: "APG",
      USERINFO: "UINFO"
    };
    msgCodes = {
      RIGHT_HUD: "RH"
    };
    dataObjCodes = {
      ALL_PLAYER_INFO: "AP"
    };
    roomCodes = {
      ROOM_ID: "GI",
      USER_TOTAL: "UT",
      USER_COUNT: "UC",
      WINNER_NAME: "WN",
      WINNER_ID: "WI",
      GAME_ENDED: "GE",
      TIME_LEFT: "TL",
      GAME_DURATION: "GD",
      START_TIME: "ST",
      END_TIME: "ET",
      ROOM_NAME: "RN",
      TOTAL_SEATS: "TS",
      ROOM_PRIZE_NAME: "RP",
      ROOM_MRP: "RM",
      ROOM_IMAGEROOM_MRP: "RI",
      TOTALROUNDS: "TR",
      CURRENTROUND: "CR",
      ROUND_ENDTIME: "RE",
      ROUND_ENDTIMEINMS: "EM",
      ROUND_NOOFBETS: "NB",
      BOARDVARS: "BV",
      BOARD_XY: "XY",
      TOTALFIGS: "TF",
      ROOM_ALLROUNDS: "AR",
      FIGURE_DETAILS: "FD",
      ZALERIO_SCORES: "ZS",
      GAME_FINISH: "FR",
      PLAYER_BETS_PLACE: "PP",
      ALL_PLAYER_INFO: "AP"
    };
    userVOsIndex = {};
    userVOsSeatIndex = {};
    userVOsPartyIndex = {};
    generateAttrVars = function(attrCodes) {
      var attrV, i;
      attrV = {};
      for (i in attrCodes) {
        attrV[attrCodes[i]] = i;
      }
      return attrV;
    };
    msgVars = generateAttrVars(msgCodes);
    dataObjVars = generateAttrVars(dataObjCodes);
    clientVars = generateAttrVars(clientCodes);
    roomVars = generateAttrVars(roomCodes);
    roomVarsFlag = generateAttrVars(roomCodes);
    userVOs = {};
    userFBVOs = {};
    gameDuration = "";
    setClockInterval = "";
    UserVO = function(userUnionId, userSnapshotObj) {
      var i, userVArr, userVArrLen;
      if (config.isDevEnvironment) {
        console.log("Added to room " + userSnapshotObj);
        console.log("Current User local ID : " + zzGlobals.currentUserDBId);
      }
      for (i in clientCodes) {
        this[clientCodes[i]] = "-1";
      }
      userVArr = userSnapshotObj.split("|");
      userVArrLen = userVArr.length;
      i = 0;
      while (i < userVArrLen) {
        if (clientVars[userVArr[i]]) {
          this[userVArr[i]] = userVArr[i + 1];
        }
        i += 3;
      }
      if (this[clientCodes.USER_ID]) {
        this[clientCodes.USER_UNION_ID] = userUnionId;
      }
      if (this[clientCodes.USER_ID] === zzGlobals.currentUserDBId) {
        i = 0;
        while (i < userVArrLen) {
          if (clientVars[userVArr[i]]) {
            zzGlobals.clientVars[userVArr[i]] = userVArr[i + 1];
          }
          i += 3;
        }
      }
      return this;
    };
    getUserName = function(clientID) {
      var userName;
      userName = clientID;
      if (clientID && zzGlobals.userVOsIndex[clientID]) {
        userName = zzGlobals.userVOsIndex[clientID][clientCodes.USER_DISPLAY_NAME];
      }
      return userName;
    };
    updateGameDuration = function(event, data) {
      data = (data ? parseInt(data) : null);
      if (data && !isNaN(data)) {
        return gameDuration = data;
      }
    };
    updateClock = function() {
      ttl--;
      if (ttl > 0) {
        if (pageRefresh && pageRefresh.isTimerEnabled && pageRefresh.isTimerEnabled()) {
          pageRefresh.clearTimer();
        }
      } else {
        if (pageRefresh && ttl <= 0) {
          if (pageRefresh.isTimerEnabled && !(pageRefresh.isTimerEnabled()) && currentScreen !== "postscreen") {
            if (config.isDevEnvironment) {
              console.log("Pagerefresh.isTimerEnabled false!");
            }
            pageRefresh.enableTimer();
          }
        }
      }
      return jDocument.trigger(oloEvents.UPDATE_LOCAL_TTL, this.ttl);
    };
    updateTTL = function(event, data) {
      if (setClockInterval) {
        clearInterval(setClockInterval);
      }
      data = (data ? parseInt(data) : null);
      if (data && typeof data === "number") {
        ttl = data;
      }
      return setClockInterval = setInterval(updateClock, 10000);
    };
    pageRefresh = function() {
      var clearTimerFn, enableTimerFn, timer;
      timer = null;
      enableTimerFn = function() {
        var _this;
        _this = this;
        timer = setTimeout(function() {
          return redirectToPlayNow(gameInstId);
        }, 5000);
        if (config.isDevEnvironment) {
          return console.log("refresh timer set!");
        }
      };
      clearTimerFn = function() {
        timer = null;
        if (config.isDevEnvironment) {
          return console.log("refresh timer cleared!");
        }
      };
      return {
        isTimerEnabled: function() {
          if (timer) {
            return true;
          } else {
            return false;
          }
        },
        enableTimer: function() {
          return enableTimerFn();
        },
        clearTimer: function() {
          return clearTimerFn();
        }
      };
    };
    return {
      generateAttrVarsFn: function(p) {
        return generateAttrVars(p);
      },
      roomCodes: roomCodes,
      clientCodes: clientCodes,
      msgCodes: msgCodes,
      dataObjCodes: dataObjCodes,
      dataObjVars: dataObjVars,
      UserVO: UserVO,
      userVOsIndex: userVOsIndex,
      roomVars: roomVars,
      roomVarsFlag: roomVarsFlag,
      clientVars: clientVars,
      msgVars: msgVars,
      userVOs: userVOs,
      userFBVOs: userFBVOs,
      getUserName: getUserName,
      userVOsPartyIndex: userVOsPartyIndex,
      getTtl: function() {
        return ttl;
      },
      userVOsSeatIndex: userVOsSeatIndex,
      getGameDuration: function() {
        return gameDuration;
      },
      offlinePlayers: offlinePlayers,
      currentUserDBId: currentUserDBId
    };
  };
  zzCMDListners = {
    ORIG_FIGS: "OF",
    BET_RESPONSE: "PB",
    BET_CHANGES: "CB",
    RESIGN_GAME: "RG",
    CLOSE_INVITE: "CI",
    RIGHT_HUD: "MT",
    DECLINE_STATUS: "DG"
  };
  window.jDocument = jQuery(document);
  window.zalerioCMDListners = zzCMDListners;
  window.zzGlobals = new zzGlobals();
  return window.zzEvents = zzEvents;
});

// Generated by CoffeeScript 1.3.3

define('../../helper/sound',[], function() {
  var Sound;
  Sound = (function() {

    function Sound() {
      try {
        this.audioBaseUrl = baseUrl.replace('/index.php', '/');
        this.otherButton = new Audio(this.audioBaseUrl + "/sound/otherbuttons.wav");
        this.selectButton = new Audio(this.audioBaseUrl + "/sound/select_button.wav");
        this.popupApperence = new Audio(this.audioBaseUrl + "/sound/popupapperence.wav");
        this.closeButton = new Audio(this.audioBaseUrl + "/sound/closebutton.wav");
        this.tilePickup = new Audio(this.audioBaseUrl + "/sound/Tilepickup.wav");
        this.titleDrop = new Audio(baseUrl + "/sound/Tiledrop.wav");
        this.playButton = new Audio(baseUrl + "/sound/playbutton.wav");
        this.isPlaySound = true;
        this.isError = false;
      } catch (err) {
        this.isPlaySound = false;
        this.isError = true;
      }
    }

    Sound.prototype.onSound = function() {
      if (!this.isError) {
        return this.isPlaySound = true;
      }
    };

    Sound.prototype.offSound = function() {
      return this.isPlaySound = false;
    };

    Sound.prototype.playOtherButtonSound = function() {
      if (this.isPlaySound) {
        return this.otherButton.play();
      }
    };

    Sound.prototype.playSelectButtonSound = function() {
      if (this.isPlaySound) {
        return this.selectButton.play();
      }
    };

    Sound.prototype.playPopupApperenceSound = function() {
      if (this.isPlaySound) {
        return this.popupApperence.play();
      }
    };

    Sound.prototype.playCloseButtonSound = function() {
      if (this.isPlaySound) {
        return this.closeButton.play();
      }
    };

    Sound.prototype.playTilePickupSound = function() {
      if (this.isPlaySound) {
        return this.tilePickup.play();
      }
    };

    Sound.prototype.playTitleDropSound = function() {
      if (this.isPlaySound) {
        return this.titleDrop.play();
      }
    };

    Sound.prototype.playPlayButtonSound = function() {
      if (this.isPlaySound) {
        return this.playButton.play();
      }
    };

    return Sound;

  })();
  return new Sound;
});

// Generated by CoffeeScript 1.3.3

define('rightHudController',["../../config/config", "../../helper/sound"], function(config, sound) {
  var updateRightHud;
  updateRightHud = function(event, message) {
    var gameId, gameSeatID, index, status, urDiv, urDivClassName, _ref;
    for (gameId in message) {
      if (document.getElementById("right_hud_" + gameId) === null) {
        urDivClassName = gameInstId === gameId ? "userArea selected" : "userArea";
        urDiv = $("<div class=\"" + urDivClassName + "\" id=\"right_hud_" + gameId + "\" ></div>");
        if (message[gameId].CR) {
          urDiv.append("<div class=\"round_no\">" + message[gameId].CR + "</div>");
        }
        if (message[gameId].ED) {
          urDiv.append("<div class=\"game_end_time\">" + message[gameId].ED + "</div>");
        }
        for (index in message[gameId].PLSC) {
          gameSeatID = message[gameId].PLSC[index];
          if (message[gameId].PLRS[gameSeatID].GSS === 5 || message[gameId].PLRS[gameSeatID].GSS === 3) {
            continue;
          }
          status = message[gameId].PLRS[gameSeatID].PON === 1 ? "online" : "offline";
          if (message[gameId].PLRS[gameSeatID].PFB) {
            urDiv.append("<div class=\"imageWrapper\" id=\"right_hud_Images" + gameId + "\"><img src=\"https://graph.facebook.com/" + message[gameId].PLRS[gameSeatID].PFB + "/picture\" alt=\"" + message[gameId].PLRS[gameSeatID].PFN + "\" class=\"" + status + "\" id=\"who_am_i_" + gameSeatID + "\" /></div>");
          }
          if (message[gameId].PLRS[gameSeatID].GSS) {
            if (message[gameId].PLRS[gameSeatID].GSS === 1 && zzGlobals.currentUserDBId === message[gameId].PLRS[gameSeatID].UI) {
              urDiv.append("<div class=\"accept_decline\" id=\"accept_decline_" + gameId + "\"><div class=\"right_hud_accept\">Accept</div><div class=\"right_hud_decline\">Decline</div></div>");
              acceptInvitationAdd($("#accept_decline_" + gameId + " .right_hud_accept"), gameId);
              $("#accept_decline_" + gameId + " .right_hud_decline").click({
                gsID: gameSeatID,
                id: gameId
              }, function(e) {
                return jDocument.trigger("sendDeclinedToServer", [e.data.gsID, e.data.id]);
              });
            } else if (zzGlobals.currentUserDBId === message[gameId].PLRS[gameSeatID].UI) {
              urDiv.click({
                id: gameId
              }, function(e) {
                sound.playSelectButtonSound();
                createGameDetailsPopup(e.data.id);
              });
            }
          }
          if (parseInt(message[gameId].GS) === 1) {
            $('#rightHUD-yourturn').append(urDiv);
          }
          if (parseInt(message[gameId].GS) === 2) {
            $('#rightHUD-theirturn').append(urDiv);
          }
        }
      } else {
        if (parseInt(message[gameId].GS) === 0) {
          jQuery("#right_hud_" + gameId).remove();
          continue;
        } else {
          if (parseInt(message[gameId].GS) === 1) {
            if (jQuery("#right_hud_" + gameId).parent().attr('id') === 'rightHUD-theirturn') {
              $("#right_hud_" + gameId).detach().appendTo('#rightHUD-yourturn');
            }
          } else if (parseInt(message[gameId].GS) === 2) {
            if ($("#right_hud_" + gameId).parent().attr('id') === 'rightHUD-yourturn') {
              $("#right_hud_" + gameId).detach().appendTo('#rightHUD-theirturn');
            }
          }
          if (message[gameId].CR) {
            $("#right_hud_" + gameId).find('.round_no').text(message[gameId].CR);
          }
          if (message[gameId].ED) {
            $("#right_hud_" + gameId).find('.game_end_time').html(message[gameId].ED);
          }
          for (gameSeatID in message[gameId].PLRS) {
            if (typeof message[gameId].PLRS[gameSeatID].PON !== "undefined") {
              if (message[gameId].PLRS[gameSeatID].GSS === 5 || message[gameId].PLRS[gameSeatID].GSS === 3) {
                $("#who_am_i_" + gameSeatID).remove();
              } else {
                $("#who_am_i_" + gameSeatID).removeClass().addClass((_ref = message[gameId].PLRS[gameSeatID].PON) != null ? _ref : {
                  "online": "offline"
                });
              }
            }
            if (typeof message[gameId].PLRS[gameSeatID].GSS !== 'undefined') {
              if (message[gameId].PLRS[gameSeatID].GSS !== 1 && zzGlobals.currentUserDBId === message[gameId].PLRS[gameSeatID].UI) {
                $('#accept_decline_' + gameId).remove();
                if (!$("#right_hud_" + gameId).data("events").click) {
                  $("#right_hud_" + gameId).click({
                    id: gameId
                  }, function(e) {
                    sound.playSelectButtonSound();
                    return createGameDetailsPopup(e.data.id);
                  });
                }
              }
            }
          }
        }
      }
    }
    if ($('#rightHUD-yourturn').find(".userArea").length === 0) {
      if ($('#rightHUD-yourturn').find(".newCarouselblanktile").length === 0) {
        $('#rightHUD-yourturn').append('<div class="newCarouselblanktile"></div>');
      }
    } else {
      $("#rightHUD-yourturn .newCarouselblanktile").remove();
    }
    if ($('#rightHUD-theirturn').find(".userArea").length === 0) {
      if ($('#rightHUD-theirturn').find(".newCarouselblanktile").length === 0) {
        $('#rightHUD-theirturn').append('<div class="newCarouselblanktile"></div>');
      }
    } else {
      $("#rightHUD-theirturn .newCarouselblanktile").remove();
    }
    return true;
  };
  window.createGameDetailsPopup = function(gameId) {
    var betPlacedNoClass, gameDetails, gdDiv, gdPlaydivClassName, gdUserImgclassName, i, index, playerName, plrs, remindUsersData, trClass, _ref, _score;
    gameDetails = zzGlobals.msgVars.RH[gameId];
    jQuery('.gdWrapper').remove();
    gdDiv = $("<div class=\"gdWrapper animated fadeInRight\">\n	<div class=\"gdScoreCardDiv\">\n		<div class=\"gdAllRoundDiv\" id=\"gdAllRoundDivId\"></div>\n\n		<div class=\"gdScoreInfoDiv\">\n			<table class=\"gdScoreCardTbl\"></table>\n		</div>\n	</div>\n	<div class=\"gdUsersImgdiv\"></div>\n	<div class=\"gdReminddiv\"></div>\n	<div class=\"gdReturndiv\"></div>\n</div>");
    $('.gdReminddiv', gdDiv).click(function() {
      remindUser(gameId, remindUsersData);
    });
    $('.gdReturndiv', gdDiv).on('click', function(e) {
      sound.playCloseButtonSound();
      return $('.gdWrapper').remove();
    });
    gdPlaydivClassName = gameId !== gameInstId ? 'gdResumeDiv' : 'gdPlaydiv';
    gdDiv.append("<div class=\"" + gdPlaydivClassName + "\"></div>");
    if (gameId !== gameInstId) {
      $("." + gdPlaydivClassName, gdDiv).click({
        id: gameId,
        remove: '.gdWrapper'
      }, function(e) {
        sound.playCloseButtonSound();
        if (e.data.remove) {
          $(e.data.remove).remove();
        }
        return jDocument.trigger("gameChangeListener", e.data.id);
      });
    } else {
      $("." + gdPlaydivClassName, gdDiv).on("click", function(e) {
        sound.playCloseButtonSound();
        return $('.gdWrapper').remove();
      });
    }
    i = 0;
    remindUsersData = {};
    for (index in gameDetails.PLSC) {
      plrs = gameDetails.PLRS[gameDetails.PLSC[index]];
      remindUsersData[plrs.PFB] = {
        GSS: plrs.GSS,
        CRS: plrs.CRS
      };
      if (plrs.GSS === 5 || plrs.GSS === 3) {
        continue;
      }
      gdUserImgclassName = (_ref = plrs.PON === 1) != null ? _ref : {
        'gdUserImg user_online': 'gdUserImg'
      };
      _score = plrs.PSC ? plrs.PSC : '0';
      trClass = "userScoreHUD_player";
      betPlacedNoClass = 'userScoreHUD_playerBetPlacedNo arrowclass';
      if (plrs.PDN) {
        playerName = plrs.PDN;
        if (parseInt(plrs.PRE) !== 1) {
          if (parseInt(plrs.PON) === 0) {
            trClass = "userScoreHUD_player GRAY";
          }
        } else {
          if (parseInt(plrs.UI) === parseInt(zzGlobals.currentUserDBId)) {
            playerName = "<s>" + plrs.PDN + "</s>";
            betPlacedNoClass = 'userScoreHUD_playerBetPlacedNo';
          }
        }
      }
      if (plrs.CRS === 9) {
        betPlacedNoClass = 'userScoreHUD_playerBetPlacedNo';
      }
      $('.gdUsersImgdiv', gdDiv).append("<div class=\"gdUserImgDiv user_offline\"><img src=\"" + baseUrl + "/images/zalerio_1.2/4.ingame_ui/carauselbelts_main_player/" + config.userLevelImgBig[parseInt(plrs.PL) - 1] + "\" class=\"gdUserImgbelt\" /><img src=\"https://graph.facebook.com/" + plrs.PFB + "/picture\" class=\"" + gdUserImgclassName + "\" /></div> ");
      $(".gdScoreCardTbl", gdDiv).append("\" <tr class=\"" + trClass + "\">\n	<td  class=\"" + betPlacedNoClass + "\"></td> \n	<td  class=\"userScoreHUD_playerSerial\" >" + (++i) + "</td>\n	<td  class=\"userScoreHUD_playerName\" >" + playerName + "</td>\n	<td class=\"userScoreHUD_playerScore\">" + _score + "</td>\n</tr>");
    }
    sound.playPopupApperenceSound();
    return $('#active-screen').append(gdDiv);
  };
  jDocument.bind("client:" + zzGlobals.msgCodes.RIGHT_HUD, updateRightHud);
  return true;
});

// Generated by CoffeeScript 1.3.3

define('leftHudController',["../../config/config"], function(config) {
  var updateLeftHud, updatePlayerPlate;
  updatePlayerPlate = function() {
    var currentUserObj;
    currentUserObj = jQuery.parseJSON(zzGlobals.clientVars.UINFO);
    $("#currentUserName").text(currentUserObj.PDN);
    if (typeof currentUserObj.PL !== "undefined") {
      if (parseInt(currentUserObj.PL) === 0) {
        currentUserObj.PL = 1;
      }
      $("#currentUserAreaImg .userlevelbelt").remove();
      return $("#currentUserAreaImg").prepend("<img class=\"userlevelbelt\" src=\"" + baseUrl + "/images/zalerio_1.2/4.ingame_ui/carauselbelts_main_player/" + config.userLevelImgBig[parseInt(currentUserObj.PL) - 1] + "\" />");
    }
  };
  updateLeftHud = function() {
    var plrs, seatID, userList, userPlayStatusClassName, userPlayStatusText;
    plrs = zzGlobals.dataObjVars.AP.PLRS;
    $("#gameInfo-game-players").empty();
    userList = $("<div class=\"background\"></div>");
    for (seatID in plrs) {
      if (zzGlobals.currentUserDBId === plrs[seatID].UI) {
        continue;
      }
      userPlayStatusText = "not played yet";
      userPlayStatusClassName = "userPlayStatus";
      if (plrs[seatID].CRS === 0) {
        userPlayStatusClassName = "userPlayStatus";
      } else if (plrs[seatID].CRS === 5) {
        userPlayStatusText = '...playing now';
        userPlayStatusClassName = "userPlayStatus green";
      } else if (plrs[seatID].CRS === 9) {
        userPlayStatusText = "finished round";
        userPlayStatusClassName = "userPlayStatus green";
      }
      userList.append(" <div class=\"infoPlate\">\n									<div class=\"userAreaImg\" id=\"\">\n											<img class=\"userlevelbelt\" src=\"" + baseUrl + "/images/zalerio_1.2/4.ingame_ui/carauselbelts_main_player/" + config.userLevelImgBig[parseInt(plrs[seatID].PL) - 1] + "\" />\n			                                <img class=\"backendImage " + (plrs[seatID].PON !== 1 ? "offline" : void 0) + "\" src=\"http://graph.facebook.com/" + plrs[seatID].PFB + "/picture\" />\n			                        </div>\n									<div class=\"userinfo\">\n										<div class=\"username\">" + plrs[seatID].PDN + "</div>\n										<div class=\"lastPlayed\">" + (plrs[seatID].PLP ? plrs[seatID].PLP : '') + "</div>\n										<div class=\"" + userPlayStatusClassName + "\">" + userPlayStatusText + "</div>\n									</div>\n</div>");
    }
    return $("#gameInfo-game-players").append(userList);
  };
  jDocument.bind("room:" + zzGlobals.roomCodes.ALL_PLAYER_INFO, updateLeftHud);
  jDocument.bind("client:" + zzGlobals.clientCodes.USERINFO, updatePlayerPlate);
  return true;
});

// Generated by CoffeeScript 1.3.3

define('../../helper/utils',[], function() {
  return {
    addEventHandler: function(node, evtType, func, isCapture) {
      if (window && window.addEventListener) {
        return node.addEventListener(evtType, func, isCapture);
      } else {
        return node.attachEvent("on" + evtType, func);
      }
    },
    removeEventHandler: function(node, evtType, func, isCapture) {
      if (window && window.removeEventListener) {
        return node.removeEventListener(evtType, func, isCapture);
      } else {
        return node.detachEvent("on" + evtType, func);
      }
    },
    removeClassName: function(node, cls) {
      var reg;
      reg = void 0;
      if ((node != null) && node.className) {
        reg = new RegExp("(\\s|^)" + cls + "(\\s|$)");
        return node.className = node.className.replace(reg, " ");
      }
    },
    log: function(message) {},
    getMiniLoaderHTML: function() {
      return "<div id=\"floatingBarsGs\">\n<div class=\"blockG\" id=\"rotateG_01\">\n</div>\n<div class=\"blockG\" id=\"rotateG_02\">\n</div>\n<div class=\"blockG\" id=\"rotateG_03\">\n</div>\n<div class=\"blockG\" id=\"rotateG_04\">\n</div>\n<div class=\"blockG\" id=\"rotateG_05\">\n</div>\n<div class=\"blockG\" id=\"rotateG_06\">\n</div>\n<div class=\"blockG\" id=\"rotateG_07\">\n</div>\n<div class=\"blockG\" id=\"rotateG_08\">\n</div>\n</div>";
    }
  };
});

// Generated by CoffeeScript 1.3.3
define('myLevel',[],function(){
	isDevEnvironment = true;
	try{
	// global var which will contain user info
	var GB_UINFO = {};
	GB_UINFO.PFN = "";
}catch(err){}

/***** users record ***/
/**this function updates the stats popup - mygames and mylevel */
return function usersRecord(gameRecords)
{
	console.log("gameRecords",gameRecords);
	
   try
   {
    var is_apg = true;
    
  
    // APG hols the data about all past games    
    if(gameRecords.APG == 'ALL_PAST_GAME' || gameRecords.APG =='' || gameRecords.APG == null || typeof(gameRecords.APG) == 'undefined')
        {
            var APG = {};is_apg = false;
        }
        else
        {
            var APG = gameRecords.APG;
        }
   if (typeof(gameRecords.UINFO) == 'undefined' ){
       return;
   }
   // this variable holds user info     
   var UINFO = gameRecords.UINFO;
   GB_UINFO = UINFO;
    if ( typeof(UINFO.PL) == 'undefined' || parseInt(UINFO.PL) == 0){
            UINFO.PL = 1;
    }

   UINFO.user_pic = "https://graph.facebook.com/"+UINFO.PFB+ "/picture?type=square";
   // current user id
   var cuid = UINFO.UI;
   //this array will hold all the data about past games and user info
   var pastGames = {'won':{},'lost':{},'usersInfo':{}};
    
   var cm_fbids = "";
   var gssCount = 0; 
   }
   catch(err)
   {
       if(isDevEnvironment === true)
       {
           console.log('building past games data',err);
       }
       return;
   }
   
  try
  {
    for(i in APG)
        {
            // here i corresponds to gameid
            // gameData will hold the about a particular game
            var gameData = APG[i];
            for(j in gameData)
                {
                    // if key equals PLRS, then corresponding value array will hold the data about players 
                    if(j == 'PLRS')
                        {
                            var PLRS = gameData[j];
                            var has_won = 0;
                            user_arr = {};
                            for(seatid in PLRS)
                                {
                                    pldata = PLRS[seatid];
                                    if(pldata['UI'] == cuid && pldata['PR'] == 1){has_won = 1;}
                                    user_arr[pldata['UI']] = {};
                                    user_arr[pldata['UI']]['fbid']= pldata['PFB'];
                                    user_arr[pldata['UI']]['pre']= pldata['PRE'];
                                    user_arr[pldata['UI']]['gss']= pldata['GSS'];
                                    pastGames['usersInfo'][pldata['UI']] = {};
                                    pastGames['usersInfo'][pldata['UI']]['name'] = pldata['PDN'];
                                    pastGames['usersInfo'][pldata['UI']]['fbid'] = pldata['PFB'];
                                    pastGames['usersInfo'][pldata['UI']]['gss'] = pldata['GSS'];
                                    pastGames[i] = {};
                                    pastGames[i]['user_arr'] = user_arr;
                                }
                                if(has_won == 1)
                                    {
                                        pastGames[i]['won'] = 1; 
                                    }
                                    else
                                        {
                                            pastGames[i]['won'] = 0; 
                                        }
                                
                        }
                    
                }
        }
  }
  catch(err)
  {
      if(isDevEnvironment === true)
       {
                      console.log('building past games data',err);
       }
  }
          /***** RH will contain active ganmes data *****/
          try
          {
            if(typeof(gameRecords.RH) == 'object')
            {
               jQuery.each(gameRecords.RH,
                            function(gameId,gameData)
                            { 
                              jQuery("#active_rh_"+gameId).remove();  
                              if(gameData.GS != '0')
                              { 
                               var div_rip  = document.createElement("div");
                               div_rip.className = "rip";
                               div_rip.setAttribute('id','active_rh_'+gameId);
                               var div_caro  = document.createElement("div");
                               div_caro.className = "game_stats_user infiniteCarousel";
                               
                               
                               var div_wrapper  = document.createElement("div");
                               div_wrapper.className = "wrapper";
                               
                               var ul  = document.createElement("ul");
                               
                                
                                var pl_rank = '';
                                jQuery.each(gameData.PLRS,function(index,eachPL)
                                    { 
                                        var li  = document.createElement("li");
                                        var img  = document.createElement("img");
                                        var span  = document.createElement("span");
										var a = document.createElement("a");
                                        span.innerHTML=eachPL.PDN;
                                        img.setAttribute('width','31');
                                        img.setAttribute('height','31');
                                        img.setAttribute('src',"https://graph.facebook.com/"+ eachPL.PFB+ "/picture?type=square");
										a.setAttribute('href','#');
                                        a.appendChild(img);a.appendChild(span);li.appendChild(a);
                                       ul.appendChild(li);
                                       
                                       if(UINFO.PFB == eachPL.PFB){pl_rank = eachPL.PR};
                                    }
                                );
                                 
                                 div_wrapper.appendChild(ul);
                                 div_caro.appendChild(div_wrapper);
                                 
                                 
                                 
                                  var div_round_stats  = document.createElement("div");
                                  div_round_stats.className = 'round_stats';
                                  if(gameData.CR == 'F')
                                  {
                                      div_round_stats.innerHTML = gameData.CR;
                                  }
                                  else
                                  {    
                                    div_round_stats.innerHTML = getOrdinal(gameData.CR,true);
                                  }
                                  var div_rank_stats  = document.createElement("div");
                                  div_rank_stats.className = 'rank_stats';
                                  if(pl_rank != 0 && pl_rank != '' && pl_rank != ' ')
                                  {    
                                    div_rank_stats.innerHTML = getOrdinal(pl_rank,true);
                                  }else
                                      {
                                          div_rank_stats.innerHTML = '-';
                                      }
                                  div_rip.appendChild(div_caro);
                                  div_rip.appendChild(div_round_stats);
                                  div_rip.appendChild(div_rank_stats);
                                 
                                   jQuery("#rip_active_rh").append(div_rip);
								   
                                }
                                
                            }
                           );
                    }         
          }
          catch(err)
          {
              if(isDevEnvironment === true)
                  {
                      console.log('stats RH active games',err);
                  }
          }
          
          
          
     // show past games data
     try
     {
          // if data of all past games has changed
          if(is_apg)
          {
                // first remove the data of all past games that are present and rebuild with start
                jQuery(".ap_games").remove(); console.log('past',pastGames);
                jQuery.each(gameRecords.APG_SORT,
                            function(index,value)
                            {
                                // value is gameId
                                var div_rip  = document.createElement("div");
                                div_rip.className = 'rip ap_games';
                                
                               var div_caro  = document.createElement("div");
                                div_caro.className = 'game_stats_user infiniteCarousel';
                                
                                var div_wrapper  = document.createElement("div");
                                div_wrapper.className = 'wrapper';
                             
                                var ul  = document.createElement("ul");   
                                jQuery.each(pastGames[value]['user_arr'],function(uid,value)
                                    { 
                                        var li  = document.createElement("li");
                                        var img  = document.createElement("img");
                                        var span  = document.createElement("span");
                                        var a = document.createElement("a");
                                        span.innerHTML = pastGames['usersInfo'][uid]['name'];
                                        img.setAttribute('width','31');
                                        img.setAttribute('height','31');
                                        img.setAttribute('src',"https://graph.facebook.com/"+ pastGames['usersInfo'][uid]['fbid']+ "/picture?type=square");
					a.setAttribute('href','#');
                                        a.appendChild(img);a.appendChild(span);li.appendChild(a);
                                        ul.appendChild(li);
                                    }
                                );
                                    div_wrapper.appendChild(ul);
                                    div_caro.appendChild(div_wrapper);
                                    cm_fbids = "'";gssCount = 0;
                                    for(key in pastGames[value]['user_arr'])
                                    {
                                            if(pastGames[value]['user_arr'][key].gss =='2')
                                            {
                                                if(cm_fbids == "'")
                                                    {
                                                        cm_fbids +=pastGames[value]['user_arr'][key].fbid; 
                                                    }
                                                    else{cm_fbids +=","+pastGames[value]['user_arr'][key].fbid;}
                                                    gssCount += 1;
                                            }   
                                    }
                                   cm_fbids += "'"; 
                                    var div_medal  = document.createElement("div");
                                    div_medal.className = 'medal';
                                    var div_rematch  = document.createElement("div");
                                    div_rematch.className = 'rematch';
                                    if(gssCount > 1 && typeof pastGames[value]['user_arr'][UINFO.UI] != 'undefined' && pastGames[value]['user_arr'][UINFO.UI].pre == 0 )
                                    {    
                                        div_rematch.innerHTML =  '<a href="#" onclick="rematchPastGames('+cm_fbids+','+"'Rematch','"+value+"'"+'); return false;">Rematch</a>';
                                    }
				if(pastGames[value]['won'] == 1)
				{
                                    var img_medal  = document.createElement("img"); 
                                    img_medal.setAttribute('width','40');
                                    img_medal.setAttribute('height','31');
                                    img_medal.setAttribute('src',baseUrl+'/images/zalerio_1.2/5.all_popup/mystats/mygames/cup.png');
                                    div_medal.appendChild(img_medal);
				}
                                    div_rip.appendChild(div_caro);
                                    div_rip.appendChild(div_medal);
                                    div_rip.appendChild(div_rematch);
                                
                                    jQuery("#rip_won_apg").append(div_rip);
                            }
                    );
                        
                     
              }
     }
     catch(err)
     {
         if(isDevEnvironment === true)
                  {
                      console.log('showing past games',err);
                  }
     }
               /**** for scroll bar ******/
                jQuery(function()
			{ 
				jQuery('.scroll-pane').jScrollPane({showArrows: true,autoReinitialise: true});

			});
                        jQuery(".carousel_link").remove();
                  $('.infiniteCarousel').infiniteCarousel();
              
        // show level data
        try
        {
              var user_level = UINFO.PL;
              var cls = belt_array[user_level].toLowerCase();
              var top_level = sizeOfObj(belt_array);
              if(user_level < top_level)
              {
               var next_level = user_level+1;
                }
                else{
                    var next_level = user_level; 
                }
              var next_cls = belt_array[next_level].toLowerCase();
              var low_next_won_arr = total_won_array[next_level-1].split('-');
              var need_won_next = low_next_won_arr[0] - UINFO.GW;
             
              var low_next_game_arr = total_games_array[next_level-1].split('-');
              var need_game_next = low_next_game_arr[0] - UINFO.GP;
              
              // cr_belt_html will hold the data of current belt level like played games and won games till now
              var cr_belt_html = "<li>You played "+UINFO.GP+" game";
              if(UINFO.GP > 0){cr_belt_html +="s";}
              cr_belt_html += "</li><li>You won "+UINFO.GW+"</li>";
              
              //next_belt_html will hold the data, user need to complete like need t play 10 games and need to win 3 games to reach next level
              var next_belt_html ="";
              if(need_game_next > 0 && need_game_next > need_won_next)
                  {
                      next_belt_html +="<li>"+ need_game_next + " more game";
                      if(need_game_next > 1){next_belt_html +="s";}
                      next_belt_html +="</li>";
                  }
              if(need_won_next > 0 )
                  {
                      next_belt_html +="<li>"+ need_won_next + " more to win</li>";
                      
                  }
              
              jQuery("#next_belt_ul").html(next_belt_html);
              jQuery("#current_belt_ul").html(cr_belt_html);
              
              jQuery("#current_belt_h4").html(capFirst(cls));
              jQuery("#next_belt_h4").html(capFirst(next_cls));
              
              jQuery("#belt-info").attr('class','belt-info '+cls);
              jQuery("#belt-info").css('background','url('+baseUrl+'/images/zalerio_1.2/5.all_popup/mystats/mylevel/girl/girl_in'+cls+'/girl_'+cls+'_1.png) no-repeat -20px 33px');
              jQuery("#belt_text").html(capFirst(cls));
              if(user_level == next_level)
              {jQuery("#belt-info .next-belt").hide();jQuery("#belt-info .dummy_div").show();}
              else{jQuery("#belt-info .next-belt").show();jQuery("#belt-info .dummy_div").hide();}
              
              var vertical_text = "";
              // this will add all belts and the highlighted belt according to user level on right side of my level pop up
              for(i=top_level;i>0;i--)
                  {
                      var cl = belt_array[i].toLowerCase();
                      var cl_up = capFirst(cl);
                      if(user_level == i)
                          {
                              vertical_text += '<li class="active"><img src="../images/zalerio_1.2/5.all_popup/mystats/mylevel/belts/belts_highlighted/'+cl+'.png" alt="Black belt"><a class="'+cl+'" >'+cl_up+'</a></li>';
                          }else
                              {
                                  vertical_text += '<li><img src="../images/zalerio_1.2/5.all_popup/mystats/mylevel/belts/belts_ideal/'+cl+'.png" alt="Black belt"><a class="'+cl+'" >'+cl_up+'</a></li>';
                              }
                  }
              jQuery("#vertical_belt_conent").html(vertical_text);
               // show mylevel-check
                    jQuery("#mylevel-check").show();
    }
    catch(err)
    {
        if(isDevEnvironment === true)
        {
           console.log('showing level data',err);
        }
    }
    
    try
    {
        
    
                /*** user info that is displayed on top of my games and my level tabs ****/
                    jQuery("#stat_image_main").attr('src',UINFO.user_pic);
                    jQuery("#stat_image_tri_level").attr('src',baseUrl+"/images/zalerio_1.2/5.all_popup/mystats/mystatsCommon/stats_main_player_belts/"+userLevelImgBig[UINFO.PL-1]);
                    jQuery("#popup-stats .div_top .div_img #stat_userName").html(UINFO.PDN);
                    jQuery("#popup-stats .div_top #joined_time").html(" "+UINFO.JD);
                    //jQuery("#frnd_playing").html(obj.frnd_stats.on_zl);
                    //jQuery("#frnd_total").html(obj.frnd_stats.total - obj.frnd_stats.on_zl);
                    jQuery("#user-level-span").removeClass().addClass(capFirst(cls.toLowerCase())+'Belt').html(capFirst(cls.toLowerCase())+' Belt');
                   
    }
    catch(err)
    {
        if(isDevEnvironment === true)
        {
           console.log('showing stats top data',err);
        }
    }
                    
}
});
// Generated by CoffeeScript 1.3.3

define('gamePlayView',[], function() {
  var gameView;
  gameView = (function() {

    function gameView() {
      this.tilesIdxVOs = {};
      this.tileClassOverload = {
        BASE_TILE_CLASS: {
          N: "box-blank box-black",
          Z: "box-blankZoom box-blackZoom"
        },
        OTHER_TURN: {
          N: "box-previousRoundOtherPlayer",
          Z: "box-previousRoundOtherPlayerZoom"
        },
        PRV_CURRPLYR_CORRECT_TILE: {
          N: "box-previousRoundCurrentPlayerCorrect",
          Z: "box-previousRoundCurrentPlayerCorrectZoom"
        },
        PRV_CURRPLYR_INCORRECT_TILE: {
          N: "box-previousRoundCurrentPlayerIncorrect",
          Z: "box-previousRoundCurrentPlayerIncorrectZoom"
        },
        CURRENT_CORRECT_TILE: {
          N: "box-currentRoundCorrect",
          Z: "box-currentRoundCorrectZoom"
        },
        CURRENT_INCORRECT_TILE: {
          N: "box-currentRoundIncorrect",
          Z: "box-currentRoundIncorrectZoom"
        },
        CURR_PLYR_FIG_COMPLETE: {
          N: "box-dizitCompleted",
          Z: "box-dizitCompletedZoom"
        },
        CURR_PLYR_NEWBET: {
          N: "box-newBet",
          Z: "box-newBetZoom"
        },
        JOKER_BET: {
          N: "joker",
          Z: "jokerZoom"
        },
        SUPPER_JOKER_BET: {
          N: "superJoker",
          Z: "superJokerZoom"
        }
      };
    }

    gameView.prototype.getNotPlayedRoundClass = function(el) {
      return el.className = "notPlayedRound";
    };

    gameView.prototype.getDoneRoundClass = function(el) {
      return el.className = "doneRound";
    };

    gameView.prototype.getCurrentRoundClass = function(el) {
      return el.className = "currentRound";
    };

    gameView.prototype.getCurrentFinalRoundClass = function(el) {
      return el.className = "currentFinalRound";
    };

    gameView.prototype.getFinalRoundClass = function(el) {
      return el.className = "finalRound";
    };

    gameView.prototype.getBetsAlreadyPlacedClass = function(el) {
      return el.className = "betsAlreadyPlaced";
    };

    gameView.prototype.getUsedDraggableBetsClass = function(el) {
      return el.className = "usedDraggableBets";
    };

    gameView.prototype.getDraggableBetsClass = function(el) {
      return el.className = "draggableBets";
    };

    gameView.prototype.setBetDonePlayButtonEl = function(el) {
      el.href = "#Already Placed Bets";
      el.className = 'bet_done';
      return this.disablePlayBoutton(el);
    };

    gameView.prototype.setInnerHTML = function(el, val) {
      return el.innerHTML = val;
    };

    gameView.prototype.disablePlayBoutton = function(el) {
      return el.parentNode.setAttribute("class", "bottomHUDbuttons-play-gray");
    };

    gameView.prototype.enablePlayBoutton = function(el) {
      el.href = "#Place Bets";
      el.className = '';
      return el.parentNode.setAttribute("class", "");
    };

    gameView.prototype.getPlayButtonEl = function() {
      return document.getElementById("placeBetOnServer");
    };

    gameView.prototype.getGameRoundulElem = function() {
      return document.getElementById("gameScore-round");
    };

    gameView.prototype.getGameBetPanelEl = function() {
      return document.getElementById("gameBetPanel");
    };

    gameView.prototype.getSpaceClass = function(divAnc) {
      return divAnc.className = "nbrs";
    };

    gameView.prototype.getShowOnMouseOverEl = function() {
      return jQuery("#showOnMouseOver");
    };

    gameView.prototype.addMoveClass = function(el) {
      return el.className += " moving";
    };

    gameView.prototype.addBoxDropHoverClass = function(el) {
      return el.className += " box-drophover";
    };

    gameView.prototype.setGameDisable = function() {
      jQuery(".draggableBets").attr("draggable", "false");
      jQuery(".resignPopup").hide();
      return jQuery("#gameBetPanel").hide();
    };

    gameView.prototype.removeStatusPopup = function() {
      jQuery(".status_show_popup").remove();
      return jQuery(".gdWrapper").remove();
    };

    gameView.prototype.showBetsPanel = function() {
      return jQuery("#gameBetPanel").show();
    };

    gameView.prototype.markMyTurnTiles = function(correctFlag) {
      var tempTileElem, _results;
      _results = [];
      tempTileElem = document.getElementById("boardTile-" + tileId);
      if (correctFlag === 0 || correctFlag === 1) {
        if (correctFlag === 1) {
          tempTileElem.className = tempTileElem.className + " box-MyTurn";
          return _results.push(tempTileElem.innerHTML = "N");
        } else {
          tempTileElem.className = tempTileElem.className + " box-MyWorngTurn";
          return _results.push(tempTileElem.innerHTML = "X");
        }
      } else {
        return _results.push(void 0);
      }
    };

    gameView.prototype.showBetPlacedBy = function(currentFigId, usersObject, playerSeatId) {
      var imgSrc, jTileHoverDiv, jTileHoverDivContent, strOut;
      jTileHoverDiv = this.getShowOnMouseOverEl();
      $(".roundForBidsCount").remove();
      strOut = '';
      imgSrc = "";
      if ((usersObject.PLRS[playerSeatId] != null) && (usersObject.PLRS[playerSeatId].PFB != null)) {
        imgSrc = "https://graph.facebook.com/" + usersObject.PLRS[playerSeatId].PFB + "/picture";
      } else {
        imgSrc = '';
      }
      jTileHoverDivContent = jQuery(jTileHoverDiv.find(".roundForBidsCountUl")[0]);
      if (typeof currentFigId !== "undefined") {
        if (currentFigId.indexOf("_NUMERIC_12") !== -1 || currentFigId.indexOf("_NUMERIC_13") !== -1 || currentFigId.indexOf("_NUMERIC_14") !== -1 || currentFigId.indexOf("_NUMERIC_15") !== -1 || currentFigId.indexOf("_NUMERIC_16") !== -1 || currentFigId.indexOf("_NUMERIC_17") !== -1) {
          strOut += "<li><img src='" + baseUrl + "/images/zalerio_1.2/3.ingame_board/board/player_countindicator_joker.png' alt='Joker' ></li>";
        } else {
          if (currentFigId.indexOf("_NUMERIC_11") !== -1) {
            strOut += "<li><img src='" + baseUrl + "/images/zalerio_1.2/3.ingame_board/board/player_countindicator_Superjoker.png' alt='Supper Joker' ></li>";
          }
        }
      }
      strOut += "<li><img src='" + imgSrc + "' alt='" + usersObject.PLRS[playerSeatId].PFB + "' ></li>";
      jTileHoverDivContent.html(strOut);
      return true;
    };

    gameView.prototype.setCustomDragImage = function(e) {
      var dragIcon;
      dragIcon = document.createElement("img");
      dragIcon.src = baseUrl + "/images/zalerio_1.2/3.ingame_board/stand/stand_tile_pickup.png";
      dragIcon.width = 45;
      return e.dataTransfer.setDragImage(dragIcon, 35, 30);
    };

    gameView.prototype.createliElem = function() {
      return document.createElement("li");
    };

    gameView.prototype.createAHrefElem = function() {
      return document.createElement("a");
    };

    gameView.prototype.setFinalInnerHTML = function(el) {
      return el.innerHTML = "Final";
    };

    gameView.prototype.parseCoordsAsNum = function(coordX, coordY, board_X) {
      return (coordY * board_X) + coordX;
    };

    gameView.prototype.getGameWall = function(board_X, board_Y) {
      var csBlankTileClassName, elBr, gameWallDiv, gameWallTileDiv, i, j, tileIdx;
      gameWallDiv = document.getElementById("gamewall");
      gameWallDiv.setAttribute("dropzone", "move s:text/x-betiddata");
      gameWallDiv.innerHTML = "";
      i = 0;
      while ((0 <= board_Y ? i < board_Y : i > board_Y)) {
        j = 0;
        while ((0 <= board_X ? j < board_X : j > board_X)) {
          csBlankTileClassName = "box-blank box-black";
          gameWallTileDiv = document.createElement("div");
          gameWallTileDiv.className = csBlankTileClassName;
          tileIdx = this.parseCoordsAsNum(j, i, board_X);
          gameWallTileDiv.id = "boardTile-" + tileIdx;
          gameWallTileDiv.setAttribute("tileIdx", tileIdx);
          if (j === (board_X - 1)) {
            gameWallTileDiv.className = csBlankTileClassName + " boardRowLastTile";
          }
          this.tilesIdxVOs[tileIdx] = gameWallTileDiv;
          gameWallDiv.appendChild(gameWallTileDiv);
          if (0 <= board_X) {
            j++;
          } else {
            j--;
          }
        }
        if (0 <= board_Y) {
          i++;
        } else {
          i--;
        }
      }
      elBr = document.createElement("br");
      elBr.setAttribute("clear", "all");
      gameWallDiv.appendChild(elBr);
      return gameWallDiv;
    };

    gameView.prototype.getTilesIdxVOs = function() {
      return this.tilesIdxVOs;
    };

    return gameView;

  })();
  return new gameView;
});

// Generated by CoffeeScript 1.3.3

define('messageListener',["../../helper/confirmBox", "../../helper/utils"], function(confirmBox, utils) {
  window.messageListener = function(event, messageName, broadcastType, fromClientID, roomID, message) {
    var i, newCoordObj, parsedObj, playerBetTiles, playerBetsChangeObj, resignStatus, scoreArray, seatId, seatIdArray, tileId, usersObject, x;
    switch (messageName) {
      case zalerioCMDListners.DECLINE_STATUS:
        if (parseInt(message) === 1) {
          confirmBox(popupMSG.declineInvite());
          return gamePlayView.setGameDisable();
        }
        break;
      case zalerioCMDListners.RIGHT_HUD:
        usersObject = jQuery.parseJSON(message);
        for (i in usersObject) {
          usersObject[i] = jQuery.parseJSON(usersObject[i]);
          usersObject[i].PLRS = jQuery.parseJSON(usersObject[i].PLRS);
          scoreArray = [];
          seatIdArray = [];
          for (seatId in usersObject[i].PLRS) {
            usersObject[i].PLRS[seatId] = jQuery.parseJSON(usersObject[i].PLRS[seatId]);
            scoreArray[seatId] = parseInt(usersObject[i].PLRS[seatId].PSC);
            seatIdArray.push(seatId);
          }
          seatIdArray.sort(function(x, y) {
            return scoreArray[y] - scoreArray[x];
          });
          usersObject[i].PLSC = {};
          for (x in seatIdArray) {
            usersObject[i].PLSC[x] = seatIdArray[x];
          }
        }
        if (zzGlobals.msgVars.RH === 'RIGHT_HUD') {
          zzGlobals.msgVars.RH = usersObject;
        } else {
          $.extend(zzGlobals.msgVars.RH, usersObject);
        }
        utils.log('MT & TT', zzGlobals.msgVars.RH);
        return jDocument.trigger("client:" + zzGlobals.msgCodes.RIGHT_HUD, usersObject);
      case zalerioCMDListners.CLOSE_INVITE:
        if (0 === message) {
          return confirmBox('Sorry!!! Unable to Close Invite, <br /> Plese try again..');
        } else {
          return gamePlayView.removeStatusPopup;
        }
        break;
      case zalerioCMDListners.RESIGN_GAME:
        if (message === 0) {
          confirmBox('Sorry!!! Unable to Resign, \n Plese try again..');
          return gamePlayView.showBetsPanel();
        } else {
          resignStatus = 1;
          return gamePlayView.setGameDisable();
        }
        break;
      case zalerioCMDListners.ORIG_FIGS:
        newCoordObj = jQuery.parseJSON(message);
        utils.log(newCoordObj);
        return parseToGameBoard(zalerioMapType.ORIG_MAP, newCoordObj);
      case zalerioCMDListners.BET_RESPONSE:
        parsedObj = jQuery.parseJSON(message);
        return utils.log("zalerioCMDListners.BET_RESPONSE if failed : ", parsedObj);
      case zalerioCMDListners.BET_CHANGES:
        window.betChangeVOs = {};
        playerBetsChangeObj = jQuery.parseJSON(message);
        utils.log("zalerioCMDListners.BET_CHANGES : ", playerBetsChangeObj);
        window.currentBets = {};
        window.currentBetsIdx = {};
        for (i in playerBetsChangeObj) {
          if (i === "PB") {
            playerBetTiles = jQuery.parseJSON(playerBetsChangeObj[i]);
            for (tileId in playerBetTiles) {
              betChangeVOs[tileId] = playerBetTiles[tileId];
            }
          }
        }
        window.currentRoundBidPlaced = playerBetsChangeObj["BC"];
        return jDocument.trigger(zzEvents.CLIENT_BETS_PLACED, window.currentRoundBidPlaced);
    }
  };
  jDocument.bind(zzEvents.SERVER_MESSAGE, window.messageListener);
  return true;
});

// Generated by CoffeeScript 1.3.3

define('gamePlayController',["../../helper/confirmBox", "../../helper/utils", "../../helper/sound", "./myLevel", "../../config/globals", "gamePlayView", "messageListener"], function(confirmBox, utils, sound, myLevel, globals, gamePlayView, messageListenerObj) {
  var ZalerioGame, bets, boardVo, currentGameUsersData, placeBetsToServer, rematchCall, responseVo, sendOriginalFigsRequest, sendPlaceBetRequest, setPlayersInfo, usersRecordCall;
  bets = {};
  boardVo = {};
  responseVo = {};
  window.currentBets = {};
  window.currentBetsIdx = {};
  ZalerioGame = (function() {
    var betChange, betChangeCode, betsPanelIndexVO, boardVOCodes, boardVOs, board_X, board_Y, coordCodes, currPlayerFigVOs, docElems, drawBetPanel, drawGameBoard, drawResponseTiles, drawRoundsPanel, figureDetailsVO, flag_roundDrawn, flag_zoomTrue, getTileClass, handleDragEnterNew, handleDragStart, handleDragStartWithinBoard, handleDragleave, handleDragoverNew, handleDropNew, initBoard, initRoundBets, internalDNDType, parseCoord, parseRounds, parseToGameBoard, reDrawBetsPanel, refreshGameBoard, refreshRoundsPanel, resetDropZoneOnGameBoard, roundBets, roundVOs, roundVOsIdx, sendPlaceBetToServer, tilesIdxVOs, updateBoardVars, updateFigureDetails, zalerioMapType, _this;
    ZalerioGame = function() {};
    _this = this;
    docElems = {};
    tilesIdxVOs = {};
    betsPanelIndexVO = {};
    window.currentRoundBidPlaced = -1;
    internalDNDType = "text/x-betiddata";
    flag_zoomTrue = false;
    currPlayerFigVOs = {};
    window.playerBetTiles = {};
    boardVOCodes = {
      TILE_COUNT: "BC",
      PLAYER_INFO_OBJ: "PR",
      FIGURE_ID: "CF",
      BET_WINNER: "BW"
    };
    betChangeCode = {
      PLAYER_SEAT_ID: "PS",
      TILE_COUNT: "BC",
      BET_OBJ: "PB",
      ROUND_ID: "PR"
    };
    window.betChangeVOs = {};
    boardVOs = {};
    flag_roundDrawn = false;
    coordCodes = {
      COORD_COUNT: "BC",
      COORD_NUM: "CN",
      COORD_X: "CX",
      COORD_Y: "CY"
    };
    zalerioMapType = {
      ORIG_MAP: {
        code: "OF",
        className: "box-RevealingNumber"
      }
    };
    roundVOsIdx = {};
    board_X = null;
    board_Y = null;
    roundBets = null;
    roundVOs = {};
    figureDetailsVO = {};
    initBoard = function() {
      var boardDimension;
      utils.log("BoardXY : " + zzGlobals.roomVars[zzGlobals.roomCodes.BOARD_XY]);
      boardDimension = zzGlobals.roomVars[zzGlobals.roomCodes.BOARD_XY].split(":");
      board_X = boardDimension[0];
      board_Y = boardDimension[1];
      return drawGameBoard();
    };
    initRoundBets = function() {
      utils.log("Round Bets : " + zzGlobals.roomVars[zzGlobals.roomCodes.ROUND_NOOFBETS]);
      roundBets = zzGlobals.roomVars[zzGlobals.roomCodes.ROUND_NOOFBETS];
      return reDrawBetsPanel();
    };
    parseRounds = function(el, val) {
      var i, obj;
      utils.log("parse Ar data : " + zzGlobals.roomVars[zzGlobals.roomCodes.ROOM_ALLROUNDS]);
      obj = jQuery.parseJSON(val);
      roundVOs = {};
      for (i in obj) {
        roundVOs[i] = jQuery.parseJSON(obj[i]);
      }
      return refreshRoundsPanel();
    };
    refreshRoundsPanel = function() {
      var el, lastEl, lastRoundId, roundEndTimeTTL, roundId;
      drawRoundsPanel();
      lastRoundId = null;
      lastEl = null;
      for (roundId in roundVOs) {
        el = roundVOsIdx[roundId];
        roundEndTimeTTL = parseInt(roundVOs[roundId]["EM"]);
        if (roundEndTimeTTL > 0) {
          gamePlayView.getNotPlayedRoundClass(el);
        } else {
          gamePlayView.getDoneRoundClass(el);
        }
        if (roundId === zzGlobals.roomVars[zzGlobals.roomCodes.CURRENTROUND]) {
          gamePlayView.getCurrentRoundClass(el);
        }
        lastEl = el;
        lastRoundId = roundId;
      }
      if (lastEl && lastRoundId) {
        if (lastRoundId === zzGlobals.roomVars[zzGlobals.roomCodes.CURRENTROUND]) {
          return gamePlayView.getCurrentFinalRoundClass(el);
        } else {
          return gamePlayView.getFinalRoundClass(el);
        }
      }
    };
    drawRoundsPanel = function(elementDiv) {
      var aHrefElem, aHrefElemClone, cnt, gameRoundulElem, liElem, roundId, roundVOsIdxRightHUD;
      if (typeof elementDiv === 'undefined') {
        gameRoundulElem = gamePlayView.getGameRoundulElem();
        roundVOsIdx = {};
      } else {
        gameRoundulElem = elementDiv;
        roundVOsIdxRightHUD = {};
      }
      gameRoundulElem.innerHTML = "";
      cnt = 0;
      aHrefElemClone = null;
      for (roundId in roundVOs) {
        cnt++;
        liElem = gamePlayView.createliElem();
        aHrefElem = gamePlayView.createAHrefElem();
        aHrefElem.href = "#";
        gamePlayView.getNotPlayedRoundClass(aHrefElem);
        gamePlayView.setInnerHTML(aHrefElem, roundVOs[roundId]["RN"]);
        utils.log("roundVo : ", roundId);
        liElem.appendChild(aHrefElem);
        if (typeof elementDiv === 'undefined') {
          roundVOsIdx[roundId] = aHrefElem;
        } else {
          roundVOsIdxRightHUD[cnt] = aHrefElem;
        }
        gameRoundulElem.appendChild(liElem);
        aHrefElemClone = aHrefElem;
      }
      if (cnt > 0) {
        gamePlayView.setFinalInnerHTML(aHrefElemClone);
        return flag_roundDrawn = true;
      }
    };
    reDrawBetsPanel = function() {
      var count, currentBetId, el, flag_alreadyUsed, i, k, playButtonEl, usedBetId, _results;
      try {
        if (tutorial === true) {
          return;
        }
      } catch (_error) {}
      playButtonEl = gamePlayView.getPlayButtonEl();
      if (currentRoundBidPlaced > 0) {
        i = 0;
        while ((0 <= roundBets ? i < roundBets : i > roundBets)) {
          currentBetId = "bet_" + i;
          el = betsPanelIndexVO[currentBetId];
          gamePlayView.getBetsAlreadyPlacedClass(el);
          el.dragBet = 0;
          if (el.draggable != null) {
            el.draggable = false;
          }
          utils.removeEventHandler(el, "dragstart", handleDragStart, false);
          if (0 <= roundBets) {
            i++;
          } else {
            i--;
          }
        }
        gamePlayView.setBetDonePlayButtonEl(playButtonEl);
        return utils.removeEventHandler(playButtonEl, "click", sendPlaceBetRequest, true);
      } else {
        count = 0;
        for (k in window.currentBets) {
          count++;
        }
        if (count < 9) {
          gamePlayView.disablePlayBoutton(playButtonEl);
        } else {
          gamePlayView.enablePlayBoutton(playButtonEl);
        }
        if (!flag_roundBetsDrawn) {
          drawBetPanel();
        }
        _results = [];
        i = 0;
        while ((0 <= roundBets ? i < roundBets : i > roundBets)) {
          currentBetId = "bet_" + i;
          el = betsPanelIndexVO[currentBetId];
          flag_alreadyUsed = false;
          for (k in window.currentBets) {
            if (!__hasProp_.call(window.currentBets, k)) {
              continue;
            }
            usedBetId = window.currentBets[k];
            if (usedBetId === currentBetId) {
              flag_alreadyUsed = true;
              break;
            }
          }
          if (flag_alreadyUsed) {
            gamePlayView.getUsedDraggableBetsClass(el);
            el.dragBet = 0;
            if (el.draggable != null) {
              el.draggable = false;
            }
            utils.removeEventHandler(el, "dragstart", handleDragStart, false);
          } else {
            gamePlayView.getDraggableBetsClass(el);
            el.dragBet = 1;
            if (el.draggable != null) {
              el.draggable = true;
            }
            utils.addEventHandler(el, "dragstart", handleDragStart, false);
          }
          gamePlayView.enablePlayBoutton(playButtonEl);
          _results.push(utils.addEventHandler(playButtonEl, "click", sendPlaceBetToServer, true));
          if (0 <= roundBets) {
            i++;
          } else {
            i--;
          }
        }
        return _results;
      }
    };
    drawBetPanel = function() {
      var betsPanel, currentBetId, divAnc, divNbrPanel, flag_roundBetsDrawn, i, _results;
      betsPanelIndexVO = {};
      betsPanel = gamePlayView.getGameBetPanelEl();
      betsPanel.innerHTML = "";
      _results = [];
      i = 0;
      while ((0 <= roundBets ? i < roundBets : i > roundBets)) {
        currentBetId = "bet_" + i;
        divNbrPanel = gamePlayView.createliElem();
        gamePlayView.getDraggableBetsClass(divNbrPanel);
        divNbrPanel.id = currentBetId;
        if (divNbrPanel.draggable != null) {
          divNbrPanel.draggable = true;
        }
        utils.addEventHandler(divNbrPanel, "dragstart", handleDragStart, false);
        divAnc = gamePlayView.createAHrefElem();
        gamePlayView.getSpaceClass(divAnc);
        divAnc.id = "new-" + i;
        bets[i] = divAnc.id;
        divNbrPanel.appendChild(divAnc);
        betsPanel.appendChild(divNbrPanel);
        betsPanelIndexVO[currentBetId] = divNbrPanel;
        _results.push(flag_roundBetsDrawn = true);
        if (0 <= roundBets) {
          i++;
        } else {
          i--;
        }
      }
      return _results;
    };
    handleDragStart = function(e) {
      utils.log(e.target.id);
      gamePlayView.setCustomDragImage(e);
      e.dataTransfer.setData(internalDNDType, this.id);
      gamePlayView.addMoveClass(e.target);
      utils.log(e.target + " : " + e.target.className);
      return utils.log("drag started!");
    };
    handleDragStartWithinBoard = function(e) {
      var betId;
      betId = this.getAttribute("placedBetId");
      gamePlayView.setCustomDragImage(e);
      e.dataTransfer.setData(internalDNDType, betId);
      gamePlayView.addMoveClass(e.target);
      utils.log(e.target, e.target.className);
      return utils.log("drag started!");
    };
    drawGameBoard = function() {
      var gameWallDiv;
      gameWallDiv = gamePlayView.getGameWall(board_X, board_Y);
      tilesIdxVOs = gamePlayView.getTilesIdxVOs();
      utils.addEventHandler(gameWallDiv, "drop", handleDropNew, false);
      utils.addEventHandler(gameWallDiv, "dragover", handleDragoverNew, false);
      utils.addEventHandler(gameWallDiv, "dragenter", handleDragEnterNew, false);
      return utils.addEventHandler(gameWallDiv, "dragleave", handleDragleave, false);
    };
    getTileClass = function(tileClassOverLoadObj) {
      if (flag_zoomTrue) {
        if (tileClassOverLoadObj) {
          if (tileClassOverLoadObj.N) {
            if (tileClassOverLoadObj.Z) {
              return " " + tileClassOverLoadObj.N + " " + tileClassOverLoadObj.Z;
            } else {
              return " " + tileClassOverLoadObj.N + " ";
            }
          }
        }
      } else {
        if (tileClassOverLoadObj ? tileClassOverLoadObj.N : void 0) {
          return " " + tileClassOverLoadObj.N + " ";
        }
      }
      return " ";
    };
    refreshGameBoard = function() {
      var csBlankTileClassName, currentEl, currentFigId, currentSeatId, currentTileClass, currentTilePriority, currentTileVal, dropEnable, dropEnableVal, flag, lastRound, oldDraggableState, playerSeatId, playersObjs, tileIdx;
      csBlankTileClassName = getTileClass(gamePlayView.tileClassOverload.BASE_TILE_CLASS);
      currentTileClass = "";
      currentTileVal = "";
      currentEl = null;
      currentSeatId = zzGlobals.clientVars[zzGlobals.clientCodes.USER_SEAT_ID];
      currentTilePriority = 0;
      for (tileIdx in tilesIdxVOs) {
        flag = false;
        if (!__hasProp_.call(tilesIdxVOs, tileIdx)) {
          continue;
        }
        currentEl = tilesIdxVOs[tileIdx];
        currentTilePriority = 0;
        currentTileClass = csBlankTileClassName;
        dropEnable = true;
        currentEl.draggable = false;
        currentEl.dragBet = 0;
        currentTileVal = "";
        oldDraggableState = currentEl.draggable;
        if (boardVOs[tileIdx] != null) {
          if (boardVOs[tileIdx][boardVOCodes.FIGURE_ID]) {
            currentFigId = boardVOs[tileIdx][boardVOCodes.FIGURE_ID];
            if (currentFigId.indexOf("_NUMERIC_12") !== -1 || currentFigId.indexOf("_NUMERIC_13") !== -1 || currentFigId.indexOf("_NUMERIC_14") !== -1 || currentFigId.indexOf("_NUMERIC_15") !== -1 || currentFigId.indexOf("_NUMERIC_16") !== -1 || currentFigId.indexOf("_NUMERIC_17") !== -1) {
              dropEnable = false;
              currentTileClass = csBlankTileClassName + getTileClass(gamePlayView.tileClassOverload.JOKER_BET);
              currentTileVal = "";
            } else if (currentFigId.indexOf("_NUMERIC_11") !== -1) {
              dropEnable = false;
              currentTileClass = csBlankTileClassName + getTileClass(gamePlayView.tileClassOverload.SUPPER_JOKER_BET);
              currentTileVal = "";
            }
          }
          if (!boardVOs[tileIdx][boardVOCodes.FIGURE_ID]) {
            currentTileClass = csBlankTileClassName + getTileClass(gamePlayView.tileClassOverload.OTHER_TURN);
            currentTileVal = "";
          }
          playersObjs = boardVOs[tileIdx][boardVOCodes.PLAYER_INFO_OBJ];
          for (playerSeatId in playersObjs) {
            if (playerSeatId === currentSeatId) {
              dropEnable = false;
              currentFigId = boardVOs[tileIdx][boardVOCodes.FIGURE_ID];
              if (currentFigId) {
                currentTileClass = csBlankTileClassName + getTileClass(gamePlayView.tileClassOverload.PRV_CURRPLYR_CORRECT_TILE);
                utils.log("figureDetailsVO", currentFigId);
                if (currPlayerFigVOs[currentFigId] === figureDetailsVO[currentFigId]) {
                  currentTilePriority = 10;
                  currentTileClass = csBlankTileClassName + getTileClass(gamePlayView.tileClassOverload.CURR_PLYR_FIG_COMPLETE);
                  if (currentFigId.indexOf("_NUMERIC_12") !== -1 || currentFigId.indexOf("_NUMERIC_13") !== -1 || currentFigId.indexOf("_NUMERIC_14") !== -1 || currentFigId.indexOf("_NUMERIC_15") !== -1 || currentFigId.indexOf("_NUMERIC_16") !== -1 || currentFigId.indexOf("_NUMERIC_17") !== -1) {
                    currentTileClass = csBlankTileClassName + getTileClass(gamePlayView.tileClassOverload.JOKER_BET);
                    flag = true;
                  } else if (currentFigId.indexOf("_NUMERIC_11") !== -1) {
                    currentTileClass = csBlankTileClassName + getTileClass(gamePlayView.tileClassOverload.SUPPER_JOKER_BET);
                    flag = true;
                  }
                }
                if (flag) {
                  currentTileVal = "";
                } else {
                  currentTileVal = boardVOs[tileIdx][boardVOCodes.TILE_COUNT];
                }
              } else {
                currentTileClass = csBlankTileClassName + getTileClass(gamePlayView.tileClassOverload.PRV_CURRPLYR_INCORRECT_TILE);
                currentTileVal = " ";
              }
              break;
            }
          }
        }
        lastRound = false;
        if (zzGlobals.roomVars.FR === "1") {
          lastRound = true;
        }
        if (!lastRound) {
          if ((window.currentBets[tileIdx] != null) && window.currentBets[tileIdx] !== null) {
            dropEnable = false;
            currentEl.draggable = true;
            currentEl.dragBet = 1;
            currentEl.setAttribute("placedBetId", window.currentBets[tileIdx]);
            currentTileClass = csBlankTileClassName + getTileClass(gamePlayView.tileClassOverload.CURR_PLYR_NEWBET);
            utils.addEventHandler(currentEl, "dragstart", handleDragStartWithinBoard, false);
            currentTileVal = "";
          }
          if (currentTilePriority < 10 && (betChangeVOs[tileIdx] != null)) {
            if (parseInt(betChangeVOs[tileIdx]) === 1) {
              currentTileClass = csBlankTileClassName + getTileClass(gamePlayView.tileClassOverload.CURR_PLYR_NEWBET);
              currentTileVal = "";
            } else {
              currentTileClass = csBlankTileClassName + getTileClass(gamePlayView.tileClassOverload.CURR_PLYR_NEWBET);
              currentTileVal = "";
            }
          }
        }
        if ((parseInt(tileIdx) % board_X) === 0) {
          currentTileClass += " boardRowLastTile ";
        }
        dropEnableVal = null;
        if (currentEl.id === "boardTile-35" && isDevEnvironment) {
          utils.log("[dropEnable:", dropEnable, ",currentEl:", currentEl.getAttribute("droppable"));
        }
        switch (currentEl.getAttribute("droppable")) {
          case "-1":
            if (dropEnable === true) {
              dropEnableVal = "1";
            }
            break;
          case "0":
            if (dropEnable === true) {
              dropEnableVal = "1";
            }
            break;
          case "1":
            if (dropEnable === false) {
              dropEnableVal = "0";
            }
            break;
          case "2":
            if (dropEnable === false) {
              dropEnableVal = "0";
            }
        }
        if (currentEl.getAttribute("droppable") == null) {
          currentEl.setAttribute("droppable", "1");
        }
        if (dropEnableVal !== null) {
          currentEl.setAttribute("droppable", dropEnableVal);
        }
        currentEl.className = currentTileClass;
        currentEl.innerHTML = currentTileVal;
      }
      return resetDropZoneOnGameBoard();
    };
    resetDropZoneOnGameBoard = function() {
      var currentEl, tileIdx, _results;
      _results = [];
      for (tileIdx in tilesIdxVOs) {
        if (!__hasProp_.call(tilesIdxVOs, tileIdx)) {
          continue;
        }
        currentEl = tilesIdxVOs[tileIdx];
        switch (currentEl.getAttribute("droppable")) {
          case "1":
            _results.push(currentEl.setAttribute("droppable", "2"));
            break;
          case "0":
            _results.push(currentEl.setAttribute("droppable", "-1"));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };
    handleDragoverNew = function(e) {
      if (e.preventDefault) {
        e.preventDefault();
      }
      return false;
    };
    handleDragEnterNew = function(e) {
      var betId;
      if (e.dataTransfer != null) {
        betId = e.dataTransfer.getData(internalDNDType);
        if (betId != null) {
          if ((e.target != null) && (e.target.getAttribute != null) && e.target.getAttribute("droppable") === "2") {
            gamePlayView.addBoxDropHoverClass(e.target);
            return true;
          }
        }
      }
      return false;
    };
    handleDropNew = function(e) {
      var betId, betTileIdx, betd;
      sound.playTitleDropSound();
      if (e.target != null) {
        utils.removeClassName(e.target, "box-drophover");
      }
      if (e.preventDefault) {
        e.preventDefault();
      }
      if (e.stopPropagation) {
        e.stopPropagation();
      }
      betId = e.dataTransfer.getData(internalDNDType);
      if ((betId != null) && betId !== "") {
        if (e.target.getAttribute("droppable") === "2") {
          if (!window.currentBets[e.target.getAttribute("tileidx")]) {
            window.currentBetsIdx[betId] = e.target.getAttribute("tileidx");
            window.currentBets = {};
            for (betd in window.currentBetsIdx) {
              if (!__hasProp_.call(window.currentBetsIdx, betd)) {
                continue;
              }
              betTileIdx = window.currentBetsIdx[betd];
              window.currentBets[betTileIdx] = betd;
            }
            refreshGameBoard();
            reDrawBetsPanel();
            return true;
          }
        }
      }
      return false;
    };
    handleDragleave = function(e) {
      if (e.target != null) {
        return utils.removeClassName(e.target, "box-drophover");
      }
    };
    sendPlaceBetToServer = function() {
      var betCtr, betId, betPanelId, betStr, betTileId, playButtonEl;
      utils.log("bet Validation before sen  ding the request t  o server");
      if (tutorial === true) {
        return;
      }
      playButtonEl = gamePlayView.getPlayButtonEl();
      if (playButtonEl.className === "bet_done") {
        confirmBox("Not so fast.... lets wait for your friends to play their turn");
        return;
      }
      betStr = "";
      betCtr = 0;
      sound.playPlayButtonSound();
      for (betPanelId in window.currentBetsIdx) {
        if (!__hasProp_.call(window.currentBetsIdx, betPanelId)) {
          continue;
        }
        betTileId = window.currentBetsIdx[betPanelId];
        betId = betTileId.replace(/\bboardTile-\b/, "");
        betStr += (betStr === "" ? betId : ":" + betId);
        ++betCtr;
        utils.log("bets[" + betCtr + "] : " + betId);
      }
      if (betStr === "") {
        utils.log("No bets placed!");
        confirmBox("No bets placed!");
        return false;
      } else if (betCtr !== 9) {
        utils.log("Bets count is less then 9!");
        confirmBox("Not so fast... please place all of your 9 tiles!");
        return false;
      } else {
        utils.log("every thing is fine's end the bets to the server");
        placeBetsToServer(betStr);
      }
      return false;
    };
    parseCoord = function(coordNum, boardX, boardY) {
      var coordX, coordY;
      boardX = boardX || board_X;
      boardY = boardY || board_Y;
      coordX = coordNum % board_X;
      coordY = coordNum / board_X;
      return {
        x: coordX,
        y: coordY
      };
    };
    parseToGameBoard = function(mapType, mapData) {
      var ctr, curCoordId, curCoordObj;
      if ((mapType != null) && (mapType.code != null) && (mapType.className != null)) {
        ctr = 0;
        for (curCoordId in mapData) {
          curCoordObj = mapData[curCoordId];
          jQuery("#boardTile-" + (parseInt(curCoordId))).addClass(mapType.className);
        }
      }
      return true;
    };
    betChange = function() {
      reDrawBetsPanel();
      return refreshGameBoard();
    };
    jDocument.bind(zzEvents.CLIENT_BETS_PLACED, betChange);
    drawResponseTiles = function(responseObj) {
      var correctFlag, tileId, _results;
      utils.log("responseObj in drawResponseTiles(): " + responseObj);
      _results = [];
      for (tileId in responseObj) {
        correctFlag = responseObj[tileId];
        _results.push(gamePlayView.markMyTurnTiles(correctFlag));
      }
      return _results;
    };
    updateBoardVars = function(evt, val) {
      var boardObj, boardObjs, boardStr, i, noOfTiles, playerBetTiles, playerTiles, seatId;
      currPlayerFigVOs = {};
      playerBetTiles = {};
      boardVOs = {};
      boardObjs = jQuery.parseJSON(val);
      for (i in boardObjs) {
        boardStr = boardObjs[i];
        boardObj = jQuery.parseJSON(boardStr);
        if (boardObj["PR"] != null) {
          boardObj["PR"] = jQuery.parseJSON(boardObj["PR"]);
          for (seatId in boardObj["PR"]) {
            if (boardObj["CF"] != null) {
              playerTiles = {};
              if (playerBetTiles[seatId]) {
                playerTiles = playerBetTiles[seatId];
              }
              playerTiles[i] = 1;
              playerBetTiles[seatId] = playerTiles;
              if (zzGlobals.clientVars[zzGlobals.clientCodes.USER_SEAT_ID] === seatId) {
                noOfTiles = 0;
                if (currPlayerFigVOs[boardObj["CF"]] != null) {
                  noOfTiles = currPlayerFigVOs[boardObj["CF"]];
                }
                currPlayerFigVOs[boardObj["CF"]] = ++noOfTiles;
              }
            }
          }
        }
        boardVOs[i] = boardObj;
      }
      return refreshGameBoard();
    };
    updateFigureDetails = function(evt, val) {
      figureDetailsVO = {};
      if (val != null) {
        return figureDetailsVO = jQuery.parseJSON(val);
      }
    };
    jQuery(function() {
      var isMousingOver, jTileHoverDiv;
      jTileHoverDiv = gamePlayView.getShowOnMouseOverEl();
      utils.log("jTileHoverDiv : " + jTileHoverDiv);
      isMousingOver = false;
      jQuery("#gamewall").delegate(".box-previousRoundOtherPlayer,.box-previousRoundCurrentPlayerIncorrect,.box-previousRoundCurrentPlayerCorrect,.box-dizitCompleted,.joker,.superJoker", "mouseover mouseout", function(e) {
        var currentFigId, elLeft, elTop, leftMajor, noOfCols, noOfRows, playerSeatId, playersObjs, tileIdx, tileNo, topMajor, usersObject;
        usersObject = zzGlobals.dataObjVars.AP;
        if (e.type === "mouseover" && !isMousingOver) {
          tileIdx = this.getAttribute("tileIdx");
          utils.log("offset :" + this.offsetLeft + " : " + this.offsetTop);
          if (boardVOs[tileIdx] != null) {
            playersObjs = boardVOs[tileIdx][boardVOCodes.PLAYER_INFO_OBJ];
            for (playerSeatId in playersObjs) {
              if (usersObject.PLRS[playerSeatId] != null) {
                currentFigId = boardVOs[tileIdx][boardVOCodes.FIGURE_ID];
                gamePlayView.showBetPlacedBy(currentFigId, usersObject, playerSeatId);
              }
            }
            tileNo = parseInt(tileIdx);
            noOfRows = tileNo / board_X;
            noOfCols = tileNo % board_Y;
            leftMajor = (noOfRows > board_Y / 2 ? false : true);
            topMajor = (noOfCols > board_X / 2 ? false : true);
            elLeft = e.pageX + 10;
            elTop = e.pageY;
            if (this.offsetLeft > 300) {
              elLeft = elLeft - jTileHoverDiv.width() - 10;
            }
            if (this.offsetTop > 400) {
              elTop = elTop - jTileHoverDiv.height();
            }
            jTileHoverDiv.show().offset({
              top: elTop,
              left: elLeft
            });
          }
          isMousingOver = true;
          return utils.log("enlarged");
        } else if (e.type === "mouseout") {
          jTileHoverDiv.hide();
          isMousingOver = false;
          return utils.log("resetting");
        }
      });
      jDocument.bind("client:" + zzGlobals.clientCodes.UINFO, usersRecordCall);
      jDocument.bind("client:" + zzGlobals.clientCodes.ALL_PAST_GAME, usersRecordCall);
      jDocument.bind("client:" + zzGlobals.msgCodes.RIGHT_HUD, usersRecordCall);
      jDocument.bind("room:" + zzGlobals.roomCodes.FIGURE_DETAILS, updateFigureDetails);
      jDocument.bind("room:" + zzGlobals.roomCodes.BOARD_XY, initBoard);
      jDocument.bind("room:" + zzGlobals.roomCodes.ROUND_NOOFBETS, initRoundBets);
      jDocument.bind("room:" + zzGlobals.roomCodes.ROOM_ALLROUNDS, parseRounds);
      jDocument.bind("room:" + zzGlobals.roomCodes.BOARDVARS, updateBoardVars);
      jDocument.bind("room:" + zzGlobals.roomCodes.CURRENTROUND, refreshRoundsPanel);
      return jDocument.bind("room:" + zzGlobals.roomCodes.ALL_PLAYER_INFO, setPlayersInfo);
    });
    return ZalerioGame;
  }).call(this);
  usersRecordCall = function() {
    var gameIdArray, i, scoreArray, seatId, usersInfo, usersObjectAPG, usersObjectUINFO;
    if (typeof zzGlobals.clientVars.UINFO !== 'undefined' && zzGlobals.clientVars.UINFO !== 'USERINFO') {
      usersObjectUINFO = jQuery.parseJSON(zzGlobals.clientVars.UINFO);
    }
    if (typeof zzGlobals.clientVars.APG !== 'undefined' && zzGlobals.clientVars.APG !== 'ALL_PAST_GAME') {
      usersObjectAPG = jQuery.parseJSON(zzGlobals.clientVars.APG);
      scoreArray = [];
      gameIdArray = [];
      for (i in usersObjectAPG) {
        usersObjectAPG[i] = jQuery.parseJSON(usersObjectAPG[i]);
        usersObjectAPG[i].PLRS = jQuery.parseJSON(usersObjectAPG[i].PLRS);
        scoreArray[i] = parseInt(usersObjectAPG[i].EDL);
        gameIdArray.push(i);
        for (seatId in usersObjectAPG[i].PLRS) {
          usersObjectAPG[i].PLRS[seatId] = jQuery.parseJSON(usersObjectAPG[i].PLRS[seatId]);
        }
      }
      gameIdArray.sort(function(x, y) {
        return scoreArray[y] - scoreArray[x];
      });
    }
    usersInfo = {
      RH: zzGlobals.msgVars.RH,
      APG: usersObjectAPG,
      APG_SORT: gameIdArray,
      UINFO: usersObjectUINFO
    };
    return myLevel(usersInfo);
  };
  currentGameUsersData = {};
  setPlayersInfo = function() {
    var i, scoreArray, seatId, seatIdArray, usersObject, x;
    usersObject = jQuery.parseJSON(zzGlobals.roomVars.AP);
    for (i in usersObject) {
      usersObject[i] = jQuery.parseJSON(usersObject[i]);
      usersObject[i].PLRS = jQuery.parseJSON(usersObject[i].PLRS);
      scoreArray = [];
      seatIdArray = [];
      for (seatId in usersObject[i].PLRS) {
        usersObject[i].PLRS[seatId] = jQuery.parseJSON(usersObject[i].PLRS[seatId]);
        scoreArray[seatId] = parseInt(usersObject[i].PLRS[seatId].PSC);
        seatIdArray.push(seatId);
      }
      seatIdArray.sort(function(x, y) {
        return scoreArray[y] - scoreArray[x];
      });
      usersObject[i].PLSC = {};
      for (x in seatIdArray) {
        usersObject[i].PLSC[x] = seatIdArray[x];
      }
    }
    zzGlobals.dataObjVars.AP = usersObject[i];
    return jDocument.trigger("dataObj:" + zzGlobals.dataObjCodes.ALL_PLAYER_INFO, zzGlobals.dataObjVars.AP);
  };
  if (document.domain === "localhost" || document.domain === "zl.mobicules.com") {
    utils.addEventHandler(document.getElementById("bottomHUDbuttons-more"), "click", sendOriginalFigsRequest, false);
    window.sendOriginalFigsRequest = sendOriginalFigsRequest;
  }
  sendOriginalFigsRequest = function() {
    return jDocument.trigger(zzEvents.SEND_UPC_MESSAGE, [UPC.SEND_ROOMMODULE_MESSAGE, zzGlobals.roomVars[zzGlobals.roomCodes.ROOM_ID], "RQ", "C|OF"]);
  };
  rematchCall = function(e, rematchPlayerFBID) {
    var plrs, seatID, _results;
    if (e.preventDefault) {
      e.preventDefault();
    }
    sound.playOtherbuttonSound();
    if (typeof rematchPlayerFBID === "undefined") {
      plrs = zzGlobals.dataObjVars.AP.PLRS;
      _results = [];
      for (seatID in plrs) {
        _results.push(plrs[seatID].PFB);
      }
    } else {
      _results = [];
      _results.push(rematchPlayerFBID);
    }
    InviteFriends(_results, 'Rematch', gameId);
    jQuery('.zalerio_popup').css('display', 'none');
  };
  utils.addEventHandler(document.getElementById('rematch'), 'click', rematchCall, false);
  placeBetsToServer = function(betStr) {
    return jDocument.trigger(zzEvents.SEND_UPC_MESSAGE, [UPC.SEND_ROOMMODULE_MESSAGE, zzGlobals.roomVars[zzGlobals.roomCodes.ROOM_ID], "RQ", "C|PB", "BI|" + betStr]);
  };
  return sendPlaceBetRequest = function() {
    var bet, betStr;
    utils.log("bet Validation before sending the request t  o server");
    betStr = "";
    for (bet in bets) {
      betStr += (betStr === "" ? bets[bet] : ":" + bets[bet]);
      utils.log("bets[" + bet + "] : " + bets[bet]);
    }
    utils.log("[betStr: " + betStr + "]");
    if (betStr === "") {
      utils.log("No bets placed!");
      messagePopup("No bets placed!");
      return false;
    } else {
      utils.log("every thing is fine end the bets to the server");
      placeBetsToServer(betStr);
    }
    return false;
  };
});

// Generated by CoffeeScript 1.3.3

define('../../popup/../helper/utils',[], function() {
  return {
    addEventHandler: function(node, evtType, func, isCapture) {
      if (window && window.addEventListener) {
        return node.addEventListener(evtType, func, isCapture);
      } else {
        return node.attachEvent("on" + evtType, func);
      }
    },
    removeEventHandler: function(node, evtType, func, isCapture) {
      if (window && window.removeEventListener) {
        return node.removeEventListener(evtType, func, isCapture);
      } else {
        return node.detachEvent("on" + evtType, func);
      }
    },
    removeClassName: function(node, cls) {
      var reg;
      reg = void 0;
      if ((node != null) && node.className) {
        reg = new RegExp("(\\s|^)" + cls + "(\\s|$)");
        return node.className = node.className.replace(reg, " ");
      }
    },
    log: function(message) {},
    getMiniLoaderHTML: function() {
      return "<div id=\"floatingBarsGs\">\n<div class=\"blockG\" id=\"rotateG_01\">\n</div>\n<div class=\"blockG\" id=\"rotateG_02\">\n</div>\n<div class=\"blockG\" id=\"rotateG_03\">\n</div>\n<div class=\"blockG\" id=\"rotateG_04\">\n</div>\n<div class=\"blockG\" id=\"rotateG_05\">\n</div>\n<div class=\"blockG\" id=\"rotateG_06\">\n</div>\n<div class=\"blockG\" id=\"rotateG_07\">\n</div>\n<div class=\"blockG\" id=\"rotateG_08\">\n</div>\n</div>";
    }
  };
});

// Generated by CoffeeScript 1.3.3

define('../../popup/resignPopup',["../helper/utils"], function(utils) {
  var resignPopUP, resignme, sendResignToServer;
  resignPopUP = function() {
    return jQuery("#bottomHUDbuttons-more").click(function() {
      var currentUserObj, plrs, seatId, totalPlayer;
      totalPlayer = 0;
      plrs = zzGlobals.dataObjVars.AP.PLRS;
      for (seatId in plrs) {
        if (plrs[seatId].PRE === 0 ? plrs[seatId].GSS === 2 || plrs[seatId].GSS === 1 : void 0) {
          ++totalPlayer;
        }
      }
      currentUserObj = jQuery.parseJSON(zzGlobals.clientVars.UINFO);
      if (totalPlayer > 1 && parseInt(zzGlobals.roomVars.FR) !== 1 && parseInt(currentUserObj.PRE) !== 1) {
        jQuery(".resignPopup").show();
        return jQuery(".resignPopup").before("<div class=\"overlay\"></div>");
      }
    });
  };
  resignPopUP();
  sendResignToServer = function() {
    jQuery(".draggableBets").attr("draggable", "false");
    jQuery(".resignPopup").hide();
    jQuery(".overlay").remove();
    jQuery("#gameBetPanel").hide();
    return jDocument.trigger(zzEvents.SEND_UPC_MESSAGE, [UPC.SEND_ROOMMODULE_MESSAGE, zzGlobals.roomVars[zzGlobals.roomCodes.ROOM_ID], "RQ", "C|RG"]);
  };
  resignme = document.getElementById("resignme");
  return utils.addEventHandler(resignme, "click", sendResignToServer, false);
});

// Generated by CoffeeScript 1.3.3

define('../../popup/showInviteStatus',[], function() {
  var closeInvits, showInviteStatus;
  closeInvits = function() {
    return jDocument.trigger(zzEvents.SEND_UPC_MESSAGE, [UPC.SEND_ROOMMODULE_MESSAGE, zzGlobals.roomVars[zzGlobals.roomCodes.ROOM_ID], "RQ", "C|CI"]);
  };
  showInviteStatus = function() {
    var gameObjPLRS, invitedImgs, popupDivBase, seatid, totalResponse, usersInfoObject;
    if (parseInt(zzGlobals.dataObjVars.AP.GCB) !== parseInt(zzGlobals.currentUserDBId)) {
      return;
    }
    usersInfoObject = zzGlobals.dataObjVars.AP;
    gameObjPLRS = usersInfoObject.PLRS;
    totalResponse = 0;
    invitedImgs = 0;
    popupDivBase = $("<div class=\"status_show_popup zalerio_popup\" id=\"invitestatus\" style=\"display:block\" >\n	<div id=\"score_friendpopup\" class=\"outer_base\">\n		<a class=\"positionAbsolute\" id=\"close\"></a>\n		<div class=\"invite_status_base\" style=\"padding-top:32px\">\n			<div class=\"topUserInfo\"></div>\n			<div class=\"statusWrapper\">\n				<div class=\"acceptBlock\"><span>Accepted</span><div class=\"imgWrapper\"></div></div>\n				<div class=\"declineBlock\"><span>Declined</span><div class=\"imgWrapper\"></div></div>\n				<div class=\"inviteBlock\"><span>Not responded yet ...</span><div class=\"imgWrapper\"></div></div>\n			</div>\n			<div class=\"buttonWrapper\">\n				<div class=\"leftButtonWrapper\">\n					<div class=\"leftButton\">Close Invitations</div>\n					<div class=\"textLeftButton\">Game will kick-off with all friends that have accepted your game invitation so far</div>\n				</div>\n				<div class=\"rightButtonWrapper\">\n					<div class=\"rightButton\">Send Reminder</div>\n					<div class=\"textRightButton\">Friends who did not respond yet will get a gentle reminder to join your game...</div>\n				</div>\n			</div>\n		</div>\n	</div>\n</div>");
    $('.positionAbsolute', popupDivBase).click(function() {
      jQuery('.status_show_popup').remove();
      return false;
    });
    $('.leftButton', popupDivBase).click(function() {
      return closeInvits();
    });
    for (seatid in gameObjPLRS) {
      totalResponse++;
      if (parseInt(gameObjPLRS[seatid].GSS) === 1) {
        $('.acceptBlock .imgWrapper', popupDivBase).append("<img src=\"https://graph.facebook.com/" + gameObjPLRS[seatid].PFB + "/picture\" />");
      } else if (parseInt(gameObjPLRS[seatid].GSS) === 2) {
        $('.declineBlock .imgWrapper', popupDivBase).append("<img src=\"https://graph.facebook.com/" + gameObjPLRS[seatid].PFB + "/picture\" />");
      } else if (parseInt(gameObjPLRS[seatid].GSS) === 3) {
        totalResponse--;
        invitedImgs++;
        $('.inviteBlock .imgWrapper', popupDivBase).append("<img src=\"https://graph.facebook.com/" + gameObjPLRS[seatid].PFB + "/picture\" />");
      }
    }
    $('.imgWrapper:not(:has(img))', popupDivBase).parent().remove();
    if (!(totalResponse > usersInfoObject.TP / 2 && invitedImgs !== 0)) {
      return;
    }
    if (zzGlobals.inviteStatus !== null && typeof zzGlobals.inviteStatus !== "undefined") {
      if (!(rejected.length + invitedImgs + totalResponse > zzGlobals.inviteStatus)) {
        return;
      }
    }
    zzGlobals.inviteStatus = rejected.length + acceptedImgs.length + declinedImgs.length;
    jQuery('.status_show_popup').remove();
    return jQuery("body").append(popupDivBase);
  };
  jDocument.bind("dataObj:" + zzGlobals.dataObjCodes.ALL_PLAYER_INFO, showInviteStatus);
  return true;
});

// Generated by CoffeeScript 1.3.3

define('../../popup/showFinalScore',[], function() {
  var showFinalScore;
  showFinalScore = function() {
    var disableRematch, ii, index, rankHtml, rankHtmlArray, seatId, usersObject;
    try {
      if (zzGlobals.roomVars.FR === "1") {
        jQuery("#gameBetPanel").hide();
        jQuery(".resignPopup").hide();
        ii = 0;
        rankHtmlArray = [];
        rankHtml = "";
        disableRematch = false;
        usersObject = zzGlobals.dataObjVars.AP;
        for (index in usersObject.PLSC) {
          seatId = usersObject.PLSC[index];
          if (parseInt(usersObject.PLRS[seatId].PRE) === 1 || parseInt(usersObject.PLRS[seatId].GSS) !== 2) {
            if (parseInt(zzGlobals.currentUserDBId) === parseInt(usersObject.PLRS[seatId].UI)) {
              disableRematch = true;
            }
            continue;
          }
          if (ii === 0) {
            rankHtmlArray.push("<div  id='score" + ++ii + "'><img src='https://graph.facebook.com/" + usersObject.PLRS[seatId].PFB + "/picture' /><div class='name'>" + usersObject.PLRS[seatId].PDN + "</div><div class='score'>" + usersObject.PLRS[seatId].PSC + "</div></div>");
          } else {
            rankHtml += "<div class='score_rep' id='score" + ++ii + "'><div class='rank'>" + ii + "nd</div><img src='https://graph.facebook.com/" + usersObject.PLRS[seatId].PFB + "/picture' /><div class='name'>" + usersObject.PLRS[seatId].PDN + "</div><div class='score'>" + usersObject.PLRS[seatId].PSC + "</div></div>";
          }
        }
        if (ii === 0) {
          return;
        }
        if (ii < 2 || disableRematch || resignStatus === 1) {
          jQuery("#rematch").hide();
          jQuery(".dismiss").css({
            marginTop: '1px',
            marginLeft: '50px'
          });
        } else {
          jQuery("#rematch").show();
          jQuery(".dismiss").css({
            marginTop: '',
            marginLeft: ''
          });
        }
        jQuery("#topScore_div").html(rankHtmlArray[0]);
        jQuery("#bottomScore_div").html(rankHtml);
        return jQuery(".score_show_popup").css("display", "block");
      }
    } catch (_error) {}
  };
  return jDocument.bind("dataObj:" + zzGlobals.dataObjCodes.ALL_PLAYER_INFO, showFinalScore);
});

// Generated by CoffeeScript 1.3.3

define('../../popup/showFrndSelector',[], function() {
  var showFrndSelector;
  return showFrndSelector = function() {
    var boxBlank, fbUserData, tutorial;
    if (typeof tutorial !== 'undefined') {
      if (tutorial === true) {
        boxBlank = jQuery('.box-blank');
        boxBlank.text('');
        boxBlank.removeClass();
        boxBlank.addClass('box-blank box-black');
      }
    }
    tutorial = false;
    fbUserData = {};
    return FB.api({
      method: 'fql.query',
      query: "SELECT uid, name, pic_square, online_presence, username FROM user WHERE uid IN (SELECT uid2 FROM friend WHERE uid1 = me()) order by name"
    }, function(response) {
      var html, i, j, _i, _j, _len, _len1, _ref;
      for (_i = 0, _len = response.length; _i < _len; _i++) {
        i = response[_i];
        fbUserData((_ref = response([i]), i = _ref[0], _ref));
        html = '';
        for (_j = 0, _len1 = fbUserData.length; _j < _len1; _j++) {
          j = fbUserData[_j];
          html += '<div class="rep"><img src="' + fbUserData[j].pic_square + '" /><div>' + fbUserData[j].name + '<br/></div>';
          html += '<input type="button" style="display:none" value="' + fbUserData[j].uid + '" class="status" />';
          html += '<span class="' + fbUserData[j].online_presence + '">' + fbUserData[j].online_presence + '</span>';
          html += '<a class="select_button right">Select</a></div><div class="line"></div>';
        }
      }
      return $.ajax({
        type: 'POST',
        url: siteUrl + "/user/getFriend"
      }).done(function(data) {
        $('body').append(data);
        $("#floatingBarsG").css('display', 'none');
        $('.friendlist').html(html);
        if (playSound) {
          return popupapperence.play();
        }
      });
    });
  };
});

// Generated by CoffeeScript 1.3.3

define('../../popup/roundScorePopup',[], function() {
  var showRoundScorePopup;
  window._currentRoundStatus = -1;
  showRoundScorePopup = function() {
    var index, rankHtml, roundNo, scorePopup, scorePopuptopthree, seatId, selfHtml, userCount, usersObject;
    roundNo = parseInt(zzGlobals.roomVars.CR.split("_")[1], 10);
    if (roundNo === 0 || zzGlobals.roomVars.FR === "1" || roundNo === window._currentRoundStatus) {
      return;
    }
    window._currentRoundStatus = roundNo;
    usersObject = zzGlobals.dataObjVars.AP;
    scorePopup = $(" <div class=\"roundresult\"><div class=\"content_r bounceIn animated\"><h2 class=\"round_no_r\">Round " + (zzGlobals.roomVars.CR.split("_")[1]) + "</h2></div></div> ");
    scorePopuptopthree = $("<div class=\"top_three_r\"> </div>");
    rankHtml = "";
    selfHtml = "";
    userCount = 0;
    for (index in usersObject.PLSC) {
      seatId = usersObject.PLSC[index];
      if (parseInt(usersObject.PLRS[seatId].GSS) !== 2 || usersObject.PLRS[seatId].PRE === 1) {
        continue;
      }
      userCount++;
      if (userCount <= 3) {
        rankHtml += "<div class='score'><img src='https://graph.facebook.com/" + usersObject.PLRS[seatId].PFB + ("/picture' /><div class='points " + (usersObject.PLRS[seatId].PSC < 0 ? "minus" : "plus") + "'>") + usersObject.PLRS[seatId].PSC + "</div></div>";
      }
      if (zzGlobals.currentUserDBId === usersObject.PLRS[seatId].UI) {
        selfHtml = $(" <div class=\"score self\"><img src=\"https://graph.facebook.com/" + usersObject.PLRS[seatId].PFB + "/picture\" /><div class=\"points " + (usersObject.PLRS[seatId].PSC < 0 ? "minus" : "plus") + "\">" + usersObject.PLRS[seatId].PSC + "</div></div> ");
      }
    }
    $(".roundresult").remove();
    scorePopuptopthree.append(rankHtml);
    if (selfHtml !== "") {
      $(".content_r", scorePopup).append(selfHtml);
      $(".content_r", scorePopup).append(scorePopuptopthree);
      $("#active-screen").append(scorePopup);
      setTimeout((function() {
        return $(".roundresult").remove();
      }), 5000);
      return $(".roundresult").click(function() {
        return $(this).remove();
      });
    }
  };
  jDocument.bind("dataObj:" + zzGlobals.dataObjCodes.ALL_PLAYER_INFO, showRoundScorePopup);
  return true;
});

// Generated by CoffeeScript 1.3.3

define('gameEventManager',["../../config/config", "../../config/version", "../../helper/confirmBox", "../../config/globals", "./rightHudController", "./leftHudController", "./gamePlayController", "../../popup/resignPopup", "../../popup/showInviteStatus", "../../popup/showFinalScore", "../../popup/showFrndSelector", "../../helper/utils", "../../popup/roundScorePopup"], function(config, version, confirmBox, globals, rightHudController, leftHudController, gamePlayController, resignPopup, showInviteStatus, showFinalScore, showFrndSelector, utils, roundScorePopup) {
  var zzUnionConnection;
  return zzUnionConnection = (function() {
    var UPC, addZzListeners, askClientData, clientAddedListener, clientAttrUpdateListener, clientRemovedListener, clientSnapshotListener, closeListener, init, joinedRoomListener, messageListener, msgManager, onLoginResult, onLogoutResult, orbiter, readyListener, resetGameVariables, roomAttrUpdateListener, roomSnapshotListener, sendDeclinedToServer, sendUpcMessageToServer, zzListeners;
    zzUnionConnection = function() {
      window.UPC = UPC;
      return init();
    };
    UPC = net.user1.orbiter.UPC;
    orbiter = null;
    msgManager = null;
    init = function() {
      orbiter = new net.user1.orbiter.Orbiter();
      msgManager = orbiter.getMessageManager();
      addZzListeners();
      utils.log("defining UPC");
      utils.log("ololisteners :" + zzListeners);
      utils.log("UPC definition completed!");
      if (!orbiter.getSystem().isJavaScriptCompatible()) {
        oloGame.displayChatMessage("systemChatMessage", "Your browser is not supported.");
        return;
      }
      if (orbiter) {
        orbiter.addEventListener(net.user1.orbiter.OrbiterEvent.READY, readyListener, this);
        orbiter.addEventListener(net.user1.orbiter.OrbiterEvent.CLOSE, closeListener, this);
      }
      return jQuery(function() {
        return orbiter.connect(config.unionConnection.url, config.unionConnection.port);
      });
    };
    roomAttrUpdateListener = function(e, roomId, attrKey, attrVal) {
      if (zzGlobals.roomVars[attrKey]) {
        zzGlobals.roomVars[attrKey] = attrVal;
        utils.log("Triggered room:", attrKey, attrVal);
        return jDocument.trigger("room:" + attrKey, attrVal);
      }
    };
    closeListener = function(e) {
      var el, _this;
      _this = this;
      jDocument.trigger(zzEvents.CONNECTION_CLOSE);
      el = document.getElementById("loadingGame");
      if (el && el.style) {
        el.style.display = "block";
      }
      return window.setTimeout((function() {
        return document.location.reload(true);
      }), 5000);
    };
    onLoginResult = function(clientID, userID, arg2) {
      var unionClientId;
      unionClientId = clientID;
      return zzGlobals.currentUserDBId = userID;
    };
    roomSnapshotListener = function(requestID, roomID, occupantCount, observerCount, roomAttrsStr) {
      var argLen, i, len, roomAttrKey, roomAttrVal, roomAttrsSplit, userFBVOs, userVO;
      argLen = arguments.length;
      i = 5;
      while (i < argLen) {
        userVO = new zzGlobals.UserVO(arguments[i], arguments[i + 3]);
        jDocument.trigger(zzEvents.RECEIVE_USERVO, [userVO, false]);
        i += 5;
      }
      if ((typeof getGameInstWithFBFriends !== "undefined" && getGameInstWithFBFriends !== null) && zzGlobals.roomVars[zzGlobals.roomCodes.ROOM_ID]) {
        userFBVOs = getGameInstWithFBFriends([zzGlobals.roomVars[zzGlobals.roomCodes.ROOM_ID]]);
      }
      roomAttrsSplit = roomAttrsStr.split("|");
      len = roomAttrsSplit.length;
      roomAttrKey = null;
      roomAttrVal = null;
      i = 0;
      while (i < len) {
        if (roomAttrsSplit[i] && roomAttrsSplit[i + 1]) {
          roomAttrKey = roomAttrsSplit[i];
          roomAttrVal = roomAttrsSplit[i + 1];
          if (zzGlobals.roomVars[roomAttrKey]) {
            if (!(roomAttrKey === zzGlobals.roomCodes.WINNER_ID && roomAttrVal === "-1")) {
              utils.log(console.log("Triggered via ss room:", roomAttrKey, roomAttrVal));
              zzGlobals.roomVars[roomAttrKey] = {};
              zzGlobals.roomVars[roomAttrKey] = roomAttrVal;
              jDocument.trigger("room:" + roomAttrKey, roomAttrVal);
            }
          }
        }
        i += 2;
      }
      return true;
    };
    clientSnapshotListener = function(requestID, clientID, userID, a4, clientAttrsStr) {
      var clientAttrKey, clientAttrVal, clientAttrsSplit, i, len;
      if (config.isDevEnvironment) {
        console.log("ClientSnapshotListener ", clientAttrsStr);
      }
      if (userLoginId === userID) {
        clientAttrsSplit = clientAttrsStr.split("|");
        len = clientAttrsSplit.length;
        clientAttrKey = null;
        clientAttrVal = null;
        i = 0;
        while (i < len) {
          if (clientAttrsSplit[i] && clientAttrsSplit[i + 1]) {
            clientAttrKey = clientAttrsSplit[i];
            clientAttrVal = clientAttrsSplit[i + 1];
            if (clientVars[clientAttrKey]) {
              clientVars[clientAttrKey] = clientAttrVal;
              jDocument.trigger("client:" + clientAttrKey, clientAttrVal);
            }
          }
          i += 2;
        }
        return true;
      }
    };
    joinedRoomListener = function(rId) {
      var roomID;
      roomID = rId;
      resetGameVariables();
      return jDocument.trigger(zzEvents.JOINED_ROOM);
    };
    resetGameVariables = function() {
      var flag_roundDrawn;
      flag_roundDrawn = false;
      jQuery("#userTopPicHUDMain").css("left", "0");
      jQuery("#scroll_carousel .selected").removeClass("selected");
      jQuery("#gameBetPanel").css("display", 'block');
      return jQuery("#right_hud_" + gameInstId).addClass("selected");
    };
    clientAddedListener = function(roomID, clientID, userID) {
      var userVO;
      userVO = new zzGlobals.UserVO(clientID, arguments[3]);
      if (config.isDevEnvironment) {
        utils.log("user added and triggered : [UserVO:", userVO, ",clientId:" + clientID + ",args:" + arguments[3] + "]");
      }
      jDocument.trigger(zzEvents.CLIENT_JOINED, userVO);
      return jDocument.trigger(zzEvents.RECEIVE_USERVO, [userVO, true]);
    };
    clientRemovedListener = function(roomID, clientID) {
      var userName;
      userName = clientID;
      if (clientID && zzGlobals.userVOsIndex[clientID]) {
        return jDocument.trigger(zzEvents.REMOVE_USERVO, clientID);
      }
    };
    messageListener = function(messageName, broadcastType, fromClientID, roomID, message) {
      return jDocument.trigger(zzEvents.SERVER_MESSAGE, [messageName, broadcastType, fromClientID, roomID, message, orbiter.getClientID()]);
    };
    clientAttrUpdateListener = function(roomId, clientId, userId, attrKey, attrVal) {
      if (zzGlobals.currentUserDBId === userId) {
        if (zzGlobals.clientVars[attrKey]) {
          zzGlobals.clientVars[attrKey] = attrVal;
          return jDocument.trigger("client:" + attrKey, attrVal);
        }
      }
    };
    askClientData = function(e) {
      utils.log("askfordata");
      return msgManager.sendUPC(UPC.SEND_SERVERMODULE_MESSAGE, config.unionGameServerId, "REQ", "C|AGD", "UID|" + zzGlobals.currentUserDBId);
    };
    readyListener = function(e) {
      msgManager.sendUPC(UPC.SEND_SERVERMODULE_MESSAGE, config.unionGameServerId, "REQ", "C|LI", "UI|" + userLoginId, "GI|" + gameInstId);
      return jDocument.bind(zzEvents.SEND_UPC_MESSAGE, sendUpcMessageToServer);
    };
    window.gameChangeListener = function(e, gameInstIdTemp) {
      var flag_roundBetsDrawn, flag_roundDrawn;
      utils.log("gameInstIdTemp", gameInstIdTemp);
      if (typeof e === 'string') {
        gameInstIdTemp = e;
      }
      if (typeof gameInstIdTemp === 'undefined') {
        eval("gameInstIdTemp = gameInstId");
      } else {
        eval("gameInstId = gameInstIdTemp");
      }
      zzGlobals.roomVars.FR = -1;
      flag_roundDrawn = false;
      flag_roundBetsDrawn = false;
      return msgManager.sendUPC(UPC.SEND_SERVERMODULE_MESSAGE, config.unionGameServerId, "REQ", "C|CG", "UI|" + userLoginId, "GI|" + gameInstIdTemp);
    };
    jDocument.bind("gameChangeListener", gameChangeListener);
    sendDeclinedToServer = function(e, gameSeatId, gameId) {
      $('#accept_decline_' + gameId).text('');
      $('#accept_decline_' + gameId).css('cursor', 'default');
      $('#accept_decline_' + gameId).html(utils.getMiniLoaderHTML());
      return msgManager.sendUPC(UPC.SEND_SERVERMODULE_MESSAGE, config.unionGameServerId, "REQ", "C|DG", "GSID|" + gameSeatId);
    };
    jDocument.bind("sendDeclinedToServer", sendDeclinedToServer);
    sendUpcMessageToServer = function(event, upcFunctionCode, p2, p3, p4, p5, p6) {
      var argArr, i, _i, _ref;
      if (config.isDevEnvironment) {
        utils.log("sending upc message [upcFunctionCode:" + upcFunctionCode + ",p2:" + p2 + ",p3:" + p3 + ",p4:" + p4 + ",p5:" + p5 + ",p6:" + p6 + "]");
      }
      argArr = [];
      for (i = _i = 0, _ref = arguments.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i === 0) {
          continue;
        } else {
          if (arguments[i]) {
            argArr.push(arguments[i]);
          } else {
            argArr.push('');
          }
        }
      }
      utils.log(argArr);
      if (upcFunctionCode) {
        return msgManager.sendUPC.apply(msgManager, argArr);
      }
    };
    onLogoutResult = function(clientUnionId, userId) {
      if (parseInt(unionClientId) === parseInt(clientUnionId)) {
        return window.location = "http://" + document.domain + baseUrl + "/site/closesession";
      }
    };
    addZzListeners = function() {
      var msgEvt;
      for (msgEvt in zzListeners) {
        if (msgManager && msgManager.addMessageListener) {
          if (zzListeners[msgEvt] === "messageListener") {
            msgManager.addMessageListener(UPC[msgEvt], zzListeners[msgEvt], this, gameInstId);
          } else {
            msgManager.addMessageListener(UPC[msgEvt], zzListeners[msgEvt], this);
          }
        }
      }
      return true;
    };
    zzListeners = {
      JOINED_ROOM: joinedRoomListener,
      CLIENT_ADDED_TO_ROOM: clientAddedListener,
      CLIENT_REMOVED_FROM_ROOM: clientRemovedListener,
      ROOM_SNAPSHOT: roomSnapshotListener,
      CLIENT_SNAPSHOT: clientSnapshotListener,
      ROOM_ATTR_UPDATE: roomAttrUpdateListener,
      CLIENT_ATTR_UPDATE: clientAttrUpdateListener,
      LOGGED_IN: onLoginResult,
      LOGGED_OFF: onLogoutResult,
      RECEIVE_MESSAGE: messageListener
    };
    if (version.version) {
      $("#active-screen").append("<div style=\"position:absolute;bottom:5px;left:5px;z-index:999;padding:5px;border-radius:4px;background:rgba(4,4,4,0.8)\">Version : " + version.version + " </div>");
    }
    return zzUnionConnection;
  })();
});
