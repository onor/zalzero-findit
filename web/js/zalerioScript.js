// Generated by CoffeeScript 1.3.3
var acceptInvitationAdd, declineInvitationAdd, drawRoundsPanel, flag_roundBetsDrawn, flag_roundDrawn, gameChangeListener, isDevEnvironment, messagePopup, popupMSG, rematchCall, remindUserAdd, resignStatus, roundVOsIdxRightHUD, sendDeclinedToServer, showRoundScorePopup, __hasProp_, _currentRoundStatus;

popupMSG = {
  remindSucess: function(userName) {
    return "You have sent reminder successfuly";
  },
  acceptInvite: 'Would you like to start playing',
  declineInvite: function() {
    return "You have declined successfuly";
  },
  gameCreate: 'Challenge has been sent. Would you like to start playing.'
};

__hasProp_ = Object.prototype.hasOwnProperty;

rematchCall = function() {};

sendDeclinedToServer = function() {};

gameChangeListener = function() {};

resignStatus = 0;

flag_roundBetsDrawn = false;

drawRoundsPanel = function() {};

showRoundScorePopup = function() {};

_currentRoundStatus = -1;

roundVOsIdxRightHUD = {};

flag_roundDrawn = false;

acceptInvitationAdd = function(div, gameIdToAdd) {
  return div.onclick = function() {
    return acceptInvitation(gameIdToAdd);
  };
};

declineInvitationAdd = function(div, gameSeatIdToDecline, gameId) {
  return div.onclick = function() {
    return sendDeclinedToServer(gameSeatIdToDecline, gameId);
  };
};

remindUserAdd = function(gameLinkID, remindUsersLeft, x, fbUser, div) {
  return div.onclick = function() {
    return remindUser(gameLinkID, remindUsersLeft, x, fbUser);
  };
};

if (typeof valDevEnvironment !== "undefined") {
  isDevEnvironment = valDevEnvironment;
} else {
  isDevEnvironment = false;
}

jQuery(function() {
  var OloChatComponent, OloClockComponent, OloGlobals, OloUnionConnection, ZalerioGame, ZalerioUserComponent, acceptTermsForSeat, addEventHandler, basicFx, bets, boardVo, changeActiveUserCount, changeTotalUserCount, closeInvits, crouselObjSize, jDocument, messageListener, noUserExist, objSize, oloConnection, oloEvents, oloGlobals, oloUserComponent, pad2, placeBetsToServer, printOnConsole, redirectToPlayNow, removeClassName, removeEventHandler, resignPopUP, resignme, responseVo, roomID, sendChatMessage, sendOriginalFigsRequest, sendPlaceBetRequest, sendResignToServer, unionClientId, unionGameServerId, updateClock, userLevelImg, userLevelImgBig, usersRecordCall, winnerChange;
  unionGameServerId = "zalerioGameServer";
  userLevelImg = new Array("carauselbelts_otherplayers_white_belt.png", "carauselbelts_otherplayers_yellow_belt.png", "carauselbelts_otherplayers_orange_belt.png", "carauselbelts_otherplayers_green_belt.png", "carauselbelts_otherplayers_blue_belt.png", "carauselbelts_otherplayers_purple_belt.png", "carauselbelts_otherplayers_red_belt.png", "carauselbelts_otherplayers_brown_belt.png", "carauselbelts_otherplayers_black_belt.png");
  userLevelImgBig = new Array("carauselbelts_main_player_white_belt.png", "carauselbelts_main_player_yellow_belt.png", "carauselbelts_main_player_orange_belt.png", "carauselbelts_main_player_green_belt.png", "carauselbelts_main_player_blue_belt.png", "carauselbelts_main_player_purple_belt.png", "carauselbelts_main_player_red_belt.png", "carauselbelts_main_player_brown_belt.png", "carauselbelts_main_player_black_belt.png");
  jDocument = jQuery(document);
  unionClientId = null;
  roomID = null;
  pad2 = function(number) {
    var _ref;
    _ref = void 0;
    return ((_ref = number < 10) != null ? _ref : {
      0: ""
    }) + number;
  };
  oloEvents = {
    JOINED_ROOM: "joinedRoomListener",
    RESET_GAME_VARIABLES: "resetGameVariables",
    CLIENT_ADDED_TO_ROOM: "clientAddedListener",
    CLIENT_REMOVED_FROM_ROOM: "clientRemovedListener",
    ROOM_SNAPSHOT: "roomSnapshotListener",
    CLIENT_SNAPSHOT: "clientSnapshotListener",
    ROOM_ATTR_UPDATE: "roomAttrUpdateListener",
    CLIENT_ATTR_UPDATE: "clientAttrUpdateListener",
    ROOM_OCCUPANTCOUNT_UPDATE: "roomOccupantCountUpdateListener",
    LOGGED_IN: "onLoginResult",
    RECEIVE_MESSAGE: "messageListener",
    SEND_UPC_MESSAGE: "send_upc_message",
    RECEIVE_USERVO: "received_userVO",
    REMOVE_USERVO: "remove_userVO",
    UPDATE_TTL: "update_ttl",
    CONNECTION_CLOSE: "connection_close",
    SEND_CHAT_MESSAGE: "send_chat_message",
    UPDATE_LOCAL_TTL: "update_local_ttl",
    BID_CHANGED: "bid_changed",
    SERVER_MESSAGE: "SERVER_MESSAGE",
    WINNER_CHANGE: "winner_change",
    CLIENT_JOINED: "client_joined",
    CLIENT_LEFT: "client_left",
    OLOTUTS_MESSAGE: "olotuts_message",
    CLIENT_BETS_PLACED: "zalerioUserBetPlaced"
  };
  OloGlobals = function() {
    var UserVO, clientCodes, clientVars, currentUserDBId, dataObjCodes, dataObjVars, gameDuration, generateAttrVars, getUserName, inviteStatus, msgCodes, msgVars, offlinePlayers, pageRefresh, roomCodes, roomVars, roomVarsFlag, setClockInterval, ttl, updateClock, updateGameDuration, updateTTL, userFBVOs, userVOs, userVOsIndex, userVOsPartyIndex, userVOsSeatIndex;
    inviteStatus = null;
    ttl = null;
    currentUserDBId = null;
    offlinePlayers = null;
    clientCodes = {
      USER_ID: "UI",
      USER_DISPLAY_NAME: "UD",
      USER_NAME: "UN",
      USER_UNION_ID: "UU",
      USER_FACEBOOK_ID: "UF",
      USER_PARTY_ID: "UP",
      USER_SEAT_ID: "UR",
      Z_USER_SCORE: "ZS",
      MY_TURN: "MT",
      THEIR_TURN: "TT",
      ALL_PAST_GAME: "APG",
      USERINFO: "UINFO"
    };
    msgCodes = {
      RIGHT_HUD: "RH"
    };
    dataObjCodes = {
      ALL_PLAYER_INFO: "AP"
    };
    roomCodes = {
      ROOM_ID: "GI",
      USER_TOTAL: "UT",
      USER_COUNT: "UC",
      WINNER_NAME: "WN",
      WINNER_ID: "WI",
      GAME_ENDED: "GE",
      TIME_LEFT: "TL",
      GAME_DURATION: "GD",
      START_TIME: "ST",
      END_TIME: "ET",
      ROOM_NAME: "RN",
      TOTAL_SEATS: "TS",
      ROOM_PRIZE_NAME: "RP",
      ROOM_MRP: "RM",
      ROOM_IMAGEROOM_MRP: "RI",
      TOTALROUNDS: "TR",
      CURRENTROUND: "CR",
      ROUND_ENDTIME: "RE",
      ROUND_ENDTIMEINMS: "EM",
      ROUND_NOOFBETS: "NB",
      BOARDVARS: "BV",
      BOARD_XY: "XY",
      TOTALFIGS: "TF",
      ROOM_ALLROUNDS: "AR",
      FIGURE_DETAILS: "FD",
      ZALERIO_SCORES: "ZS",
      GAME_FINISH: "FR",
      PLAYER_BETS_PLACE: "PP",
      ALL_PLAYER_INFO: "AP"
    };
    userVOsIndex = {};
    userVOsSeatIndex = {};
    userVOsPartyIndex = {};
    generateAttrVars = function(attrCodes) {
      var attrV, i;
      attrV = {};
      for (i in attrCodes) {
        attrV[attrCodes[i]] = i;
      }
      return attrV;
    };
    msgVars = generateAttrVars(msgCodes);
    dataObjVars = generateAttrVars(dataObjCodes);
    clientVars = generateAttrVars(clientCodes);
    roomVars = generateAttrVars(roomCodes);
    roomVarsFlag = generateAttrVars(roomCodes);
    userVOs = {};
    userFBVOs = {};
    gameDuration = "";
    setClockInterval = "";
    UserVO = function(userUnionId, userSnapshotObj) {
      var i, userVArr, userVArrLen;
      if (isDevEnvironment) {
        console.log("Added to room " + userSnapshotObj);
        console.log("Current User local ID : " + oloGlobals.currentUserDBId);
      }
      for (i in clientCodes) {
        this[clientCodes[i]] = "-1";
      }
      userVArr = userSnapshotObj.split("|");
      userVArrLen = userVArr.length;
      i = 0;
      while (i < userVArrLen) {
        if (clientVars[userVArr[i]]) {
          this[userVArr[i]] = userVArr[i + 1];
        }
        i += 3;
      }
      if (this[clientCodes.USER_ID]) {
        this[clientCodes.USER_UNION_ID] = userUnionId;
      }
      if (this[clientCodes.USER_ID] === oloGlobals.currentUserDBId) {
        i = 0;
        while (i < userVArrLen) {
          if (clientVars[userVArr[i]]) {
            oloGlobals.clientVars[userVArr[i]] = userVArr[i + 1];
          }
          i += 3;
        }
      }
      return this;
    };
    getUserName = function(clientID) {
      var userName;
      userName = clientID;
      if (clientID && oloGlobals.userVOsIndex[clientID]) {
        userName = oloGlobals.userVOsIndex[clientID][clientCodes.USER_DISPLAY_NAME];
      }
      return userName;
    };
    updateGameDuration = function(event, data) {
      data = (data ? parseInt(data) : null);
      if (data && !isNaN(data)) {
        return gameDuration = data;
      }
    };
    updateClock = function() {
      ttl--;
      if (ttl > 0) {
        if (pageRefresh && pageRefresh.isTimerEnabled && pageRefresh.isTimerEnabled()) {
          pageRefresh.clearTimer();
        }
      } else {
        if (pageRefresh && ttl <= 0) {
          if (pageRefresh.isTimerEnabled && !(pageRefresh.isTimerEnabled()) && currentScreen !== "postscreen") {
            if (isDevEnvironment) {
              console.log("Pagerefresh.isTimerEnabled false!");
            }
            pageRefresh.enableTimer();
          }
        }
      }
      return jDocument.trigger(oloEvents.UPDATE_LOCAL_TTL, this.ttl);
    };
    updateTTL = function(event, data) {
      if (setClockInterval) {
        clearInterval(setClockInterval);
      }
      data = (data ? parseInt(data) : null);
      if (data && typeof data === "number") {
        ttl = data;
      }
      return setClockInterval = setInterval(updateClock, 10000);
    };
    pageRefresh = function() {
      var clearTimerFn, enableTimerFn, timer;
      timer = null;
      enableTimerFn = function() {
        var _this;
        _this = this;
        timer = setTimeout(function() {
          return redirectToPlayNow(gameInstId);
        }, 5000);
        if (isDevEnvironment) {
          return console.log("refresh timer set!");
        }
      };
      clearTimerFn = function() {
        timer = null;
        if (isDevEnvironment) {
          return console.log("refresh timer cleared!");
        }
      };
      return {
        isTimerEnabled: function() {
          if (timer) {
            return true;
          } else {
            return false;
          }
        },
        enableTimer: function() {
          return enableTimerFn();
        },
        clearTimer: function() {
          return clearTimerFn();
        }
      };
    };
    return {
      generateAttrVarsFn: function(p) {
        return generateAttrVars(p);
      },
      roomCodes: roomCodes,
      clientCodes: clientCodes,
      msgCodes: msgCodes,
      dataObjCodes: dataObjCodes,
      dataObjVars: dataObjVars,
      UserVO: UserVO,
      userVOsIndex: userVOsIndex,
      roomVars: roomVars,
      roomVarsFlag: roomVarsFlag,
      clientVars: clientVars,
      msgVars: msgVars,
      userVOs: userVOs,
      userFBVOs: userFBVOs,
      getUserName: getUserName,
      userVOsPartyIndex: userVOsPartyIndex,
      getTtl: function() {
        return ttl;
      },
      userVOsSeatIndex: userVOsSeatIndex,
      getGameDuration: function() {
        return gameDuration;
      },
      offlinePlayers: offlinePlayers,
      currentUserDBId: currentUserDBId
    };
  };
  window.oloGlobals = oloGlobals = OloGlobals();
  OloUnionConnection = (function() {
    var UPC, addOloListeners, askClientData, clientAddedListener, clientAttrUpdate, clientAttrUpdateListener, clientRemovedListener, clientSnapshotListener, closeListener, getClientSnapshotResult, init, joinedRoomListener, messageListener, msgManager, oloListeners, onLoginResult, onLogoutResult, orbiter, readyListener, resetGameVariables, roomAttrUpdateListener, roomOccupantCountUpdateListener, roomSnapshotListener, sendUpcMessageToServer;
    OloUnionConnection = function() {
      window.UPC = UPC;
      return init();
    };
    UPC = net.user1.orbiter.UPC;
    orbiter = null;
    msgManager = null;
    getClientSnapshotResult = function() {
      if (isDevEnvironment) {
        console.log("client snapshot result");
        return console.log(arguments);
      }
    };
    roomOccupantCountUpdateListener = function(roomID, numOccupants) {
      numOccupants = parseInt(numOccupants);
      if (numOccupants === 1) {

      } else if (numOccupants === 2) {

      } else {

      }
    };
    roomAttrUpdateListener = function(e, roomId, attrKey, attrVal) {
      var wbBid;
      if (oloGlobals.roomVars[attrKey]) {
        oloGlobals.roomVars[attrKey] = attrVal;
        if (oloGlobals.roomCodes.WINNING_BID === attrKey) {
          try {
            wbBid = jQuery.parseJSON(attrVal);
            oloGlobals.roomVars[oloGlobals.roomCodes.WINNER_ID] = wbBid[oloGlobals.roomCodes.WINNER_ID];
            oloGlobals.roomVars[oloGlobals.roomCodes.WINNING_AMOUNT] = wbBid[oloGlobals.roomCodes.WINNING_AMOUNT];
            oloGlobals.roomVars[oloGlobals.roomCodes.WINNER_NAME] = wbBid[oloGlobals.roomCodes.WINNER_NAME];
            return jDocument.trigger(oloEvents.WINNER_CHANGE, [wbBid[oloGlobals.roomCodes.WINNING_AMOUNT], wbBid[oloGlobals.roomCodes.WINNER_NAME], wbBid[oloGlobals.roomCodes.WINNER_ID]]);
          } catch (e) {
            if (isDevEnvironment) {
              console.log(e);
            }
          }
        } else {
          if (isDevEnvironment) {
            console.log("Triggered room:", attrKey, attrVal);
          }
          return jDocument.trigger("room:" + attrKey, attrVal);
        }
      }
    };
    closeListener = function(e) {
      var el, _this;
      _this = this;
      jDocument.trigger(oloEvents.CONNECTION_CLOSE);
      el = document.getElementById("loadingGame");
      if (el && el.style) {
        el.style.display = "block";
      }
      return window.setTimeout((function() {
        return document.location.reload(true);
      }), 5000);
    };
    onLoginResult = function(clientID, userID, arg2) {
      unionClientId = clientID;
      return oloGlobals.currentUserDBId = userID;
    };
    clientAttrUpdate = function(attrKey) {
      switch (attrKey) {
        case clientCodes.USER_ID:
          break;
        case clientCodes.USER_DISPLAY_NAME:
          break;
        case clientCodes.USER_NAME:
      }
    };
    roomSnapshotListener = function(requestID, roomID, occupantCount, observerCount, roomAttrsStr) {
      var argLen, i, len, roomAttrKey, roomAttrVal, roomAttrsSplit, userFBVOs, userVO, wbBid, _results;
      argLen = arguments.length;
      i = 5;
      while (i < argLen) {
        userVO = new oloGlobals.UserVO(arguments[i], arguments[i + 3]);
        jDocument.trigger(oloEvents.RECEIVE_USERVO, [userVO, false]);
        i += 5;
      }
      if ((typeof getGameInstWithFBFriends !== "undefined" && getGameInstWithFBFriends !== null) && oloGlobals.roomVars[oloGlobals.roomCodes.ROOM_ID]) {
        userFBVOs = getGameInstWithFBFriends([oloGlobals.roomVars[oloGlobals.roomCodes.ROOM_ID]]);
      }
      roomAttrsSplit = roomAttrsStr.split("|");
      len = roomAttrsSplit.length;
      roomAttrKey = null;
      roomAttrVal = null;
      _results = [];
      i = 0;
      while (i < len) {
        if (roomAttrsSplit[i] && roomAttrsSplit[i + 1]) {
          roomAttrKey = roomAttrsSplit[i];
          roomAttrVal = roomAttrsSplit[i + 1];
          if (oloGlobals.roomCodes.WINNING_BID === roomAttrKey) {
            try {
              wbBid = jQuery.parseJSON(roomAttrVal);
              oloGlobals.roomVars[oloGlobals.roomCodes.WINNER_ID] = wbBid[oloGlobals.roomCodes.WINNER_ID];
              oloGlobals.roomVars[oloGlobals.roomCodes.WINNING_AMOUNT] = wbBid[oloGlobals.roomCodes.WINNING_AMOUNT];
              oloGlobals.roomVars[oloGlobals.roomCodes.WINNER_NAME] = wbBid[oloGlobals.roomCodes.WINNER_NAME];
              _results.push(jDocument.trigger(oloEvents.WINNER_CHANGE));
            } catch (e) {
              _results.push(console.log(e));
            }
          } else {
            if (oloGlobals.roomVars[roomAttrKey]) {
              if (!(roomAttrKey === oloGlobals.roomCodes.WINNER_ID && roomAttrVal === "-1")) {
                if (isDevEnvironment) {
                  console.log("Triggered via ss room:", roomAttrKey, roomAttrVal);
                }
                oloGlobals.roomVars[roomAttrKey] = {};
                oloGlobals.roomVars[roomAttrKey] = roomAttrVal;
                _results.push(jDocument.trigger("room:" + roomAttrKey, roomAttrVal));
              }
            } else {
              _results.push(void 0);
            }
          }
        } else {
          _results.push(void 0);
        }
        i += 2;
      }
      return _results;
    };
    clientSnapshotListener = function(requestID, clientID, userID, a4, clientAttrsStr) {
      var clientAttrKey, clientAttrVal, clientAttrsSplit, i, len, _results;
      if (isDevEnvironment) {
        console.log("ClientSnapshotListener ", clientAttrsStr);
      }
      if (userLoginId === userID) {
        clientAttrsSplit = clientAttrsStr.split("|");
        len = clientAttrsSplit.length;
        clientAttrKey = null;
        clientAttrVal = null;
        _results = [];
        i = 0;
        while (i < len) {
          if (clientAttrsSplit[i] && clientAttrsSplit[i + 1]) {
            clientAttrKey = clientAttrsSplit[i];
            clientAttrVal = clientAttrsSplit[i + 1];
            if (clientVars[clientAttrKey]) {
              clientVars[clientAttrKey] = clientAttrVal;
              _results.push(jDocument.trigger("client:" + clientAttrKey, clientAttrVal));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
          i += 2;
        }
        return _results;
      }
    };
    joinedRoomListener = function(rId) {
      roomID = rId;
      resetGameVariables();
      return jDocument.trigger(oloEvents.JOINED_ROOM);
    };
    resetGameVariables = function() {
      flag_roundDrawn = false;
      jQuery("#userTopPicHUDMain").css("left", "0");
      jQuery("#scroll_carousel .selected").removeClass("selected");
      jQuery("#gameBetPanel").css("display", 'block');
      return jQuery("#right_hud_" + gameInstId).addClass("selected");
    };
    clientAddedListener = function(roomID, clientID, userID) {
      var userVO;
      userVO = new oloGlobals.UserVO(clientID, arguments[3]);
      if (isDevEnvironment) {
        console.log("user added and triggered : [UserVO:", userVO, ",clientId:" + clientID + ",args:" + arguments[3] + "]");
      }
      jDocument.trigger(oloEvents.CLIENT_JOINED, userVO);
      return jDocument.trigger(oloEvents.RECEIVE_USERVO, [userVO, true]);
    };
    clientRemovedListener = function(roomID, clientID) {
      var userName;
      userName = clientID;
      if (clientID && oloGlobals.userVOsIndex[clientID]) {
        return jDocument.trigger(oloEvents.REMOVE_USERVO, clientID);
      }
    };
    messageListener = function(messageName, broadcastType, fromClientID, roomID, message) {
      return jDocument.trigger(oloEvents.SERVER_MESSAGE, [messageName, broadcastType, fromClientID, roomID, message, orbiter.getClientID()]);
    };
    clientAttrUpdateListener = function(roomId, clientId, userId, attrKey, attrVal) {
      if (oloGlobals.currentUserDBId === userId) {
        if (oloGlobals.clientVars[attrKey]) {
          oloGlobals.clientVars[attrKey] = attrVal;
          return jDocument.trigger("client:" + attrKey, attrVal);
        }
      }
    };
    init = function() {
      orbiter = new net.user1.orbiter.Orbiter();
      msgManager = orbiter.getMessageManager();
      addOloListeners();
      if (isDevEnvironment) {
        console.log("defining UPC");
        console.log("ololisteners :", oloListeners);
        console.log("UPC definition completed!");
      }
      if (!orbiter.getSystem().isJavaScriptCompatible()) {
        oloGame.displayChatMessage("systemChatMessage", "Your browser is not supported.");
        return;
      }
      if (orbiter) {
        orbiter.addEventListener(net.user1.orbiter.OrbiterEvent.READY, readyListener, this);
        orbiter.addEventListener(net.user1.orbiter.OrbiterEvent.CLOSE, closeListener, this);
      }
      return jQuery(function() {
        if (document.domain === "localhost" || document.domain === "zl.mobicules.com") {
          return orbiter.connect(document["domain"], 9933);
        } else {
          return orbiter.connect("union.zalerio.com", 80);
        }
      });
    };
    askClientData = function(e) {
      if (isDevEnvironment) {
        console.log("askfordata");
      }
      return msgManager.sendUPC(UPC.SEND_SERVERMODULE_MESSAGE, unionGameServerId, "REQ", "C|AGD", "UID|" + oloGlobals.currentUserDBId);
    };
    readyListener = function(e) {
      msgManager.sendUPC(UPC.SEND_SERVERMODULE_MESSAGE, unionGameServerId, "REQ", "C|LI", "UI|" + userLoginId, "GI|" + gameInstId);
      return jDocument.bind(oloEvents.SEND_UPC_MESSAGE, sendUpcMessageToServer);
    };
    gameChangeListener = function(gameInstIdTemp) {
      if (typeof gameInstIdTemp === 'undefined') {
        eval("gameInstIdTemp = gameInstId");
      } else {
        eval("gameInstId = gameInstIdTemp");
      }
      oloGlobals.roomVars.FR = -1;
      flag_roundDrawn = false;
      flag_roundBetsDrawn = false;
      return msgManager.sendUPC(UPC.SEND_SERVERMODULE_MESSAGE, unionGameServerId, "REQ", "C|CG", "UI|" + userLoginId, "GI|" + gameInstIdTemp);
    };
    sendDeclinedToServer = function(gameSeatId, gameId) {
      jQuery('#accept_decline_' + gameId).text('');
      jQuery('#accept_decline_' + gameId).css('cursor', 'default');
      jQuery('#accept_decline_' + gameId).html("<div id=\"floatingBarsGs\">\n<div class=\"blockG\" id=\"rotateG_01\">\n</div>\n<div class=\"blockG\" id=\"rotateG_02\">\n</div>\n<div class=\"blockG\" id=\"rotateG_03\">\n</div>\n<div class=\"blockG\" id=\"rotateG_04\">\n</div>\n<div class=\"blockG\" id=\"rotateG_05\">\n</div>\n<div class=\"blockG\" id=\"rotateG_06\">\n</div>\n<div class=\"blockG\" id=\"rotateG_07\">\n</div>\n<div class=\"blockG\" id=\"rotateG_08\">\n</div>\n</div>");
      return msgManager.sendUPC(UPC.SEND_SERVERMODULE_MESSAGE, unionGameServerId, "REQ", "C|DG", "GSID|" + gameSeatId);
    };
    sendUpcMessageToServer = function(event, upcFunctionCode, p2, p3, p4, p5, p6) {
      var argArr, i, _i, _ref;
      if (isDevEnvironment) {
        console.log("sending upc message [upcFunctionCode:" + upcFunctionCode + ",p2:" + p2 + ",p3:" + p3 + ",p4:" + p4 + ",p5:" + p5 + ",p6:" + p6 + "]");
      }
      argArr = [];
      for (i = _i = 0, _ref = arguments.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i === 0) {
          continue;
        } else {
          if (arguments[i]) {
            argArr.push(arguments[i]);
          } else {
            argArr.push('');
          }
        }
      }
      if (isDevEnvironment) {
        console.log(argArr);
      }
      if (upcFunctionCode) {
        return msgManager.sendUPC.apply(msgManager, argArr);
      }
    };
    onLogoutResult = function(clientUnionId, userId) {
      if (parseInt(unionClientId) === parseInt(clientUnionId)) {
        return window.location = "http://" + document.domain + baseUrl + "/site/closesession";
      }
    };
    oloListeners = {
      JOINED_ROOM: joinedRoomListener,
      CLIENT_ADDED_TO_ROOM: clientAddedListener,
      CLIENT_REMOVED_FROM_ROOM: clientRemovedListener,
      ROOM_SNAPSHOT: roomSnapshotListener,
      CLIENT_SNAPSHOT: clientSnapshotListener,
      ROOM_ATTR_UPDATE: roomAttrUpdateListener,
      CLIENT_ATTR_UPDATE: clientAttrUpdateListener,
      ROOM_OCCUPANTCOUNT_UPDATE: roomOccupantCountUpdateListener,
      LOGGED_IN: onLoginResult,
      LOGGED_OFF: onLogoutResult,
      RECEIVE_MESSAGE: messageListener,
      GET_CLIENT_SNAPSHOT_RESULT: getClientSnapshotResult
    };
    addOloListeners = function() {
      var msgEvt, _results;
      _results = [];
      for (msgEvt in oloListeners) {
        if (msgManager && msgManager.addMessageListener) {
          if (oloListeners[msgEvt] === "messageListener") {
            _results.push(msgManager.addMessageListener(UPC[msgEvt], oloListeners[msgEvt], this, gameInstId));
          } else {
            _results.push(msgManager.addMessageListener(UPC[msgEvt], oloListeners[msgEvt], this));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    return OloUnionConnection;
  })();
  oloUserComponent = function() {
    var DEFAULT_PLAYER_IMG_URL, MAX_PLAYERS_IN_A_GAME, PLAYER_OFFLINE_IMG_URL, PLAYER_ONLINE_IMG_URL, activateUserPanelJQuery, currentNoOfUsers, docElems, drawUserPanel, flag_drawUserPanel, pushToUserVO, refreshUserPanel, removeFromUserVO, renderUserVOToUserPanel, showAllUsers, updateUserIndex, updateUserIndexForPartyId, updateUserIndexForPartyIdViaOfflinePlayers, userDivCodes, userStatusCurrent, userVOsDivIndex, userVOsLen;
    flag_drawUserPanel = false;
    docElems = {};
    DEFAULT_PLAYER_IMG_URL = "";
    PLAYER_ONLINE_IMG_URL = "";
    PLAYER_OFFLINE_IMG_URL = "";
    showAllUsers = "ALL";
    userStatusCurrent = 10;
    userVOsLen = 0;
    userVOsDivIndex = {};
    MAX_PLAYERS_IN_A_GAME = 100;
    currentNoOfUsers = 0;
    userDivCodes = {
      USER_IMAGE: "userImg",
      USER_DISPLAY_NAME: "userDisplayNameSpan",
      USER_SCORE: "userScoreSpanValue",
      USER_RANK: "userRankSpan",
      USER_LI: "userLi",
      USER_ONLINE_STATUS: "userOnlineStatusDiv"
    };
    updateUserIndex = function() {
      var i;
      oloGlobals.userVOsIndex = {};
      for (i in oloGlobals.userVOs) {
        oloGlobals.userVOsIndex[oloGlobals.userVOs[i][oloGlobals.clientCodes.USER_UNION_ID]] = oloGlobals.userVOs[i];
      }
      return updateUserIndexForPartyId();
    };
    updateUserIndexForPartyId = function() {
      var i, _results;
      _results = [];
      for (i in oloGlobals.userVOs) {
        if (!oloGlobals.userVOsPartyIndex[oloGlobals.userVOs[i][oloGlobals.clientCodes.USER_PARTY_ID]]) {
          _results.push(oloGlobals.userVOsPartyIndex[oloGlobals.userVOs[i][oloGlobals.clientCodes.USER_PARTY_ID]] = oloGlobals.userVOs[i]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    updateUserIndexForPartyIdViaOfflinePlayers = function() {
      var i, _results;
      _results = [];
      for (i in oloGlobals.offlinePlayers) {
        if (!oloGlobals.userVOsPartyIndex[oloGlobals.offlinePlayers[i][oloGlobals.clientCodes.USER_PARTY_ID]]) {
          _results.push(oloGlobals.userVOsPartyIndex[oloGlobals.offlinePlayers[i][oloGlobals.clientCodes.USER_PARTY_ID]] = oloGlobals.offlinePlayers[i]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    refreshUserPanel = function() {
      var i, offlineUserVO, userCtr, userVO;
      userCtr = 0;
      for (i in oloGlobals.userVOs) {
        if (oloGlobals.userVOs.hasOwnProperty(i)) {
          if ((showAllUsers !== "FB") || (showAllUsers === "FB" && oloGlobals.userFBVOs[i])) {
            userVO = oloGlobals.userVOs[i];
            renderUserVOToUserPanel(userCtr++, userVO);
          }
        }
      }
      if ((typeof getGameInstWithFriends !== "undefined" && getGameInstWithFriends !== null) && !oloGlobals.offlinePlayers && getGameInstWithFriends(oloGlobals.roomVars[oloGlobals.roomCodes.ROOM_ID])) {
        oloGlobals.offlinePlayers = getGameInstWithFriends(oloGlobals.roomVars[oloGlobals.roomCodes.ROOM_ID]);
        updateUserIndexForPartyIdViaOfflinePlayers();
        changeWinner();
      }
      for (i in oloGlobals.offlinePlayers) {
        if (oloGlobals.offlinePlayers.hasOwnProperty(i)) {
          offlineUserVO = oloGlobals.offlinePlayers[i];
          if (showAllUsers === "FB") {
            if (!userFBVOs[i]) {
              renderUserVOToUserPanel(userCtr++, offlineUserVO, true);
            }
          } else {
            if (!oloGlobals.userVOs[i]) {
              renderUserVOToUserPanel(userCtr++, offlineUserVO, true);
            }
          }
        }
      }
      currentNoOfUsers = userCtr;
      while (userCtr < MAX_PLAYERS_IN_A_GAME) {
        if (userVOsDivIndex && userVOsDivIndex[userCtr] && userVOsDivIndex[userCtr][userDivCodes.USER_DIV]) {
          userVOsDivIndex[userCtr][userDivCodes.USER_DIV].style.display = "none";
        }
        userCtr++;
      }
      return activateUserPanelJQuery(currentNoOfUsers);
    };
    activateUserPanelJQuery = function(currentNoOfUsers) {
      oloGlobals.roomVars[oloGlobals.roomCodes.USER_TOTAL] = currentNoOfUsers;
      return jDocument.trigger("room:" + oloGlobals.roomCodes.USER_TOTAL, currentNoOfUsers);
    };
    renderUserVOToUserPanel = function(idx, userVO, userOffline) {
      userOffline = userOffline || false;
      if (userVO && userVO[oloGlobals.clientCodes.USER_ID]) {
        userVOsDivIndex[idx][userDivCodes.USER_LI].style.display = "block";
        if (userVO[oloGlobals.clientCodes.USER_DISPLAY_NAME]) {
          userVOsDivIndex[idx][userDivCodes.USER_DISPLAY_NAME].innerHTML = userVO[oloGlobals.clientCodes.USER_DISPLAY_NAME];
        } else {
          userVOsDivIndex[idx][userDivCodes.USER_DISPLAY_NAME].innerHTML = "-";
        }
        if (userVO[oloGlobals.clientCodes.USER_FACEBOOK_ID] && userVO[oloGlobals.clientCodes.USER_FACEBOOK_ID].length > 2) {
          userVOsDivIndex[idx][userDivCodes.USER_IMAGE].src = "https://graph.facebook.com/" + userVO[oloGlobals.clientCodes.USER_FACEBOOK_ID] + "/picture";
        } else {
          userVOsDivIndex[idx][userDivCodes.USER_IMAGE].src = DEFAULT_PLAYER_IMG_URL;
        }
        if (userOffline) {
          return userVOsDivIndex[idx][userDivCodes.USER_ONLINE_STATUS].className = "user-offline";
        } else {
          return userVOsDivIndex[idx][userDivCodes.USER_ONLINE_STATUS].className = "user-online";
        }
      }
    };
    drawUserPanel = function() {
      var i, playerListUl, userDisplayNameDiv, userImg, userImgDiv, userLi, userOnlineStatusDiv, userVODivIndexObj, userVOIndex;
      userVOIndex = {};
      playerListUl = document.getElementById("nowPlayers");
      playerListUl.innerHML = "";
      i = 0;
      while ((0 <= MAX_PLAYERS_IN_A_GAME ? i < MAX_PLAYERS_IN_A_GAME : i > MAX_PLAYERS_IN_A_GAME)) {
        userLi = document.createElement("li");
        userLi.style.display = "none";
        userImgDiv = document.createElement("div");
        userImgDiv.className = "imgOfWn";
        userImg = document.createElement("img");
        userImg.src = DEFAULT_PLAYER_IMG_URL;
        userImgDiv.appendChild(userImg);
        userOnlineStatusDiv = document.createElement("div");
        userOnlineStatusDiv.className = "offline";
        userImgDiv.appendChild(userOnlineStatusDiv);
        userLi.appendChild(userImgDiv);
        userDisplayNameDiv = document.createElement("div");
        userDisplayNameDiv.className = "uName";
        userLi.appendChild(userDisplayNameDiv);
        playerListUl.appendChild(userLi);
        userVODivIndexObj = {};
        userVODivIndexObj[userDivCodes.USER_LI] = userLi;
        userVODivIndexObj[userDivCodes.USER_IMAGE] = userImg;
        userVODivIndexObj[userDivCodes.USER_DISPLAY_NAME] = userDisplayNameDiv;
        userVODivIndexObj[userDivCodes.USER_ONLINE_STATUS] = userOnlineStatusDiv;
        userVOsDivIndex[i] = userVODivIndexObj;
        if (0 <= MAX_PLAYERS_IN_A_GAME) {
          i++;
        } else {
          i--;
        }
      }
      flag_drawUserPanel = true;
      return refreshUserPanel();
    };
    pushToUserVO = function(event, userVO, flag_updateUserIdx) {
      if (userVO && userVO[oloGlobals.clientCodes.USER_ID]) {
        oloGlobals.userVOs[userVO[oloGlobals.clientCodes.USER_ID]] = userVO;
        updateUserIndex();
      }
      if (flag_drawUserPanel) {
        return refreshUserPanel();
      }
    };
    removeFromUserVO = function(event, clientID) {
      var clientName;
      clientName = void 0;
      if (clientID && oloGlobals.userVOsIndex[clientID]) {
        clientName = oloGlobals.userVOsIndex[clientID][oloGlobals.clientCodes.USER_DISPLAY_NAME];
        delete oloGlobals.userVOs[oloGlobals.userVOsIndex[clientID][oloGlobals.clientCodes.USER_ID]];
        jDocument.trigger(oloEvents.CLIENT_LEFT, [clientID, clientName]);
        return updateUserIndex();
      }
    };
    return jQuery(function() {
      docElems["currentWinnerName"] = document.getElementById("jCurrentWinnerName");
      docElems["currentWinnerImage"] = document.getElementById("jCurrentWinnerImage");
      docElems["prizeName"] = document.getElementById("");
      jDocument.bind(oloEvents.JOINED_ROOM, drawUserPanel);
      jDocument.bind(oloEvents.RECEIVE_USERVO, pushToUserVO);
      return jDocument.bind(oloEvents.REMOVE_USERVO, removeFromUserVO);
    });
  };
  OloChatComponent = (function() {
    var chatInput, chatPane, clientJoined, closeConnectionMessage, displayChatMessage, messageListener, receiveChatMessage, sendMessageToRoomFn, userSignedOutMessage;
    OloChatComponent = function() {};
    chatPane = null;
    chatInput = null;
    displayChatMessage = function(messageClass, message, user) {
      var msgSpan, msgUser;
      msgSpan = void 0;
      msgUser = void 0;
      msgSpan = document.createElement("span");
      msgSpan.className = messageClass;
      if (user) {
        msgUser = document.createElement("label");
        msgUser.innerHTML = user;
        msgSpan.appendChild(msgUser);
      }
      msgSpan.appendChild(document.createTextNode(message));
      msgSpan.appendChild(document.createElement("br"));
      chatPane.appendChild(msgSpan);
      if (chatPane.childNodes.length > 700) {
        chatPane.removeChild(chatPane.firstChild);
      }
      return chatPane.scrollTop = chatPane.scrollHeight;
    };
    sendMessageToRoomFn = function(event) {
      var msg;
      msg = void 0;
      msg = chatInput.value;
      msg = (msg != null ? msg : msg.trim());
      if (msg != null) {
        jDocument.trigger(oloEvents.SEND_UPC_MESSAGE, [UPC.SEND_MESSAGE_TO_ROOMS, "CHAT_MESSAGE", roomID, "true", "", msg]);
      }
      chatInput.value = "";
      return chatInput.focus();
    };
    closeConnectionMessage = function() {
      return displayChatMessage("systemChatMessage", "Game connection closed.");
    };
    userSignedOutMessage = function(event, clientID, clientName) {
      if (isDevEnvironment) {
        console.log("userSignedOutMessage");
        console.log(arguments);
      }
      return displayChatMessage("systemChatMessage", clientName + " left the game.");
    };
    receiveChatMessage = function(event, className, msg, userName) {
      return displayChatMessage(className, msg, userName);
    };
    messageListener = function(event, messageName, broadcastType, fromClientID, roomID, message, orbiterClientId) {
      var className, userName;
      switch (messageName) {
        case "CHAT_MESSAGE":
          className = null;
          userName = null;
          if (orbiterClientId === fromClientID) {
            return displayChatMessage("myChatMessage", message, "me : ");
          } else {
            userName = oloGlobals.getUserName(fromClientID);
            return displayChatMessage("userChatMessage", message, userName + " : ");
          }
      }
    };
    clientJoined = function(event, userVO) {
      var userName;
      if (isDevEnvironment) {
        console.log("clientJoined");
        console.log(arguments);
      }
      userName = userVO[oloGlobals.clientCodes.USER_DISPLAY_NAME];
      return displayChatMessage("systemChatMessage", userName + " joined the game.");
    };
    jQuery(function() {
      chatPane = document.getElementById("chatPane");
      chatInput = document.getElementById("outgoingChat");
      jDocument.bind(oloEvents.SERVER_MESSAGE, messageListener);
      jDocument.bind(oloEvents.CLIENT_JOINED, clientJoined);
      jDocument.bind(oloEvents.SEND_CHAT_MESSAGE, sendMessageToRoomFn);
      jDocument.bind(oloEvents.CONNECTION_CLOSE, closeConnectionMessage);
      return jDocument.bind(oloEvents.CLIENT_LEFT, userSignedOutMessage);
    });
    return OloChatComponent;
  })();
  sendChatMessage = function() {
    return jDocument.trigger(oloEvents.SEND_CHAT_MESSAGE);
  };
  acceptTermsForSeat = function() {
    var checkObj;
    checkObj = document.getElementById("checkCondition");
    if ((checkObj != null) && checkObj.checked === true) {
      return true;
    } else {
      messagePopup("Please accept the terms.");
    }
    return false;
  };
  redirectToPlayNow = function(gameInstId) {
    var urlToRe, _this;
    _this = this;
    urlToRe = ofbizUrl + "playnowGame?gameInstId=" + gameInstId;
    return jQuery.ajax(function() {
      return {
        url: urlToRe,
        success: function(data) {
          return jQuery("#gameScreenPanel").html(data);
        }
      };
    });
  };
  jQuery(function() {
    jDocument.bind("room:ZS", printOnConsole);
    jDocument.bind("room:AR", printOnConsole);
    return jDocument.bind("room:FR", noUserExist);
  });
  noUserExist = function() {
    if (oloGlobals.roomVars.FR === "2") {
      messagePopup("Game cancel!!! <br/>  Insufficient Users in Game");
      return jQuery("#gameBetPanel").hide();
    }
  };
  printOnConsole = function(obj, val) {
    var i, roundObj, roundObjs, roundStr, roundVOs;
    if ((obj != null) && (obj.type != null) && (val != null)) {
      if (isDevEnvironment) {
        console.log(obj.type, " : ", val);
      }
      if (obj.type === "room:AR") {
        roundVOs = {};
        roundObjs = jQuery.parseJSON(val);
        for (i in roundObjs) {
          roundStr = roundObjs[i];
          roundObj = jQuery.parseJSON(roundStr);
          roundVOs[i] = roundObj;
        }
        if (isDevEnvironment) {
          console.log("RoundVOs :", roundVOs);
        }
      }
      if (obj.type === "room:BV") {
        roundVOs = {};
        roundObjs = jQuery.parseJSON(val);
        for (i in roundObjs) {
          roundStr = roundObjs[i];
          roundObj = jQuery.parseJSON(roundStr);
          if (roundObj["PR"] != null) {
            roundObj["PR"] = jQuery.parseJSON(roundObj["PR"]);
          }
          roundVOs[i] = roundObj;
        }
        if (isDevEnvironment) {
          return console.log("TilesVOs :", roundVOs);
        }
      }
    }
  };
  addEventHandler = function(node, evtType, func, isCapture) {
    if (window && window.addEventListener) {
      return node.addEventListener(evtType, func, isCapture);
    } else {
      return node.attachEvent("on" + evtType, func);
    }
  };
  removeEventHandler = function(node, evtType, func, isCapture) {
    if (window && window.removeEventListener) {
      return node.removeEventListener(evtType, func, isCapture);
    } else {
      return node.detachEvent("on" + evtType, func);
    }
  };
  removeClassName = function(node, cls) {
    var reg;
    reg = void 0;
    if ((node != null) && node.className) {
      reg = new RegExp("(\\s|^)" + cls + "(\\s|$)");
      return node.className = node.className.replace(reg, " ");
    }
  };
  bets = {};
  boardVo = {};
  responseVo = {};
  ZalerioGame = (function() {
    var DEFAULT_PLAYER_IMG_URL, betChangeCode, betChangeVOs, betsPanelIndexVO, boardVOCodes, boardVOs, board_X, board_Y, coordCodes, currPlayerFigVOs, currentBets, currentBetsIdx, currentRoundBidPlaced, customSetDragImage, docElems, drawBetPanel, drawGameBoard, drawResponseTiles, figureDetailsVO, flag_zoomTrue, getTileClass, handleDragEnterNew, handleDragStart, handleDragStartWithinBoard, handleDragleave, handleDragoverNew, handleDropNew, initBoard, initRoundBets, internalDNDType, messageListener, parseCoord, parseCoordsAsNum, parseRounds, parseToGameBoard, playerBetTiles, reDrawBetsPanel, refreshGameBoard, refreshRoundsPanel, resetDropZoneOnGameBoard, roundBets, roundVOs, roundVOsIdx, sendPlaceBetToServer, tileClassOverload, tilesIdxVOs, updateBoardVars, updateFigureDetails, updateFlagZoomTrue, zalerioCMDListners, zalerioMapType, _this;
    ZalerioGame = function() {};
    _this = this;
    docElems = {};
    DEFAULT_PLAYER_IMG_URL = "/olotheme/images/fbDefaultUser.gif";
    tilesIdxVOs = {};
    currentBets = {};
    currentBetsIdx = {};
    betsPanelIndexVO = {};
    currentRoundBidPlaced = -1;
    internalDNDType = "text/x-betiddata";
    tileClassOverload = {
      BASE_TILE_CLASS: {
        N: "box-blank box-black",
        Z: "box-blankZoom box-blackZoom"
      },
      OTHER_TURN: {
        N: "box-previousRoundOtherPlayer",
        Z: "box-previousRoundOtherPlayerZoom"
      },
      PRV_CURRPLYR_CORRECT_TILE: {
        N: "box-previousRoundCurrentPlayerCorrect",
        Z: "box-previousRoundCurrentPlayerCorrectZoom"
      },
      PRV_CURRPLYR_INCORRECT_TILE: {
        N: "box-previousRoundCurrentPlayerIncorrect",
        Z: "box-previousRoundCurrentPlayerIncorrectZoom"
      },
      CURRENT_CORRECT_TILE: {
        N: "box-currentRoundCorrect",
        Z: "box-currentRoundCorrectZoom"
      },
      CURRENT_INCORRECT_TILE: {
        N: "box-currentRoundIncorrect",
        Z: "box-currentRoundIncorrectZoom"
      },
      CURR_PLYR_FIG_COMPLETE: {
        N: "box-dizitCompleted",
        Z: "box-dizitCompletedZoom"
      },
      CURR_PLYR_NEWBET: {
        N: "box-newBet",
        Z: "box-newBetZoom"
      },
      JOKER_BET: {
        N: "joker",
        Z: "jokerZoom"
      },
      SUPPER_JOKER_BET: {
        N: "superJoker",
        Z: "superJokerZoom"
      }
    };
    flag_zoomTrue = false;
    currPlayerFigVOs = {};
    playerBetTiles = {};
    boardVOCodes = {
      TILE_COUNT: "BC",
      PLAYER_INFO_OBJ: "PR",
      FIGURE_ID: "CF",
      BET_WINNER: "BW"
    };
    betChangeCode = {
      PLAYER_SEAT_ID: "PS",
      TILE_COUNT: "BC",
      BET_OBJ: "PB",
      ROUND_ID: "PR"
    };
    betChangeVOs = {};
    boardVOs = {};
    zalerioCMDListners = {
      ORIG_FIGS: "OF",
      BET_RESPONSE: "PB",
      BET_CHANGES: "CB",
      RESIGN_GAME: "RG",
      CLOSE_INVITE: "CI",
      RIGHT_HUD: "MT",
      DECLINE_STATUS: "DG"
    };
    flag_roundDrawn = false;
    coordCodes = {
      COORD_COUNT: "BC",
      COORD_NUM: "CN",
      COORD_X: "CX",
      COORD_Y: "CY"
    };
    zalerioMapType = {
      ORIG_MAP: {
        code: "OF",
        className: "box-RevealingNumber"
      }
    };
    roundVOsIdx = {};
    board_X = null;
    board_Y = null;
    roundBets = null;
    roundVOs = {};
    figureDetailsVO = {};
    initBoard = function() {
      var boardDimension;
      if (isDevEnvironment) {
        console.log("BoardXY : " + oloGlobals.roomVars[oloGlobals.roomCodes.BOARD_XY]);
      }
      boardDimension = oloGlobals.roomVars[oloGlobals.roomCodes.BOARD_XY].split(":");
      board_X = boardDimension[0];
      board_Y = boardDimension[1];
      return drawGameBoard();
    };
    initRoundBets = function() {
      if (isDevEnvironment) {
        console.log("Round Bets : " + oloGlobals.roomVars[oloGlobals.roomCodes.ROUND_NOOFBETS]);
      }
      roundBets = oloGlobals.roomVars[oloGlobals.roomCodes.ROUND_NOOFBETS];
      return reDrawBetsPanel();
    };
    parseRounds = function(el, val) {
      var i, obj;
      if (isDevEnvironment) {
        console.log("parse Ar data : " + oloGlobals.roomVars[oloGlobals.roomCodes.ROOM_ALLROUNDS]);
      }
      obj = jQuery.parseJSON(val);
      roundVOs = {};
      for (i in obj) {
        roundVOs[i] = jQuery.parseJSON(obj[i]);
      }
      return refreshRoundsPanel();
    };
    refreshRoundsPanel = function() {
      var el, lastEl, lastRoundId, roundEndTimeTTL, roundId;
      if (!flag_roundDrawn) {
        drawRoundsPanel();
      }
      lastRoundId = null;
      lastEl = null;
      for (roundId in roundVOs) {
        el = roundVOsIdx[roundId];
        roundEndTimeTTL = parseInt(roundVOs[roundId]["EM"]);
        if (roundEndTimeTTL > 0) {
          el.className = "notPlayedRound";
        } else {
          el.className = "doneRound";
        }
        if (roundId === oloGlobals.roomVars[oloGlobals.roomCodes.CURRENTROUND]) {
          el.className = "currentRound";
        }
        lastEl = el;
        lastRoundId = roundId;
      }
      if (lastEl && lastRoundId) {
        if (lastRoundId === oloGlobals.roomVars[oloGlobals.roomCodes.CURRENTROUND]) {
          return lastEl.className = "currentFinalRound";
        } else {
          return lastEl.className = "finalRound";
        }
      }
    };
    drawRoundsPanel = function(elementDiv) {
      var aHrefElem, aHrefElemClone, cnt, gameRoundulElem, liElem, roundId;
      if (typeof elementDiv === 'undefined') {
        gameRoundulElem = document.getElementById("gameScore-round");
        roundVOsIdx = {};
      } else {
        gameRoundulElem = elementDiv;
        roundVOsIdxRightHUD = {};
      }
      gameRoundulElem.innerHTML = "";
      cnt = 0;
      aHrefElemClone = null;
      for (roundId in roundVOs) {
        cnt++;
        liElem = document.createElement("li");
        aHrefElem = document.createElement("a");
        aHrefElem.href = "#";
        aHrefElem.className = "notPlayedRound";
        aHrefElem.innerHTML = roundVOs[roundId]["RN"];
        if (isDevEnvironment) {
          console.log("roundVo : ", roundId);
        }
        liElem.appendChild(aHrefElem);
        if (typeof elementDiv === 'undefined') {
          roundVOsIdx[roundId] = aHrefElem;
        } else {
          roundVOsIdxRightHUD[cnt] = aHrefElem;
        }
        gameRoundulElem.appendChild(liElem);
        aHrefElemClone = aHrefElem;
      }
      if (cnt > 0) {
        aHrefElemClone.innerHTML = "Final";
        return flag_roundDrawn = true;
      }
    };
    reDrawBetsPanel = function() {
      var count, currentBetId, el, flag_alreadyUsed, i, k, playButtonEl, usedBetId, _results;
      try {
        if (tutorial === true) {
          return;
        }
      } catch (_error) {}
      playButtonEl = document.getElementById("placeBetOnServer");
      if (currentRoundBidPlaced > 0) {
        i = 0;
        while ((0 <= roundBets ? i < roundBets : i > roundBets)) {
          currentBetId = "bet_" + i;
          el = betsPanelIndexVO[currentBetId];
          el.className = "betsAlreadyPlaced";
          el.dragBet = 0;
          if (el.draggable != null) {
            el.draggable = false;
          }
          removeEventHandler(el, "dragstart", handleDragStart, false);
          if (0 <= roundBets) {
            i++;
          } else {
            i--;
          }
        }
        playButtonEl.href = "#Already Placed Bets";
        playButtonEl.className = 'bet_done';
        playButtonEl.parentNode.setAttribute("class", "bottomHUDbuttons-play-gray");
        return removeEventHandler(playButtonEl, "click", sendPlaceBetRequest, true);
      } else {
        count = 0;
        for (k in currentBets) {
          count++;
        }
        if (count < 9) {
          playButtonEl.parentNode.setAttribute("class", "bottomHUDbuttons-play-gray");
        } else {
          playButtonEl.parentNode.setAttribute("class", "");
        }
        if (!flag_roundBetsDrawn) {
          drawBetPanel();
        }
        _results = [];
        i = 0;
        while ((0 <= roundBets ? i < roundBets : i > roundBets)) {
          currentBetId = "bet_" + i;
          el = betsPanelIndexVO[currentBetId];
          flag_alreadyUsed = false;
          for (k in currentBets) {
            if (!__hasProp_.call(currentBets, k)) {
              continue;
            }
            usedBetId = currentBets[k];
            if (usedBetId === currentBetId) {
              flag_alreadyUsed = true;
              break;
            }
          }
          if (flag_alreadyUsed) {
            el.className = "usedDraggableBets";
            el.dragBet = 0;
            if (el.draggable != null) {
              el.draggable = false;
            }
            removeEventHandler(el, "dragstart", handleDragStart, false);
          } else {
            el.className = "draggableBets";
            el.dragBet = 1;
            if (el.draggable != null) {
              el.draggable = true;
            }
            addEventHandler(el, "dragstart", handleDragStart, false);
          }
          playButtonEl.href = "#Place Bets";
          playButtonEl.className = "";
          _results.push(addEventHandler(playButtonEl, "click", sendPlaceBetToServer, true));
          if (0 <= roundBets) {
            i++;
          } else {
            i--;
          }
        }
        return _results;
      }
    };
    drawBetPanel = function() {
      var betsPanel, currentBetId, divAnc, divNbrPanel, i, _results;
      betsPanelIndexVO = {};
      betsPanel = document.getElementById("gameBetPanel");
      betsPanel.innerHTML = "";
      _results = [];
      i = 0;
      while ((0 <= roundBets ? i < roundBets : i > roundBets)) {
        currentBetId = "bet_" + i;
        divNbrPanel = document.createElement("li");
        divNbrPanel.className = "draggableBets";
        divNbrPanel.id = currentBetId;
        if (divNbrPanel.draggable != null) {
          divNbrPanel.draggable = true;
        }
        addEventHandler(divNbrPanel, "dragstart", handleDragStart, false);
        divAnc = document.createElement("a");
        divAnc.className = "nbrs";
        divAnc.id = "new-" + i;
        bets[i] = divAnc.id;
        divNbrPanel.appendChild(divAnc);
        betsPanel.appendChild(divNbrPanel);
        betsPanelIndexVO[currentBetId] = divNbrPanel;
        _results.push(flag_roundBetsDrawn = true);
        if (0 <= roundBets) {
          i++;
        } else {
          i--;
        }
      }
      return _results;
    };
    customSetDragImage = function(e) {
      var dragIcon;
      dragIcon = document.createElement("img");
      dragIcon.src = baseUrl + "/images/zalerio_1.2/3.ingame_board/stand/stand_tile_pickup.png";
      dragIcon.width = 45;
      return e.dataTransfer.setDragImage(dragIcon, 35, 30);
    };
    handleDragStart = function(e) {
      if (isDevEnvironment) {
        console.log(e.target.id);
      }
      customSetDragImage(e);
      e.dataTransfer.setData(internalDNDType, this.id);
      e.target.className += " moving";
      if (isDevEnvironment) {
        console.log(e.target, e.target.className);
        return console.log("drag started!");
      }
    };
    handleDragStartWithinBoard = function(e) {
      var betId;
      betId = this.getAttribute("placedBetId");
      customSetDragImage(e);
      e.dataTransfer.setData(internalDNDType, betId);
      e.target.className += " moving";
      if (isDevEnvironment) {
        console.log(e.target, e.target.className);
        return console.log("drag started!");
      }
    };
    parseCoordsAsNum = function(coordX, coordY) {
      return (coordY * board_X) + coordX;
    };
    drawGameBoard = function() {
      var csBlankTileClassName, elBr, gameWallDiv, gameWallTileDiv, i, j, tileIdx;
      gameWallDiv = document.getElementById("gamewall");
      gameWallDiv.setAttribute("dropzone", "move s:text/x-betiddata");
      addEventHandler(gameWallDiv, "drop", handleDropNew, false);
      addEventHandler(gameWallDiv, "dragover", handleDragoverNew, false);
      addEventHandler(gameWallDiv, "dragenter", handleDragEnterNew, false);
      addEventHandler(gameWallDiv, "dragleave", handleDragleave, false);
      gameWallDiv.innerHTML = "";
      i = 0;
      while ((0 <= board_Y ? i < board_Y : i > board_Y)) {
        j = 0;
        while ((0 <= board_X ? j < board_X : j > board_X)) {
          csBlankTileClassName = "box-blank box-black";
          gameWallTileDiv = document.createElement("div");
          gameWallTileDiv.className = csBlankTileClassName;
          tileIdx = parseCoordsAsNum(j, i);
          gameWallTileDiv.id = "boardTile-" + tileIdx;
          gameWallTileDiv.setAttribute("tileIdx", tileIdx);
          if (j === (board_X - 1)) {
            gameWallTileDiv.className = csBlankTileClassName + " boardRowLastTile";
          }
          tilesIdxVOs[tileIdx] = gameWallTileDiv;
          gameWallDiv.appendChild(gameWallTileDiv);
          if (0 <= board_X) {
            j++;
          } else {
            j--;
          }
        }
        if (0 <= board_Y) {
          i++;
        } else {
          i--;
        }
      }
      elBr = document.createElement("br");
      elBr.setAttribute("clear", "all");
      return gameWallDiv.appendChild(elBr);
    };
    getTileClass = function(tileClassOverLoadObj) {
      if (flag_zoomTrue) {
        if (tileClassOverLoadObj) {
          if (tileClassOverLoadObj.N) {
            if (tileClassOverLoadObj.Z) {
              return " " + tileClassOverLoadObj.N + " " + tileClassOverLoadObj.Z;
            } else {
              return " " + tileClassOverLoadObj.N + " ";
            }
          }
        }
      } else {
        if (tileClassOverLoadObj ? tileClassOverLoadObj.N : void 0) {
          return " " + tileClassOverLoadObj.N + " ";
        }
      }
      return " ";
    };
    refreshGameBoard = function() {
      var csBlankTileClassName, currentEl, currentFigId, currentSeatId, currentTileClass, currentTilePriority, currentTileVal, dropEnable, dropEnableVal, flag, lastRound, oldDraggableState, playerSeatId, playersObjs, tileIdx;
      csBlankTileClassName = getTileClass(tileClassOverload.BASE_TILE_CLASS);
      currentTileClass = "";
      currentTileVal = "";
      currentEl = null;
      currentSeatId = oloGlobals.clientVars[oloGlobals.clientCodes.USER_SEAT_ID];
      currentTilePriority = 0;
      for (tileIdx in tilesIdxVOs) {
        flag = false;
        if (!__hasProp_.call(tilesIdxVOs, tileIdx)) {
          continue;
        }
        currentEl = tilesIdxVOs[tileIdx];
        currentTilePriority = 0;
        currentTileClass = csBlankTileClassName;
        dropEnable = true;
        currentEl.draggable = false;
        currentEl.dragBet = 0;
        currentTileVal = "";
        oldDraggableState = currentEl.draggable;
        if (boardVOs[tileIdx] != null) {
          if (boardVOs[tileIdx][boardVOCodes.FIGURE_ID]) {
            currentFigId = boardVOs[tileIdx][boardVOCodes.FIGURE_ID];
            if (currentFigId.indexOf("_NUMERIC_12") !== -1 || currentFigId.indexOf("_NUMERIC_13") !== -1 || currentFigId.indexOf("_NUMERIC_14") !== -1 || currentFigId.indexOf("_NUMERIC_15") !== -1 || currentFigId.indexOf("_NUMERIC_16") !== -1 || currentFigId.indexOf("_NUMERIC_17") !== -1) {
              dropEnable = false;
              currentTileClass = csBlankTileClassName + getTileClass(tileClassOverload.JOKER_BET);
              currentTileVal = "";
            } else if (currentFigId.indexOf("_NUMERIC_11") !== -1) {
              dropEnable = false;
              currentTileClass = csBlankTileClassName + getTileClass(tileClassOverload.SUPPER_JOKER_BET);
              currentTileVal = "";
            }
          }
          if (!boardVOs[tileIdx][boardVOCodes.FIGURE_ID]) {
            currentTileClass = csBlankTileClassName + getTileClass(tileClassOverload.OTHER_TURN);
            currentTileVal = "";
          }
          playersObjs = boardVOs[tileIdx][boardVOCodes.PLAYER_INFO_OBJ];
          for (playerSeatId in playersObjs) {
            if (playerSeatId === currentSeatId) {
              dropEnable = false;
              currentFigId = boardVOs[tileIdx][boardVOCodes.FIGURE_ID];
              if (currentFigId) {
                currentTileClass = csBlankTileClassName + getTileClass(tileClassOverload.PRV_CURRPLYR_CORRECT_TILE);
                if (isDevEnvironment) {
                  console.log("figureDetailsVO", currentFigId);
                }
                if (currPlayerFigVOs[currentFigId] === figureDetailsVO[currentFigId]) {
                  currentTilePriority = 10;
                  currentTileClass = csBlankTileClassName + getTileClass(tileClassOverload.CURR_PLYR_FIG_COMPLETE);
                  if (currentFigId.indexOf("_NUMERIC_12") !== -1 || currentFigId.indexOf("_NUMERIC_13") !== -1 || currentFigId.indexOf("_NUMERIC_14") !== -1 || currentFigId.indexOf("_NUMERIC_15") !== -1 || currentFigId.indexOf("_NUMERIC_16") !== -1 || currentFigId.indexOf("_NUMERIC_17") !== -1) {
                    currentTileClass = csBlankTileClassName + getTileClass(tileClassOverload.JOKER_BET);
                    flag = true;
                  } else if (currentFigId.indexOf("_NUMERIC_11") !== -1) {
                    currentTileClass = csBlankTileClassName + getTileClass(tileClassOverload.SUPPER_JOKER_BET);
                    flag = true;
                  }
                }
                if (flag) {
                  currentTileVal = "";
                } else {
                  currentTileVal = boardVOs[tileIdx][boardVOCodes.TILE_COUNT];
                }
              } else {
                currentTileClass = csBlankTileClassName + getTileClass(tileClassOverload.PRV_CURRPLYR_INCORRECT_TILE);
                currentTileVal = " ";
              }
              break;
            }
          }
        }
        lastRound = false;
        if (oloGlobals.roomVars.FR === "1") {
          lastRound = true;
        }
        if (!lastRound) {
          if ((currentBets[tileIdx] != null) && currentBets[tileIdx] !== null) {
            dropEnable = false;
            currentEl.draggable = true;
            currentEl.dragBet = 1;
            currentEl.setAttribute("placedBetId", currentBets[tileIdx]);
            currentTileClass = csBlankTileClassName + getTileClass(tileClassOverload.CURR_PLYR_NEWBET);
            addEventHandler(currentEl, "dragstart", handleDragStartWithinBoard, false);
            currentTileVal = "";
          }
          if (currentTilePriority < 10 && (betChangeVOs[tileIdx] != null)) {
            if (parseInt(betChangeVOs[tileIdx]) === 1) {
              currentTileClass = csBlankTileClassName + getTileClass(tileClassOverload.CURR_PLYR_NEWBET);
              currentTileVal = "";
            } else {
              currentTileClass = csBlankTileClassName + getTileClass(tileClassOverload.CURR_PLYR_NEWBET);
              currentTileVal = "";
            }
          }
        }
        if ((parseInt(tileIdx) % board_X) === 0) {
          currentTileClass += " boardRowLastTile ";
        }
        dropEnableVal = null;
        if (currentEl.id === "boardTile-35" && isDevEnvironment) {
          console.log("[dropEnable:", dropEnable, ",currentEl:", currentEl.getAttribute("droppable"));
        }
        switch (currentEl.getAttribute("droppable")) {
          case "-1":
            if (dropEnable === true) {
              dropEnableVal = "1";
            }
            break;
          case "0":
            if (dropEnable === true) {
              dropEnableVal = "1";
            }
            break;
          case "1":
            if (dropEnable === false) {
              dropEnableVal = "0";
            }
            break;
          case "2":
            if (dropEnable === false) {
              dropEnableVal = "0";
            }
        }
        if (currentEl.getAttribute("droppable") == null) {
          currentEl.setAttribute("droppable", "1");
        }
        if (dropEnableVal !== null) {
          currentEl.setAttribute("droppable", dropEnableVal);
        }
        currentEl.className = currentTileClass;
        currentEl.innerHTML = currentTileVal;
      }
      return resetDropZoneOnGameBoard();
    };
    resetDropZoneOnGameBoard = function() {
      var currentEl, tileIdx, _results;
      _results = [];
      for (tileIdx in tilesIdxVOs) {
        if (!__hasProp_.call(tilesIdxVOs, tileIdx)) {
          continue;
        }
        currentEl = tilesIdxVOs[tileIdx];
        switch (currentEl.getAttribute("droppable")) {
          case "1":
            _results.push(currentEl.setAttribute("droppable", "2"));
            break;
          case "0":
            _results.push(currentEl.setAttribute("droppable", "-1"));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };
    handleDragoverNew = function(e) {
      if (e.preventDefault) {
        e.preventDefault();
      }
      return false;
    };
    handleDragEnterNew = function(e) {
      var betId;
      if (e.dataTransfer != null) {
        betId = e.dataTransfer.getData(internalDNDType);
        if (betId != null) {
          if ((e.target != null) && (e.target.getAttribute != null) && e.target.getAttribute("droppable") === "2") {
            e.target.className += " box-drophover";
            return true;
          }
        }
      }
      return false;
    };
    handleDropNew = function(e) {
      var betId, betTileIdx, betd;
      if (playSound) {
        titledrop.play();
      }
      if (e.target != null) {
        removeClassName(e.target, "box-drophover");
      }
      if (e.preventDefault) {
        e.preventDefault();
      }
      if (e.stopPropagation) {
        e.stopPropagation();
      }
      betId = e.dataTransfer.getData(internalDNDType);
      if ((betId != null) && betId !== "") {
        if (e.target.getAttribute("droppable") === "2") {
          if (!currentBets[e.target.getAttribute("tileidx")]) {
            currentBetsIdx[betId] = e.target.getAttribute("tileidx");
            currentBets = {};
            for (betd in currentBetsIdx) {
              if (!__hasProp_.call(currentBetsIdx, betd)) {
                continue;
              }
              betTileIdx = currentBetsIdx[betd];
              currentBets[betTileIdx] = betd;
            }
            refreshGameBoard();
            reDrawBetsPanel();
            return true;
          }
        }
      }
      return false;
    };
    handleDragleave = function(e) {
      if (e.target != null) {
        return removeClassName(e.target, "box-drophover");
      }
    };
    sendPlaceBetToServer = function() {
      var betCtr, betId, betPanelId, betStr, betTileId, playButtonEl;
      if (isDevEnvironment) {
        console.log("bet Validation before sen  ding the request t  o server");
      }
      if (tutorial === true) {
        return;
      }
      playButtonEl = document.getElementById("placeBetOnServer");
      if (playButtonEl.className === "bet_done") {
        messagePopup("Not so fast.... lets wait for your friends to play their turn");
        return;
      }
      betStr = "";
      betCtr = 0;
      if (playSound) {
        playbutton.play();
      }
      for (betPanelId in currentBetsIdx) {
        if (!__hasProp_.call(currentBetsIdx, betPanelId)) {
          continue;
        }
        betTileId = currentBetsIdx[betPanelId];
        betId = betTileId.replace(/\bboardTile-\b/, "");
        betStr += (betStr === "" ? betId : ":" + betId);
        ++betCtr;
        if (isDevEnvironment) {
          console.log("bets[" + betCtr + "] : " + betId);
        }
      }
      if (betStr === "") {
        if (isDevEnvironment) {
          console.log("No bets placed!");
        }
        messagePopup("No bets placed!");
        return false;
      } else if (betCtr !== 9) {
        if (isDevEnvironment) {
          console.log("Bets count is less then 9!");
        }
        messagePopup("Not so fast... please place all of your 9 tiles!");
        return false;
      } else {
        if (isDevEnvironment) {
          console.log("every thing is fine s    end the bets to the server");
        }
        placeBetsToServer(betStr);
      }
      return false;
    };
    parseCoord = function(coordNum, boardX, boardY) {
      var coordX, coordY;
      boardX = boardX || board_X;
      boardY = boardY || board_Y;
      coordX = coordNum % board_X;
      coordY = coordNum / board_X;
      return {
        x: coordX,
        y: coordY
      };
    };
    parseToGameBoard = function(mapType, mapData) {
      var ctr, curCoordId, curCoordObj, _results;
      if ((mapType != null) && (mapType.code != null) && (mapType.className != null)) {
        ctr = 0;
        _results = [];
        for (curCoordId in mapData) {
          curCoordObj = mapData[curCoordId];
          _results.push(jQuery("#boardTile-" + (parseInt(curCoordId))).addClass(mapType.className));
        }
        return _results;
      }
    };
    messageListener = function(event, messageName, broadcastType, fromClientID, roomID, message) {
      var i, newCoordObj, parsedObj, playerBetsChangeObj, scoreArray, seatId, seatIdArray, tileId, usersObject, x;
      switch (messageName) {
        case zalerioCMDListners.DECLINE_STATUS:
          if (parseInt(message) === 1) {
            messagePopup(popupMSG.declineInvite());
            jQuery(".draggableBets").attr("draggable", "false");
            jQuery(".resignPopup").hide();
            return jQuery("#gameBetPanel").hide();
          }
          break;
        case zalerioCMDListners.RIGHT_HUD:
          usersObject = jQuery.parseJSON(message);
          for (i in usersObject) {
            usersObject[i] = jQuery.parseJSON(usersObject[i]);
            usersObject[i].PLRS = jQuery.parseJSON(usersObject[i].PLRS);
            scoreArray = [];
            seatIdArray = [];
            for (seatId in usersObject[i].PLRS) {
              usersObject[i].PLRS[seatId] = jQuery.parseJSON(usersObject[i].PLRS[seatId]);
              scoreArray[seatId] = parseInt(usersObject[i].PLRS[seatId].PSC);
              seatIdArray.push(seatId);
            }
            seatIdArray.sort(function(x, y) {
              return scoreArray[y] - scoreArray[x];
            });
            usersObject[i].PLSC = {};
            for (x in seatIdArray) {
              usersObject[i].PLSC[x] = seatIdArray[x];
            }
          }
          oloGlobals.msgVars.RH = usersObject;
          if (isDevEnvironment) {
            console.log('MT', oloGlobals.msgVars.RH);
          }
          return jDocument.trigger("client:" + oloGlobals.msgCodes.RIGHT_HUD, usersObject);
        case zalerioCMDListners.CLOSE_INVITE:
          if (0 === message) {
            return messagePopup('Sorry!!! Unable to Close Invite, <br /> Plese try again..');
          } else {
            jQuery(".status_show_popup").remove();
            return jQuery(".gdWrapper").remove();
          }
          break;
        case zalerioCMDListners.RESIGN_GAME:
          if (message === 0) {
            messagePopup('Sorry!!! Unable to Resign, \n Plese try again..');
            return jQuery("#gameBetPanel").show();
          } else {
            resignStatus = 1;
            jQuery(".draggableBets").attr("draggable", "false");
            jQuery("#gameBetPanel").hide();
            return jQuery(".resignPopup").hide();
          }
          break;
        case zalerioCMDListners.ORIG_FIGS:
          newCoordObj = jQuery.parseJSON(message);
          if (isDevEnvironment) {
            console.log(newCoordObj);
          }
          return parseToGameBoard(zalerioMapType.ORIG_MAP, newCoordObj);
        case zalerioCMDListners.BET_RESPONSE:
          parsedObj = jQuery.parseJSON(message);
          if (isDevEnvironment) {
            return console.log("zalerioCMDListners.BET_RESPONSE if failed : ", parsedObj);
          }
          break;
        case zalerioCMDListners.BET_CHANGES:
          betChangeVOs = {};
          playerBetsChangeObj = jQuery.parseJSON(message);
          if (isDevEnvironment) {
            console.log("zalerioCMDListners.BET_CHANGES : ", playerBetsChangeObj);
          }
          currentBets = {};
          currentBetsIdx = {};
          for (i in playerBetsChangeObj) {
            if (i === "PB") {
              playerBetTiles = jQuery.parseJSON(playerBetsChangeObj[i]);
              for (tileId in playerBetTiles) {
                betChangeVOs[tileId] = playerBetTiles[tileId];
              }
            }
          }
          currentRoundBidPlaced = playerBetsChangeObj["BC"];
          jDocument.trigger(oloEvents.CLIENT_BETS_PLACED, currentRoundBidPlaced);
          reDrawBetsPanel();
          return refreshGameBoard();
      }
    };
    drawResponseTiles = function(responseObj) {
      var correctFlag, tempTileElem, tileId, _results;
      if (isDevEnvironment) {
        console.log("responseObj in drawResponseTiles(): ", responseObj);
      }
      _results = [];
      for (tileId in responseObj) {
        correctFlag = responseObj[tileId];
        tempTileElem = document.getElementById("boardTile-" + tileId);
        if (correctFlag === 0 || correctFlag === 1) {
          if (correctFlag === 1) {
            tempTileElem.className = tempTileElem.className + " box-MyTurn";
            _results.push(tempTileElem.innerHTML = "N");
          } else {
            tempTileElem.className = tempTileElem.className + " box-MyWorngTurn";
            _results.push(tempTileElem.innerHTML = "X");
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    updateBoardVars = function(evt, val) {
      var boardObj, boardObjs, boardStr, el, i, noOfTiles, playerTiles, seatId;
      currPlayerFigVOs = {};
      playerBetTiles = {};
      el = document.getElementById("loadingGame");
      if ((el != null) && (el.style != null)) {
        el.style.display = "none";
      }
      boardVOs = {};
      boardObjs = jQuery.parseJSON(val);
      for (i in boardObjs) {
        boardStr = boardObjs[i];
        boardObj = jQuery.parseJSON(boardStr);
        if (boardObj["PR"] != null) {
          boardObj["PR"] = jQuery.parseJSON(boardObj["PR"]);
          for (seatId in boardObj["PR"]) {
            if (boardObj["CF"] != null) {
              playerTiles = {};
              if (playerBetTiles[seatId]) {
                playerTiles = playerBetTiles[seatId];
              }
              playerTiles[i] = 1;
              playerBetTiles[seatId] = playerTiles;
              if (oloGlobals.clientVars[oloGlobals.clientCodes.USER_SEAT_ID] === seatId) {
                noOfTiles = 0;
                if (currPlayerFigVOs[boardObj["CF"]] != null) {
                  noOfTiles = currPlayerFigVOs[boardObj["CF"]];
                }
                currPlayerFigVOs[boardObj["CF"]] = ++noOfTiles;
              }
            }
          }
        }
        boardVOs[i] = boardObj;
      }
      return refreshGameBoard();
    };
    updateFigureDetails = function(evt, val) {
      figureDetailsVO = {};
      if (val != null) {
        return figureDetailsVO = jQuery.parseJSON(val);
      }
    };
    updateFlagZoomTrue = function(val) {
      if ((val != null) && val === true) {
        flag_zoomTrue = true;
      } else {
        flag_zoomTrue = false;
      }
      return refreshGameBoard();
    };
    jQuery(function() {
      var isMousingOver, jTileHoverDiv, jTileHoverDivContent, tileHoverDivBids;
      jQuery("#zoomBtm").click(function() {
        jQuery(".playersInfo").toggleClass("playersInfoZoom");
        jQuery(".turnBase").toggleClass("turnBaseZoom");
        jQuery(".playableArea").toggleClass("playableAreaZoom");
        jQuery("#gamewall").toggleClass("game_wallZoom");
        jQuery(".box-MyTurn").toggleClass("box-MyTurnZoom");
        jQuery(".box-MyWorngTurn").toggleClass("box-MyWorngTurnZoom");
        jQuery(".box-RevealingNumber").toggleClass("box-RevealingNumberZoom");
        jQuery(".box-OthersTurn").toggleClass("box-OthersTurnZoom");
        jQuery(".box-priviousOthersTurn").toggleClass("box-priviousOthersTurnZoom");
        jQuery(".panelZoom").toggleClass("panelZoomZoom");
        jQuery(".zoomBtm").toggleClass("zoomBtmZoom");
        jQuery(".dragFromHere").toggleClass("dragFromHereZoom");
        jQuery(".nbrs").toggleClass("nbrsZoom");
        jQuery(".nbrs-Panel").toggleClass("nbrs-PanelZoom");
        return updateFlagZoomTrue((flag_zoomTrue ? false : true));
      });
      jTileHoverDiv = jQuery("#showOnMouseOver");
      tileHoverDivBids = jTileHoverDiv.find(".roundForBidsCount")[0];
      jTileHoverDivContent = jQuery(jTileHoverDiv.find(".roundForBidsCountUl")[0]);
      if (isDevEnvironment) {
        console.log("jTileHoverDiv : ", jTileHoverDiv);
      }
      isMousingOver = false;
      jQuery("#gamewall").delegate(".box-previousRoundOtherPlayer,.box-previousRoundCurrentPlayerIncorrect,.box-previousRoundCurrentPlayerCorrect,.box-dizitCompleted,.joker,.superJoker", "mouseover mouseout", function(e) {
        var currentFigId, elLeft, elTop, i, imgSrc, leftMajor, noOfCols, noOfRows, playerSeatId, playersObjs, seatId, strOut, tileIdx, tileNo, topMajor, usersObject;
        usersObject = jQuery.parseJSON(oloGlobals.roomVars.AP);
        for (i in usersObject) {
          usersObject[i] = jQuery.parseJSON(usersObject[i]);
          usersObject[i].PLRS = jQuery.parseJSON(usersObject[i].PLRS);
          for (seatId in usersObject[i].PLRS) {
            usersObject[i].PLRS[seatId] = jQuery.parseJSON(usersObject[i].PLRS[seatId]);
          }
        }
        if (e.type === "mouseover" && !isMousingOver) {
          tileIdx = this.getAttribute("tileIdx");
          if (isDevEnvironment) {
            console.log("offset :", this.offsetLeft + " : " + this.offsetTop);
          }
          if (boardVOs[tileIdx] != null) {
            playersObjs = boardVOs[tileIdx][boardVOCodes.PLAYER_INFO_OBJ];
            strOut = "";
            imgSrc = "";
            for (playerSeatId in playersObjs) {
              if (isDevEnvironment) {
                console.log("mouseover", oloGlobals.userVOsSeatIndex[playerSeatId].UR);
              }
              if ((usersObject[i].PLRS[playerSeatId] != null) && (usersObject[i].PLRS[playerSeatId].PFB != null)) {
                imgSrc = "https://graph.facebook.com/" + usersObject[i].PLRS[playerSeatId].PFB + "/picture";
              } else {
                imgSrc = DEFAULT_PLAYER_IMG_URL;
              }
              if (usersObject[i].PLRS[playerSeatId] != null) {
                currentFigId = boardVOs[tileIdx][boardVOCodes.FIGURE_ID];
                if (typeof currentFigId !== "undefined") {
                  if (currentFigId.indexOf("_NUMERIC_12") !== -1 || currentFigId.indexOf("_NUMERIC_13") !== -1 || currentFigId.indexOf("_NUMERIC_14") !== -1 || currentFigId.indexOf("_NUMERIC_15") !== -1 || currentFigId.indexOf("_NUMERIC_16") !== -1 || currentFigId.indexOf("_NUMERIC_17") !== -1) {
                    strOut += "<li><img src='" + baseUrl + "/images/zalerio_1.2/3.ingame_board/board/player_countindicator_joker.png' alt='Joker' ></li>";
                  } else {
                    if (currentFigId.indexOf("_NUMERIC_11") !== -1) {
                      strOut += "<li><img src='" + baseUrl + "/images/zalerio_1.2/3.ingame_board/board/player_countindicator_Superjoker.png' alt='Supper Joker' ></li>";
                    }
                  }
                }
                strOut += "<li><img src='" + imgSrc + "' alt='" + usersObject[i].PLRS[playerSeatId].PFB + "' ></li>";
              }
            }
            jTileHoverDivContent.html(strOut);
            tileHoverDivBids.innerHTML = boardVOs[tileIdx][boardVOCodes.TILE_COUNT];
            tileNo = parseInt(tileIdx);
            noOfRows = tileNo / board_X;
            noOfCols = tileNo % board_Y;
            leftMajor = (noOfRows > board_Y / 2 ? false : true);
            topMajor = (noOfCols > board_X / 2 ? false : true);
            elLeft = e.pageX + 10;
            elTop = e.pageY;
            if (this.offsetLeft > 300) {
              elLeft = elLeft - $("#showOnMouseOver").width() - 10;
            }
            if (this.offsetTop > 400) {
              elTop = elTop - $("#showOnMouseOver").height();
            }
            $(".roundForBidsCount").remove();
            jTileHoverDiv.show().offset({
              top: elTop,
              left: elLeft
            });
          }
          isMousingOver = true;
          if (isDevEnvironment) {
            return console.log("enlarged");
          }
        } else if (e.type === "mouseout") {
          jTileHoverDiv.hide();
          isMousingOver = false;
          if (isDevEnvironment) {
            return console.log("resetting");
          }
        }
      });
      jDocument.bind("room:" + oloGlobals.roomCodes.FIGURE_DETAILS, updateFigureDetails);
      jDocument.bind("room:" + oloGlobals.roomCodes.BOARD_XY, initBoard);
      jDocument.bind("room:" + oloGlobals.roomCodes.ROUND_NOOFBETS, initRoundBets);
      jDocument.bind("room:" + oloGlobals.roomCodes.ROOM_ALLROUNDS, parseRounds);
      jDocument.bind("room:" + oloGlobals.roomCodes.BOARDVARS, updateBoardVars);
      jDocument.bind("room:" + oloGlobals.roomCodes.CURRENTROUND, refreshRoundsPanel);
      return jDocument.bind(oloEvents.SERVER_MESSAGE, messageListener);
    });
    return ZalerioGame;
  }).call(this);
  basicFx = function() {
    var docElems, pageRefresh;
    docElems = {};
    return pageRefresh = function() {
      var clearTimerFn, enableTimerFn, returnObj, timer;
      timer = null;
      enableTimerFn = function() {
        var _this;
        _this = this;
        return timer = setTimeout(function() {
          return location.reload(true);
        }, 5000);
      };
      clearTimerFn = function() {
        return timer = null;
      };
      return returnObj = {
        isTimerEnabled: function() {
          if (timer) {
            return true;
          } else {
            return false;
          }
        },
        enableTimer: function() {
          return enableTimerFn();
        },
        clearTimer: function() {
          return clearTimerFn();
        }
      };
    };
  };
  basicFx();
  updateClock = function() {
    var classForTime, divisor_for_minutes, divisor_for_seconds, flag_gameJustStarted, flag_gameStarted, hours, minutes, seconds, secs, timeRemaining;
    secs = ttl--;
    if (secs > 0) {
      timeRemaining = secs + " secs";
      classForTime = "clockRed";
      flag_gameStarted = true;
      if (gameDuration < secs) {
        secs = secs - gameDuration;
        flag_gameStarted = false;
      }
      if (!flag_gameJustStarted && flag_gameStarted) {
        flag_gameJustStarted = true;
        refreshBidPanel();
      }
      if ((secs > 100 && flag_gameStarted) || !flag_gameStarted) {
        hours = Math.floor(secs / (60 * 60));
        divisor_for_minutes = secs % (60 * 60);
        minutes = Math.floor(divisor_for_minutes / 60);
        divisor_for_seconds = divisor_for_minutes % 60;
        seconds = Math.ceil(divisor_for_seconds);
        timeRemaining = pad2(hours) + " : " + pad2(minutes) + " : " + pad2(seconds);
        if (flag_gameStarted) {
          classForTime = "clockBlack";
        } else {
          timeRemaining = "Starting in : " + timeRemaining;
          classForTime = "clockBefore";
        }
      }
      if ((typeof docElems !== "undefined" && docElems !== null) && (docElems["clock"] != null)) {
        docElems["clock"].className = classForTime;
        return docElems["clock"].innerHTML = timeRemaining;
      }
    } else {
      timeRemaining = "Time Up!";
      if ((typeof docElems !== "undefined" && docElems !== null) && (docElems["clock"] != null)) {
        return docElems["clock"].innerHTML = timeRemaining;
      }
    }
  };
  changeTotalUserCount = function() {
    if ((typeof docElems !== "undefined" && docElems !== null) && (docElems["totalPlayers"] != null)) {
      return docElems["totalPlayers"].innerHTML = oloGlobals.roomVars[oloGlobals.roomCodes.USER_TOTAL];
    }
  };
  changeActiveUserCount = function() {
    if ((typeof docElems !== "undefined" && docElems !== null) && (docElems["totalOnlinePlayers"] != null)) {
      return docElems["totalOnlinePlayers"].innerHTML = oloGlobals.roomVars[oloGlobals.roomCodes.USER_COUNT];
    }
  };
  messageListener = function() {
    return {};
  };
  winnerChange = function() {
    if (isDevEnvironment) {
      return console.log("Winner changed!", arguments);
    }
  };
  jQuery(function() {
    jDocument.bind(oloEvents.SERVER_MESSAGE, messageListener);
    jDocument.bind(oloEvents.WINNER_CHANGE, winnerChange);
    jDocument.bind("room:" + oloGlobals.roomCodes.USER_TOTAL, changeTotalUserCount);
    return jDocument.bind("room:" + oloGlobals.roomCodes.USER_COUNT, changeActiveUserCount);
  });
  OloClockComponent = (function() {
    var docElems, flag_gameJustStarted;
    OloClockComponent = function() {};
    flag_gameJustStarted = false;
    docElems = {};
    updateClock = function(event, ttl) {
      var classForTime, divisor_for_minutes, divisor_for_seconds, flag_gameStarted, gameDuration, gameTimeText, hours, minutes, seconds, secs, timeRemaining;
      gameDuration = oloGlobals.getGameDuration();
      secs = oloGlobals.getTtl();
      if (secs > 0) {
        timeRemaining = secs + " secs";
        classForTime = "clockRed";
        flag_gameStarted = true;
        if (gameDuration < secs) {
          secs = secs - gameDuration;
          flag_gameStarted = false;
        }
        if (!flag_gameJustStarted && flag_gameStarted) {
          flag_gameJustStarted = true;
        }
        gameTimeText = "Ending in";
        if ((secs > 100 && flag_gameStarted) || !flag_gameStarted) {
          hours = Math.floor(secs / (60 * 60));
          divisor_for_minutes = secs % (60 * 60);
          minutes = Math.floor(divisor_for_minutes / 60);
          divisor_for_seconds = divisor_for_minutes % 60;
          seconds = Math.ceil(divisor_for_seconds);
          timeRemaining = pad2(hours) + " : " + pad2(minutes) + " : " + pad2(seconds);
          if (flag_gameStarted) {
            classForTime = "clockBlack";
          } else {
            gameTimeText = "Starting in";
            timeRemaining = timeRemaining;
            classForTime = "clockBefore";
          }
        }
        if ((docElems != null) && (docElems["clock"] != null)) {
          docElems["gameTimeText"].innerHTML = (gameTimeText ? gameTimeText : "");
          docElems["clock"].className = classForTime;
          return docElems["clock"].innerHTML = timeRemaining;
        }
      } else {
        timeRemaining = "Time Up!";
        if ((docElems != null) && (docElems["clock"] != null)) {
          docElems["gameTimeText"].innerHTML = "";
          return docElems["clock"].innerHTML = timeRemaining;
        }
      }
    };
    jQuery(function() {
      docElems = {
        clock: document.getElementById("clock"),
        gameTimeText: document.getElementById("gameTimeText")
      };
      return jDocument.bind(oloEvents.UPDATE_LOCAL_TTL, updateClock);
    });
    return OloClockComponent;
  })();
  ZalerioUserComponent = (function() {
    var DEFAULT_PLAYER_IMG_URL, MAX_PLAYERS_IN_A_GAME, PLAYER_OFFLINE_IMG_URL, PLAYER_ONLINE_IMG_URL, UserPanelMov, changeWinner, createGameDetailsPopup, currentGameUsersData, currentNoOfUsers, docElems, docElemsCodes, drawCarousel, drawUserPanel, flag_drawUserPanel, onClickAddRedrict, onClickRedrict, onMouseOverShowDetails, panelMoveMagnitudeCodes, pushToUserVO, refreshUserPanel, removeFromUserVO, renderUserVOToUserPanel, setPlayersInfo, showAllUsers, showFinalScore, showInviteStatus, updateLeftHud, updatePlayerPlate, updateRightHud, updateTotalSeats, updateUserIndex, updateUserIndexForPartyId, updateUserIndexForPartyIdViaOfflinePlayers, updateUserIndexForSeatId, updateUserIndexForSeatIdViaOfflinePlayers, updateZalerioScores, userDivCodes, userPanelMov, userScoreArr, userScoreObj, userStatusCurrent, userVOsDivIndex, userVOsLen;
    ZalerioUserComponent = function() {};
    onClickAddRedrict = function(userRecodeDivValue, gameID, remove) {
      var game;
      game = gameID;
      jQuery(jQuery(userRecodeDivValue)).click(function() {
        if (typeof remove !== 'undefined') {
          jQuery(remove).remove();
        }
        return gameChangeListener(game);
      });
    };
    onClickRedrict = function(userRecodeDivValue, gameID) {
      var game;
      game = void 0;
      game = gameID;
      return window.location = "http://" + document.domain + baseUrl + "/gameinst/play?gameinst_id=" + game;
    };
    flag_drawUserPanel = false;
    docElems = {};
    userPanelMov = null;
    docElemsCodes = {
      LEFT_HUD_YOUR_TURN: "leftHudYourTurn",
      LEFT_HUD_MY_TURN: "leftHudMyTurn"
    };
    DEFAULT_PLAYER_IMG_URL = "";
    PLAYER_ONLINE_IMG_URL = "";
    PLAYER_OFFLINE_IMG_URL = "";
    showAllUsers = "ALL";
    userStatusCurrent = 10;
    userVOsLen = 0;
    userVOsDivIndex = {};
    MAX_PLAYERS_IN_A_GAME = 0;
    userScoreObj = {};
    userScoreArr = [];
    currentNoOfUsers = 0;
    userDivCodes = {
      USER_PIC_TOP_HUD_LI: "userPicTopHUDLi",
      USER_PIC_TOP_HUD_IMG: "userPicTopHUDImg",
      USER_PIC_TOP_HUD_NAME: "userPicTopHUDName",
      USER_PIC_TOP_HUD_LAST_PLAY: "userPicTopHUDLastPlay",
      USER_PIC_TOP_HUD_PLAY_STATUS: "userPicTopHUDPlayStatus",
      USER_PIC_TOP_HUD_REMIND: "userPicTopHUDRemind",
      USER_TOP_HUD_TR: "userTopHUDTr",
      USER_TOP_HUD_SERAIL: "userTopHUDSerial",
      USER_TOP_HUD_NAME: "userTopHUDName",
      USER_TOP_HUD_SCORE: "userTopHUDScore",
      USER_TOP_HUD_ONLINE: "userTopHUDOnline",
      USER_TOP_HUD_BETSTATUS: "userTopHUDBetstatus",
      USER_LEFT_HUDMT_LI: "userLeftHUDMTLi",
      USER_LEFT_HUDMT_IMG: "userLeftHUDMTImg",
      USER_LEFT_HUDMT_NAME: "userLeftHUDMTName",
      USER_LEFT_HUDMT_BET_MSG: "userLeftHUDMTBetMsg",
      USER_LEFT_HUDMT_LASTBET_MSG: "userLeftHUDMTLastbetMsg",
      USER_LEFT_HUDYT_LI: "userLeftHUDYTLi",
      USER_LEFT_HUDYT_IMG: "userLeftHUDYTImg",
      USER_LEFT_HUDYT_NAME: "userLeftHUDYTName",
      USER_LEFT_HUDYT_BET_MSG: "userLeftHUDYTBetMsg",
      USER_LEFT_HUDYT_LASTBET_MSG: "userLeftHUDYTLastbetMsg"
    };
    updateUserIndex = function() {
      var i;
      oloGlobals.userVOsIndex = {};
      for (i in oloGlobals.userVOs) {
        oloGlobals.userVOsIndex[oloGlobals.userVOs[i][oloGlobals.clientCodes.USER_UNION_ID]] = oloGlobals.userVOs[i];
      }
      updateUserIndexForPartyId();
      return updateUserIndexForSeatId();
    };
    updateUserIndexForPartyId = function() {
      var i, _results;
      i = void 0;
      _results = void 0;
      _results = [];
      for (i in oloGlobals.userVOs) {
        if (!oloGlobals.userVOsPartyIndex[oloGlobals.userVOs[i][oloGlobals.clientCodes.USER_PARTY_ID]]) {
          _results.push(oloGlobals.userVOsPartyIndex[oloGlobals.userVOs[i][oloGlobals.clientCodes.USER_PARTY_ID]] = oloGlobals.userVOs[i]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    updateUserIndexForSeatId = function() {
      var i, _results;
      _results = [];
      for (i in oloGlobals.userVOs) {
        if (!oloGlobals.userVOsSeatIndex[oloGlobals.userVOs[i][oloGlobals.clientCodes.USER_SEAT_ID]]) {
          _results.push(oloGlobals.userVOsSeatIndex[oloGlobals.userVOs[i][oloGlobals.clientCodes.USER_SEAT_ID]] = oloGlobals.userVOs[i]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    updateUserIndexForPartyIdViaOfflinePlayers = function() {
      var i, _results;
      _results = [];
      for (i in oloGlobals.offlinePlayers) {
        if (!oloGlobals.userVOsPartyIndex[oloGlobals.offlinePlayers[i][oloGlobals.clientCodes.USER_PARTY_ID]]) {
          _results.push(oloGlobals.userVOsPartyIndex[oloGlobals.offlinePlayers[i][oloGlobals.clientCodes.USER_PARTY_ID]] = oloGlobals.offlinePlayers[i]);
        }
      }
      return _results;
    };
    updateUserIndexForSeatIdViaOfflinePlayers = function() {
      var i, _results;
      i = void 0;
      _results = void 0;
      _results = [];
      for (i in oloGlobals.offlinePlayers) {
        if (!oloGlobals.userVOsSeatIndex[oloGlobals.offlinePlayers[i][oloGlobals.clientCodes.USER_SEAT_ID]]) {
          _results.push(oloGlobals.userVOsSeatIndex[oloGlobals.offlinePlayers[i][oloGlobals.clientCodes.USER_SEAT_ID]] = oloGlobals.offlinePlayers[i]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    refreshUserPanel = function() {
      var arrLen, userCtr, userPos, userVO;
      arrLen = void 0;
      userCtr = void 0;
      userPos = void 0;
      userVO = void 0;
      userCtr = 0;
      if (isDevEnvironment) {
        console.log("refreshUserPanel : ", userScoreArr);
      }
      arrLen = userScoreArr.length;
      userPos = 0;
      while ((0 <= arrLen ? userPos < arrLen : userPos > arrLen)) {
        userVO = oloGlobals.userVOsSeatIndex[userScoreArr[userPos]];
        if (isDevEnvironment) {
          console.log(userVO);
        }
        if (userVO) {
          renderUserVOToUserPanel(userCtr++, userVO, null, userPos + 1);
        }
        if (0 <= arrLen) {
          userPos++;
        } else {
          userPos--;
        }
      }
      if ((typeof getGameInstWithFriends !== "undefined" && getGameInstWithFriends !== null) && !oloGlobals.offlinePlayers && getGameInstWithFriends(oloGlobals.roomVars[oloGlobals.roomCodes.ROOM_ID])) {
        oloGlobals.offlinePlayers = getGameInstWithFriends(oloGlobals.roomVars[oloGlobals.roomCodes.ROOM_ID]);
        updateUserIndexForPartyIdViaOfflinePlayers();
        updateUserIndexForSeatIdViaOfflinePlayers();
        return changeWinner();
      }
    };
    renderUserVOToUserPanel = function(idx, userVO, userOffline, userSerial) {
      var userDisplayName, userFacebookImgUrl;
      userDisplayName = void 0;
      userFacebookImgUrl = void 0;
      userOffline = userOffline || false;
      if (userVOsDivIndex[idx] && userVO && userVO[oloGlobals.clientCodes.USER_ID]) {
        userVOsDivIndex[idx][userDivCodes.USER_TOP_HUD_TR].style.visibility = "visible";
        userDisplayName = "-";
        if (userVO[oloGlobals.clientCodes.USER_DISPLAY_NAME] != null) {
          userDisplayName = userVO[oloGlobals.clientCodes.USER_DISPLAY_NAME];
        }
        userVOsDivIndex[idx][userDivCodes.USER_TOP_HUD_NAME].innerHTML = userDisplayName;
        userFacebookImgUrl = DEFAULT_PLAYER_IMG_URL;
        if ((userVO[oloGlobals.clientCodes.USER_FACEBOOK_ID] != null) && userVO[oloGlobals.clientCodes.USER_FACEBOOK_ID].length > 2) {
          userFacebookImgUrl = "https://graph.facebook.com/" + userVO[oloGlobals.clientCodes.USER_FACEBOOK_ID] + "/picture";
        }
        userVOsDivIndex[idx][userDivCodes.USER_TOP_HUD_SERAIL].innerHTML = userSerial + ".";
        if (userVO[oloGlobals.clientCodes.USER_SEAT_ID]) {
          userVOsDivIndex[idx][userDivCodes.USER_TOP_HUD_SCORE].innerHTML = userScoreObj[userVO[oloGlobals.clientCodes.USER_SEAT_ID]];
        } else {
          userVOsDivIndex[idx][userDivCodes.USER_TOP_HUD_SCORE].innerHTML = 0;
        }
        if (oloGlobals.roomVars.PP.indexOf(userVO[oloGlobals.clientCodes.USER_SEAT_ID]) !== -1) {
          $(userVOsDivIndex[idx][userDivCodes.USER_TOP_HUD_BETSTATUS]).removeClass("arrowclass");
        } else {
          $(userVOsDivIndex[idx][userDivCodes.USER_TOP_HUD_BETSTATUS]).addClass("arrowclass");
        }
        if (isDevEnvironment) {
          return console.log(userScoreObj);
        }
      }
    };
    drawUserPanel = function() {
      var i, playerListTopHUDTbl, s, scoreArray, seatId, seatIdArray, userObject, userTopHUDBetsPlacedTd, userTopHUDNameTd, userTopHUDScoreTd, userTopHUDSerialNumTd, userTopHUDTr, usersInfoObject, usersInfoObjectx, usersObject, usersScoreObject, x, y;
      if (isDevEnvironment) {
        console.log("drawUserPanel");
      }
      playerListTopHUDTbl = document.getElementById("userScoreHUDMain");
      playerListTopHUDTbl.innerHTML = "";
      usersObject = jQuery.parseJSON(oloGlobals.roomVars.AP);
      if (isDevEnvironment) {
        console.log("Score Board left (oloGlobals.roomVars.AP)", usersObject);
      }
      for (i in usersObject) {
        usersInfoObject = jQuery.parseJSON(usersObject[i]);
      }
      i = 0;
      usersInfoObject = jQuery.parseJSON(usersInfoObject.PLRS);
      scoreArray = [];
      seatIdArray = [];
      usersInfoObjectx = [];
      for (seatId in usersInfoObject) {
        usersInfoObjectx[seatId] = jQuery.parseJSON(usersInfoObject[seatId]);
        scoreArray[seatId] = parseInt(usersInfoObjectx[seatId].PSC);
        seatIdArray.push(seatId);
      }
      seatIdArray.sort(function(x, y) {
        return scoreArray[y] - scoreArray[x];
      });
      for (y in seatIdArray) {
        x = seatIdArray[y];
        userObject = jQuery.parseJSON(usersInfoObject[x]);
        if (userObject.GSS === 3 || userObject.GSS === 5) {
          continue;
        }
        if (isDevEnvironment) {
          console.log("drawing for user #", i + 1);
        }
        userTopHUDTr = document.createElement("tr");
        userTopHUDTr.className = "userScoreHUD_player";
        userTopHUDBetsPlacedTd = document.createElement("td");
        userTopHUDBetsPlacedTd.className = "userScoreHUD_playerBetPlacedNo arrowclass";
        userTopHUDBetsPlacedTd.innerHTML = "";
        if (userObject.CRS === 9) {
          userTopHUDBetsPlacedTd.className = "userScoreHUD_playerBetPlacedNo";
        }
        userTopHUDTr.appendChild(userTopHUDBetsPlacedTd);
        userTopHUDSerialNumTd = document.createElement("td");
        userTopHUDSerialNumTd.className = "userScoreHUD_playerSerial";
        userTopHUDSerialNumTd.innerHTML = ++i;
        userTopHUDTr.appendChild(userTopHUDSerialNumTd);
        userTopHUDNameTd = document.createElement("td");
        userTopHUDNameTd.className = "userScoreHUD_playerName";
        userTopHUDNameTd.innerHTML = "";
        if (userObject.PDN) {
          if (parseInt(userObject.PRE) !== 1) {
            if (parseInt(userObject.PON) === 0) {
              userTopHUDTr.className = "userScoreHUD_player GRAY";
            }
            userTopHUDNameTd.innerHTML = userObject.PDN;
          } else {
            if (parseInt(userObject.UI) === parseInt(oloGlobals.currentUserDBId)) {
              jQuery("#gameBetPanel").hide();
              jQuery(".draggableBets").attr("draggable", "false");
            }
            s = document.createElement("s");
            s.innerHTML = userObject.PDN;
            userTopHUDNameTd.appendChild(s);
            userTopHUDBetsPlacedTd.className = "userScoreHUD_playerBetPlacedNo";
          }
        }
        userTopHUDTr.appendChild(userTopHUDNameTd);
        userTopHUDScoreTd = document.createElement("td");
        userTopHUDScoreTd.className = "userScoreHUD_playerScore";
        if (userObject.PSC) {
          userTopHUDScoreTd.innerHTML = userObject.PSC;
        } else {
          try {
            usersScoreObject = jQuery.parseJSON(oloGlobals.roomVars.ZS);
            userTopHUDScoreTd.innerHTML = typeof usersScoreObject[x] !== "undefined" ? usersScoreObject[x] : 0;
          } catch (_error) {}
        }
        userTopHUDTr.appendChild(userTopHUDScoreTd);
        playerListTopHUDTbl.appendChild(userTopHUDTr);
      }
      flag_drawUserPanel = true;
      if (isDevEnvironment) {
        console.log("Draw score Panel Bord", userObject);
      }
      return refreshUserPanel();
    };
    updatePlayerPlate = function() {
      var currentUserLevel, currentUserObj;
      currentUserObj = jQuery.parseJSON(oloGlobals.clientVars.UINFO);
      if (isDevEnvironment) {
        console.log("Player Plate : ", currentUserObj);
      }
      jQuery("#currentUserName").text(currentUserObj.PDN);
      if (typeof currentUserObj.PL !== "undefined") {
        if (parseInt(currentUserObj.PL) === 0) {
          currentUserObj.PL = 1;
        }
        currentUserLevel = document.createElement("img");
        currentUserLevel.className = "userlevelbelt";
        currentUserLevel.src = baseUrl + "/images/zalerio_1.2/4.ingame_ui/carauselbelts_main_player/" + userLevelImgBig[parseInt(currentUserObj.PL) - 1];
        jQuery("#currentUserAreaImg .userlevelbelt").remove();
        return jQuery("#currentUserAreaImg").prepend(currentUserLevel);
      }
    };
    updateLeftHud = function() {
      var i, usersInfoObject, usersObject;
      usersObject = jQuery.parseJSON(oloGlobals.roomVars.AP);
      if (isDevEnvironment) {
        console.log("All Users Data (oloGlobals.roomVars.AP)", usersObject);
      }
      for (i in usersObject) {
        usersInfoObject = jQuery.parseJSON(usersObject[i]);
        break;
      }
      drawCarousel(usersInfoObject, "userTopPicHUDMain", i, "usercrousel");
      userPanelMov = new UserPanelMov(jQuery("#userTopPicHUDMain"), null, null, null, crouselObjSize(jQuery.parseJSON(usersInfoObject.PLRS)));
      jQuery("#navCarouselRight").unbind('click').click(function() {
        return userPanelMov.move("RIGHT", panelMoveMagnitudeCodes.ONE);
      });
      return jQuery("#navCarouselLeft").unbind('click').click(function() {
        return userPanelMov.move("LEFT", panelMoveMagnitudeCodes.ONE);
      });
    };
    drawCarousel = function(usersObject, appendto, gameLinkID, typeOfCarousel) {
      var acceptSpan, currentPlayerList, declineSpan, fbUser, remindUsersLeft, userAcceptDeclinedDiv, userAcceptDeclinedMsgDiv, userFacebookImgUrl, userObject, userRank, userRecodeDiv, userRecodeGameStartDateUserDiv, userRecodeImgDiv, userRecodeImgEl, userRecodeImgLevelEl, userRecodeLastPlayDiv, userRecodeLi, userRecodePlayStatusDiv, userRecodePlayerNameDiv, userRecodePlayerOnlineStatusDiv, userRecodePlayerRemindDiv, userRecodePlayerRoundNoDiv, userRecodePlayerTotalUserDiv, usersObjectPastRound, x, _results;
      currentPlayerList = document.getElementById(appendto);
      if (isDevEnvironment) {
        console.log("crousel usersobject", usersObject);
      }
      usersObjectPastRound = usersObject;
      usersObject = jQuery.parseJSON(usersObject.PLRS);
      remindUsersLeft = {};
      $("#" + appendto).empty();
      _results = [];
      for (x in usersObject) {
        userObject = jQuery.parseJSON(usersObject[x]);
        remindUsersLeft[userObject.PFB] = {
          GSS: userObject.GSS,
          CRS: userObject.CRS
        };
        if (userObject.GSS === 3 || userObject.GSS === 5) {
          continue;
        }
        userRecodeLi = document.createElement("li");
        userRecodeLi.style.display = "block";
        userRecodeDiv = document.createElement("div");
        userRecodeDiv.className = "userArea";
        userRecodeDiv.id = "thisgame_seat_" + x;
        userRecodeImgDiv = document.createElement("div");
        userRecodeImgDiv.className = "userAreaImg";
        userRecodeImgEl = document.createElement("img");
        userRecodeImgEl.className = "backendImage";
        userRecodeImgDiv.appendChild(userRecodeImgEl);
        if (typeof userObject.PL !== "undefined") {
          if (parseInt(userObject.PL) === 0) {
            userObject.PL = 1;
          }
          userRecodeImgLevelEl = document.createElement("img");
          userRecodeImgLevelEl.className = "userlevelbelt otherbelt";
          userRecodeImgLevelEl.src = baseUrl + "/images/zalerio_1.2/4.ingame_ui/carauselbelts_otherplayers/" + userLevelImg[parseInt(userObject.PL) - 1];
          userRecodeImgDiv.appendChild(userRecodeImgLevelEl);
        }
        userRecodePlayerNameDiv = document.createElement("div");
        userRecodePlayerNameDiv.className = "userAreaName";
        userRecodeLastPlayDiv = document.createElement("div");
        userRecodeLastPlayDiv.className = "userLastPlayed";
        userRecodePlayStatusDiv = document.createElement("div");
        userRecodePlayStatusDiv.className = "userPlayStatus";
        userRecodePlayerRemindDiv = document.createElement("div");
        userRecodePlayerRemindDiv.className = "userRemind";
        userRecodePlayerRoundNoDiv = document.createElement("div");
        userRecodePlayerRoundNoDiv.className = "userRoundNo";
        userRecodePlayerOnlineStatusDiv = document.createElement("div");
        userRecodePlayerOnlineStatusDiv.className = "userOnlineStatus";
        userAcceptDeclinedDiv = document.createElement("div");
        userAcceptDeclinedDiv.className = "userAcceptDeclinedDiv";
        userAcceptDeclinedMsgDiv = document.createElement("div");
        userAcceptDeclinedMsgDiv.innerHTML = "Invited you (NEW)";
        acceptSpan = document.createElement("span");
        acceptSpan.className = "acceptSpan";
        acceptSpan.innerHTML = "Accept";
        acceptSpan.onclick = function() {
          return acceptInvitation(gameLinkID);
        };
        declineSpan = document.createElement("span");
        declineSpan.innerHTML = "Decline";
        declineSpan.className = "declineSpan";
        declineSpan.onclick = function() {
          return sendDeclinedToServer(userObject.PSI);
        };
        userRecodeDiv.appendChild(userRecodeImgDiv);
        userRecodeDiv.appendChild(userRecodePlayerNameDiv);
        userRecodePlayStatusDiv.innerHTML = "not played yet";
        if (parseInt(userObject.GSS) !== 1) {
          userRecodeDiv.appendChild(userRecodeLastPlayDiv);
          userRecodeDiv.appendChild(userRecodePlayStatusDiv);
          userRecodeDiv.appendChild(userRecodePlayerRemindDiv);
        } else if (parseInt(userObject.UI) === parseInt(oloGlobals.currentUserDBId)) {
          userAcceptDeclinedDiv.appendChild(userAcceptDeclinedMsgDiv);
          userAcceptDeclinedDiv.appendChild(acceptSpan);
          userAcceptDeclinedDiv.appendChild(declineSpan);
          userRecodeDiv.appendChild(userAcceptDeclinedDiv);
          userRecodePlayStatusDiv.innerHTML = '';
        } else {
          userRecodeDiv.appendChild(userRecodePlayStatusDiv);
          userRecodeDiv.appendChild(userRecodePlayerRemindDiv);
          userRecodePlayStatusDiv.innerHTML = 'not accepted';
        }
        userRecodeDiv.appendChild(userRecodePlayerRoundNoDiv);
        userRecodeDiv.appendChild(userRecodePlayerOnlineStatusDiv);
        userRecodeLi.appendChild(userRecodeDiv);
        currentPlayerList.appendChild(userRecodeLi);
        userFacebookImgUrl = "https://graph.facebook.com/" + userObject.PFB + "/picture";
        userRecodeImgEl.src = userFacebookImgUrl;
        if (userObject.PDN) {
          userRecodePlayerNameDiv.innerHTML = userObject.PDN;
        }
        if (userObject.PLP) {
          userRecodeLastPlayDiv.innerHTML = userObject.PLP;
        }
        if (userObject.PCR) {
          userRecodePlayerRoundNoDiv.innerHTML = userObject.PCR;
        }
        if (typeOfCarousel && usersObjectPastRound.SD) {
          userRecodeGameStartDateUserDiv = document.createElement("div");
          userRecodeGameStartDateUserDiv.className = "userStartDate";
          userRecodeGameStartDateUserDiv.innerHTML = usersObjectPastRound.SD;
          userRecodeDiv.appendChild(userRecodeGameStartDateUserDiv);
        }
        if (typeOfCarousel === "pastGame" && usersObjectPastRound.TP && userObject.PR) {
          userRecodePlayerTotalUserDiv = document.createElement("div");
          userRecodePlayerTotalUserDiv.className = "userTotal";
          if (userObject.PR === "1") {
            userRank = userObject.PR + "<sup>st</sup>";
          } else if (userObject.PR === "2") {
            userRank = userObject.PR + "<sup>nd</sup>";
          } else if (userObject.PR === "3") {
            userRank = userObject.PR + "<sup>rd</sup>";
          } else {
            userRank = userObject.PR + "<sup>th</sup>";
          }
          userRecodePlayerTotalUserDiv.innerHTML = userRank + "/" + usersObjectPastRound.TP;
          userRecodeDiv.appendChild(userRecodePlayerTotalUserDiv);
        }
        if (userObject.PDN && oloGlobals.clientVars.UI) {
          if (userObject.CRS === 0) {
            if (oloGlobals.clientVars.UI === userObject.UI) {
              userRecodePlayerRemindDiv.innerHTML = "place your tiles...";
            } else {
              if (oloGlobals.clientVars.UI !== userObject.UI) {
                fbUser = {};
                fbUser[userObject.PFB] = {
                  GSS: userObject.GSS,
                  CRS: userObject.CRS
                };
                remindUserAdd(gameLinkID, remindUsersLeft, x, fbUser, userRecodePlayerRemindDiv);
                userRecodePlayerRemindDiv.innerHTML = "remind " + userObject.PDN.slice(0, 6);
              }
            }
          }
        }
        if (userObject.CRS === 0) {
          userRecodePlayStatusDiv.className = "userPlayStatus";
        } else if (userObject.CRS === 5) {
          userRecodePlayStatusDiv.innerHTML = '...playing now';
          userRecodePlayStatusDiv.className = "userPlayStatus green";
        } else if (userObject.CRS === 9) {
          userRecodePlayStatusDiv.innerHTML = "finished round";
          userRecodePlayStatusDiv.className = "userPlayStatus green";
        }
        if (userObject.PON === 1) {
          _results.push(userRecodePlayerOnlineStatusDiv.className = "userOnlineStatus status_online");
        } else {
          _results.push(userRecodePlayerOnlineStatusDiv.className = "userOnlineStatus");
        }
      }
      return _results;
    };
    onMouseOverShowDetails = function(urDiv, gameDetails, gameId) {
      return urDiv.onclick = function() {
        try {
          if (playSound) {
            selectbuttonSound.play();
          }
        } catch (_error) {}
        return createGameDetailsPopup(gameDetails, gameId);
      };
    };
    createGameDetailsPopup = function(gameDetails, gameId) {
      var el, gameSeatID, gdAllRoundDiv, gdDiv, gdPlaydiv, gdReminddiv, gdReturndiv, gdScoreCardBetsPlacedTd, gdScoreCardDiv, gdScoreCardNameTd, gdScoreCardScoreTd, gdScoreCardSerialNumTd, gdScoreCardTbl, gdScoreCardTr, gdScoreInfoDiv, gdUserImg, gdUserImgDiv, gdUserImgbelt, gdUsersImgdiv, i, index, lastEl, lastRoundId, remindUsersData, roundId, s, _i;
      jQuery('.gdWrapper').remove();
      gdDiv = document.createElement("div");
      gdDiv.className = 'gdWrapper  animated fadeInRight';
      gdScoreCardDiv = document.createElement("div");
      gdScoreCardDiv.className = 'gdScoreCardDiv';
      gdDiv.appendChild(gdScoreCardDiv);
      gdAllRoundDiv = document.createElement("div");
      gdAllRoundDiv.className = 'gdAllRoundDiv';
      gdAllRoundDiv.id = 'gdAllRoundDivId';
      gdScoreCardDiv.appendChild(gdAllRoundDiv);
      drawRoundsPanel(gdAllRoundDiv);
      try {
        for (roundId = _i = 1; _i <= 7; roundId = ++_i) {
          el = roundVOsIdxRightHUD[roundId];
          console.log('roundVOsIdx', roundVOsIdxRightHUD);
          if (roundId > parseInt(gameDetails.CR)) {
            el.className = "notPlayedRound";
          } else {
            el.className = "doneRound";
          }
          if (roundId === parseInt(gameDetails.CR)) {
            el.className = "currentRound";
          }
          lastEl = el;
          lastRoundId = roundId;
        }
        if (lastEl && lastRoundId) {
          if (lastRoundId === parseInt(gameDetails.CR)) {
            lastEl.className = "currentFinalRound";
          } else {
            lastEl.className = "finalRound";
          }
        }
      } catch (_error) {}
      gdScoreInfoDiv = document.createElement("div");
      gdScoreInfoDiv.className = 'gdScoreInfoDiv';
      gdScoreCardDiv.appendChild(gdScoreInfoDiv);
      gdScoreCardTbl = document.createElement("table");
      gdScoreInfoDiv.appendChild(gdScoreCardTbl);
      gdUsersImgdiv = document.createElement("div");
      gdUsersImgdiv.className = 'gdUsersImgdiv';
      gdDiv.appendChild(gdUsersImgdiv);
      gdReminddiv = document.createElement("div");
      gdReminddiv.className = 'gdReminddiv';
      gdDiv.appendChild(gdReminddiv);
      gdReturndiv = document.createElement("div");
      gdReturndiv.className = 'gdReturndiv';
      gdReturndiv.onclick = function() {
        try {
          if (playSound) {
            closebutton.play();
          }
        } catch (_error) {}
        return jQuery('.gdWrapper').remove();
      };
      gdDiv.appendChild(gdReturndiv);
      gdPlaydiv = document.createElement("div");
      gdPlaydiv.className = 'gdPlaydiv';
      gdDiv.appendChild(gdPlaydiv);
      if (gameId !== gameInstId) {
        onClickAddRedrict(gdPlaydiv, gameId, '.gdWrapper');
        gdPlaydiv.className = 'gdResumeDiv';
      } else {
        gdPlaydiv.onclick = function() {
          try {
            if (playSound) {
              closebutton.play();
            }
          } catch (_error) {}
          return jQuery('.gdWrapper').remove();
        };
      }
      i = 0;
      remindUsersData = {};
      for (index in gameDetails.PLSC) {
        gameSeatID = gameDetails.PLSC[index];
        remindUsersData[gameDetails.PLRS[gameSeatID].PFB] = {
          GSS: gameDetails.PLRS[gameSeatID].GSS,
          CRS: gameDetails.PLRS[gameSeatID].CRS
        };
        if (gameDetails.PLRS[gameSeatID].GSS === 5 || gameDetails.PLRS[gameSeatID].GSS === 3) {
          continue;
        }
        gdUserImgDiv = document.createElement("div");
        gdUserImgDiv.className = 'gdUserImgDiv user_offline';
        gdUserImg = document.createElement("img");
        gdUserImg.src = 'https://graph.facebook.com/' + gameDetails.PLRS[gameSeatID].PFB + '/picture';
        gdUserImg.className = 'gdUserImg';
        if (gameDetails.PLRS[gameSeatID].PON === 1) {
          gdUserImg.className = 'gdUserImg user_online';
        }
        gdUserImgbelt = document.createElement("img");
        gdUserImgbelt.src = baseUrl + "/images/zalerio_1.2/4.ingame_ui/carauselbelts_main_player/" + userLevelImgBig[parseInt(gameDetails.PLRS[gameSeatID].PL) - 1];
        gdUserImgbelt.className = 'gdUserImgbelt';
        gdUserImgDiv.appendChild(gdUserImgbelt);
        gdUserImgDiv.appendChild(gdUserImg);
        gdUsersImgdiv.appendChild(gdUserImgDiv);
        gdScoreCardTr = document.createElement("tr");
        gdScoreCardTr.className = "userScoreHUD_player";
        gdScoreCardBetsPlacedTd = document.createElement("td");
        gdScoreCardBetsPlacedTd.className = "userScoreHUD_playerBetPlacedNo arrowclass";
        gdScoreCardBetsPlacedTd.innerHTML = "";
        if (gameDetails.PLRS[gameSeatID].CRS === 9) {
          gdScoreCardBetsPlacedTd.className = "userScoreHUD_playerBetPlacedNo";
        }
        gdScoreCardTr.appendChild(gdScoreCardBetsPlacedTd);
        gdScoreCardSerialNumTd = document.createElement("td");
        gdScoreCardSerialNumTd.className = "userScoreHUD_playerSerial";
        gdScoreCardSerialNumTd.innerHTML = ++i;
        gdScoreCardTr.appendChild(gdScoreCardSerialNumTd);
        gdScoreCardNameTd = document.createElement("td");
        gdScoreCardNameTd.className = "userScoreHUD_playerName";
        gdScoreCardNameTd.innerHTML = "";
        if (gameDetails.PLRS[gameSeatID].PDN) {
          if (parseInt(gameDetails.PLRS[gameSeatID].PRE) !== 1) {
            if (parseInt(gameDetails.PLRS[gameSeatID].PON) === 0) {
              gdScoreCardTr.className = "userScoreHUD_player GRAY";
            }
            gdScoreCardNameTd.innerHTML = gameDetails.PLRS[gameSeatID].PDN;
          } else {
            if (parseInt(gameDetails.PLRS[gameSeatID].UI) === parseInt(oloGlobals.currentUserDBId)) {
              s = document.createElement("s");
              s.innerHTML = userObject.PDN;
              gdScoreCardNameTd.appendChild(s);
              gdScoreCardBetsPlacedTd.className = "userScoreHUD_playerBetPlacedNo";
            }
          }
        }
        gdScoreCardTr.appendChild(gdScoreCardNameTd);
        gdScoreCardScoreTd = document.createElement("td");
        gdScoreCardScoreTd.className = "userScoreHUD_playerScore";
        if (gameDetails.PLRS[gameSeatID].PSC) {
          gdScoreCardScoreTd.innerHTML = gameDetails.PLRS[gameSeatID].PSC;
        } else {
          gdScoreCardScoreTd.innerHTML = '0';
        }
        gdScoreCardTr.appendChild(gdScoreCardScoreTd);
        gdScoreCardTbl.appendChild(gdScoreCardTr);
      }
      try {
        if (playSound) {
          popupapperence.play();
        }
      } catch (_error) {}
      gdReminddiv.onclick = function() {
        remindUser(gameId, remindUsersData);
      };
      return jQuery('#active-screen').append(jQuery(gdDiv));
    };
    updateRightHud = function(event, message) {
      var divElement, gameId, gameSeatID, imgElement, index, rightHUD_theirturn, rightHUD_yourturn, urDiv, urGameEndDiv, urImageDiv, urInviteAcceptDiv, urInviteDeclineDiv, urInviteDiv, urRoundDiv;
      rightHUD_yourturn = document.getElementById('rightHUD-yourturn');
      rightHUD_theirturn = document.getElementById('rightHUD-theirturn');
      for (gameId in message) {
        if (document.getElementById("right_hud_" + gameId) === null) {
          urDiv = document.createElement("div");
          urDiv.className = "userArea";
          urDiv.id = "right_hud_" + gameId;
          if (gameInstId === gameId) {
            urDiv.className = "userArea selected";
          }
          urImageDiv = document.createElement("div");
          urImageDiv.className = "imageWrapper";
          urImageDiv.id = "right_hud_Images" + gameId;
          urDiv.appendChild(urImageDiv);
          if (typeof message[gameId].CR !== 'undefined') {
            urRoundDiv = document.createElement("div");
            urRoundDiv.innerHTML = message[gameId].CR;
            urRoundDiv.className = 'round_no';
            urDiv.appendChild(urRoundDiv);
          }
          if (typeof message[gameId].ED !== 'undefined') {
            urGameEndDiv = document.createElement("div");
            urGameEndDiv.innerHTML = message[gameId].ED;
            urGameEndDiv.className = 'game_end_time';
            urDiv.appendChild(urGameEndDiv);
          }
          for (index in message[gameId].PLSC) {
            gameSeatID = message[gameId].PLSC[index];
            if (message[gameId].PLRS[gameSeatID].GSS === 5 || message[gameId].PLRS[gameSeatID].GSS === 3) {
              continue;
            }
            if (typeof message[gameId].PLRS[gameSeatID].PFB !== 'undefined') {
              imgElement = document.createElement("img");
              imgElement.src = 'https://graph.facebook.com/' + message[gameId].PLRS[gameSeatID].PFB + '/picture';
              imgElement.setAttribute('alt', message[gameId].PLRS[gameSeatID].PFN);
              imgElement.className = message[gameId].PLRS[gameSeatID].PON === 1 ? "online" : "offline";
              imgElement.id = "who_am_i_" + gameSeatID;
              urImageDiv.appendChild(imgElement);
            }
            if (typeof message[gameId].PLRS[gameSeatID].GSS !== 'undefined') {
              if (message[gameId].PLRS[gameSeatID].GSS === 1 && oloGlobals.currentUserDBId === message[gameId].PLRS[gameSeatID].UI) {
                urInviteDiv = document.createElement("div");
                urInviteDiv.id = 'accept_decline_' + gameId;
                urInviteDiv.className = 'accept_decline';
                urInviteAcceptDiv = document.createElement("div");
                urInviteAcceptDiv.innerHTML = 'Accept';
                urInviteAcceptDiv.className = 'right_hud_accept';
                acceptInvitationAdd(urInviteAcceptDiv, gameId);
                urInviteDeclineDiv = document.createElement("div");
                urInviteDeclineDiv.innerHTML = 'Decline';
                urInviteDeclineDiv.className = 'right_hud_decline';
                declineInvitationAdd(urInviteDeclineDiv, gameSeatID, gameId);
                urInviteDiv.appendChild(urInviteAcceptDiv);
                urInviteDiv.appendChild(urInviteDeclineDiv);
                urDiv.appendChild(urInviteDiv);
              } else if (oloGlobals.currentUserDBId === message[gameId].PLRS[gameSeatID].UI) {
                onMouseOverShowDetails(urDiv, message[gameId], gameId);
              }
            }
          }
          if (parseInt(message[gameId].GS) === 1) {
            rightHUD_yourturn.appendChild(urDiv);
          } else if (parseInt(message[gameId].GS) === 2) {
            rightHUD_theirturn.appendChild(urDiv);
          }
        } else {
          if (parseInt(message[gameId].GS) === 0) {
            jQuery("#right_hud_" + gameId).remove();
            continue;
          } else {
            if (parseInt(message[gameId].GS) === 1) {
              if (jQuery("#right_hud_" + gameId).parent().attr('id') === 'rightHUD-theirturn') {
                divElement = jQuery("#right_hud_" + gameId).detach();
                divElement.appendTo('#rightHUD-yourturn');
              }
            } else if (parseInt(message[gameId].GS) === 2) {
              if (jQuery("#right_hud_" + gameId).parent().attr('id') === 'rightHUD-yourturn') {
                divElement = jQuery("#right_hud_" + gameId).detach();
                divElement.appendTo('#rightHUD-theirturn');
              }
            }
            if (typeof message[gameId].CR !== 'undefined') {
              jQuery("#right_hud_" + gameId).find('.round_no').text(message[gameId].CR);
            }
            if (typeof message[gameId].ED !== 'undefined') {
              jQuery("#right_hud_" + gameId).find('.game_end_time').html(message[gameId].ED);
            }
            for (gameSeatID in message[gameId].PLRS) {
              if (typeof message[gameId].PLRS[gameSeatID].PON !== 'undefined') {
                if (message[gameId].PLRS[gameSeatID].GSS === 5 || message[gameId].PLRS[gameSeatID].GSS === 3) {
                  jQuery("#who_am_i_" + gameSeatID).remove();
                } else {
                  imgElement = document.getElementById("who_am_i_" + gameSeatID);
                  imgElement.className = imgElement.className && message[gameId].PLRS[gameSeatID].PON ? "online" : "offline";
                }
              }
              if (typeof message[gameId].PLRS[gameSeatID].GSS !== 'undefined') {
                if (message[gameId].PLRS[gameSeatID].GSS !== 1 && oloGlobals.currentUserDBId === message[gameId].PLRS[gameSeatID].UI) {
                  jQuery('#accept_decline_' + gameId).remove();
                  urDiv = document.getElementById("right_hud_" + gameId);
                  onMouseOverShowDetails(urDiv, message[gameId], gameId);
                }
              }
            }
          }
        }
      }
      if (jQuery('#rightHUD-yourturn').find(".userArea").length === 0) {
        if (jQuery('#rightHUD-yourturn').find(".newCarouselblanktile").length === 0) {
          jQuery('#rightHUD-yourturn').append('<div class="newCarouselblanktile"></div>');
        }
      } else {
        jQuery("#rightHUD-yourturn .newCarouselblanktile").remove();
      }
      if (jQuery('#rightHUD-theirturn').find(".userArea").length === 0) {
        if (jQuery('#rightHUD-theirturn').find(".newCarouselblanktile").length === 0) {
          return jQuery('#rightHUD-theirturn').append('<div class="newCarouselblanktile"></div>');
        }
      } else {
        return jQuery("#rightHUD-theirturn .newCarouselblanktile").remove();
      }
    };
    pushToUserVO = function(event, userVO, flag_updateUserIdx) {
      if ((userVO != null) && (userVO[oloGlobals.clientCodes.USER_ID] != null)) {
        oloGlobals.userVOs[userVO[oloGlobals.clientCodes.USER_ID]] = userVO;
        updateUserIndex();
      }
      if (flag_drawUserPanel != null) {
        return refreshUserPanel();
      }
    };
    removeFromUserVO = function(event, clientID) {
      var clientName;
      clientName = void 0;
      if ((clientID != null) && (oloGlobals.userVOsIndex[clientID] != null)) {
        clientName = oloGlobals.userVOsIndex[clientID][oloGlobals.clientCodes.USER_DISPLAY_NAME];
        delete oloGlobals.userVOs[oloGlobals.userVOsIndex[clientID][oloGlobals.clientCodes.USER_ID]];
        jDocument.trigger(oloEvents.CLIENT_LEFT, [clientID, clientName]);
        return updateUserIndex();
      }
    };
    changeWinner = function() {
      if (oloGlobals.roomVars[oloGlobals.roomCodes.WINNER_NAME] === "-1") {
        return docElems["currentWinnerName"].innerHTML = "";
      } else {
        if (docElems != null) {
          if ((docElems["currentWinnerImage"] != null) && (oloGlobals.userVOsPartyIndex[oloGlobals.roomVars[oloGlobals.roomCodes.WINNER_ID]] != null)) {
            if (oloGlobals.userVOsPartyIndex[oloGlobals.roomVars[oloGlobals.roomCodes.WINNER_ID]][oloGlobals.clientCodes.USER_FACEBOOK_ID] && oloGlobals.userVOsPartyIndex[oloGlobals.roomVars[oloGlobals.roomCodes.WINNER_ID]][oloGlobals.clientCodes.USER_FACEBOOK_ID] !== "-1") {
              return docElems["currentWinnerImage"].setAttribute("src", "https://graph.facebook.com/" + oloGlobals.userVOsPartyIndex[oloGlobals.roomVars[oloGlobals.roomCodes.WINNER_ID]][oloGlobals.clientCodes.USER_FACEBOOK_ID] + "/picture");
            } else {
              return docElems["currentWinnerImage"].setAttribute("src", DEFAULT_PLAYER_IMG_URL);
            }
          } else {
            if (docElems["currentWinnerImage"] != null) {
              docElems["currentWinnerImage"].setAttribute("src", DEFAULT_PLAYER_IMG_URL);
            }
            if (docElems["currentWinnerName"] != null) {
              return docElems["currentWinnerName"].innerHTML = oloGlobals.roomVars[oloGlobals.roomCodes.WINNER_NAME];
            }
          }
        }
      }
    };
    panelMoveMagnitudeCodes = {
      ONE: "1",
      ONE_VIEW: "One screen at a time",
      START: "Be ginning of the list",
      END: "End of the list"
    };
    UserPanelMov = (function() {
      UserPanelMov = function(jUserPanelCenterNav, USER_PANEL_PLAYER_DIV_WIDTH, USER_PANEL_PLAYER_DIV_WIDTH_PADDING, USER_PANEL_VIEW_LIMIT, currentNoOfUsers) {
        this.jUserPanelCenterNav = jUserPanelCenterNav;
        this.USER_PANEL_PLAYER_DIV_WIDTH = (USER_PANEL_PLAYER_DIV_WIDTH != null ? USER_PANEL_PLAYER_DIV_WIDTH : 145);
        this.USER_PANEL_PLAYER_DIV_WIDTH_PADDING = (USER_PANEL_PLAYER_DIV_WIDTH_PADDING != null ? USER_PANEL_PLAYER_DIV_WIDTH_PADDING : 0);
        this.USER_PANEL_VIEW_LIMIT = (USER_PANEL_VIEW_LIMIT != null ? USER_PANEL_VIEW_LIMIT : 1);
        this.currentNoOfUsers = (currentNoOfUsers != null ? currentNoOfUsers : 0);
        return this.currentPos = 0;
      };
      UserPanelMov.prototype.moveUserPanelDivNow = function() {
        var startPx, _this;
        startPx = void 0;
        _this = this;
        startPx = this.currentPos * (this.USER_PANEL_PLAYER_DIV_WIDTH + this.USER_PANEL_PLAYER_DIV_WIDTH_PADDING);
        if (isDevEnvironment) {
          console.log("[currentNoOfUsers:", this.currentNoOfUsers, ",currentPos:", this.currentPos, ",USER_PANEL_PLAYER_DIV_WIDTH:", this.USER_PANEL_PLAYER_DIV_WIDTH, "USER_PANEL_PLAYER_DIV_WIDTH_PADDING:", this.USER_PANEL_PLAYER_DIV_WIDTH_PADDING, "startPx:", startPx, " : Element : ", this.jUserPanelCenterNav);
        }
        if (this.jUserPanelCenterNav != null) {
          if (isDevEnvironment) {
            console.log("step 1 for move");
          }
          if (this.jUserPanelCenterNav.animate != null) {
            if (isDevEnvironment) {
              console.log("step 2 for move");
            }
            return this.jUserPanelCenterNav.animate({
              left: "-" + startPx + "px"
            }, "fast", function() {
              return {};
            });
          } else if ((this.jUserPanelCenterNav.style != null) && (this.jUserPanelCenterNav.style.offsetLeft != null)) {
            if (isDevEnvironment) {
              console.log("setting left prop");
            }
            return this.jUserPanelCenterNav.style.offsetLeft = startPx + "px";
          }
        }
      };
      UserPanelMov.prototype.move = function(panelMoveDirection, panelMoveMagnitude) {
        var flag_NO_EXTREME_END, magnitude;
        if (isDevEnvironment) {
          console.log("moveUserPanelFn() - " + panelMoveDirection + "," + panelMoveMagnitude);
        }
        magnitude = 0;
        flag_NO_EXTREME_END = false;
        panelMoveDirection = (panelMoveDirection !== "LEFT" ? "RIGHT" : "LEFT");
        switch (panelMoveMagnitude) {
          case panelMoveMagnitudeCodes.ONE:
            magnitude = 1;
            flag_NO_EXTREME_END = true;
            break;
          case panelMoveMagnitudeCodes.ONE_VIEW:
            magnitude = this.USER_PANEL_VIEW_LIMIT;
            flag_NO_EXTREME_END = true;
        }
        if (flag_NO_EXTREME_END === true) {
          if (panelMoveDirection === "LEFT") {
            if (this.currentNoOfUsers <= this.USER_PANEL_VIEW_LIMIT || (this.currentPos - magnitude) < 1) {
              panelMoveMagnitude = panelMoveMagnitudeCodes.START;
            } else if ((this.currentPos - magnitude) >= (this.currentNoOfUsers - this.USER_PANEL_VIEW_LIMIT)) {
              panelMoveMagnitude = panelMoveMagnitudeCodes.END;
            } else {
              this.currentPos = this.currentPos - magnitude;
            }
          } else {
            if ((this.currentNoOfUsers <= this.USER_PANEL_VIEW_LIMIT) || ((this.currentPos + magnitude) < 1)) {
              panelMoveMagnitude = panelMoveMagnitudeCodes.START;
            } else if ((this.currentPos + magnitude) >= (this.currentNoOfUsers - this.USER_PANEL_VIEW_LIMIT)) {
              panelMoveMagnitude = panelMoveMagnitudeCodes.END;
            } else {
              this.currentPos = this.currentPos + magnitude;
            }
          }
        }
        switch (panelMoveMagnitude) {
          case panelMoveMagnitudeCodes.END:
            this.currentPos = this.currentNoOfUsers - this.USER_PANEL_VIEW_LIMIT;
            break;
          case panelMoveMagnitudeCodes.START:
            this.currentPos = 0;
        }
        return this.moveUserPanelDivNow();
      };
      return UserPanelMov;
    })();
    updateTotalSeats = function(evt, val) {
      MAX_PLAYERS_IN_A_GAME = parseInt(val);
      if (isDevEnvironment) {
        console.log("Max Seats in game :  ", val);
      }
      return drawUserPanel();
    };
    updateZalerioScores = function(evt, val) {
      var userSeatId, _this;
      _this = this;
      userScoreObj = jQuery.parseJSON(val);
      userScoreArr = [];
      for (userSeatId in userScoreObj) {
        userScoreArr.push(userSeatId);
      }
      userScoreArr.sort(function(x, y) {
        return userScoreObj[y] - userScoreObj[x];
      });
      return refreshUserPanel();
    };
    showFinalScore = function() {
      var disableRematch, ii, index, rankHtml, rankHtmlArray, seatId, usersObject;
      try {
        if (oloGlobals.roomVars.FR === "1") {
          jQuery("#gameBetPanel").hide();
          jQuery(".resignPopup").hide();
          ii = 0;
          rankHtmlArray = [];
          rankHtml = "";
          disableRematch = false;
          usersObject = oloGlobals.dataObjVars.AP;
          for (index in usersObject.PLSC) {
            seatId = usersObject.PLSC[index];
            if (parseInt(usersObject.PLRS[seatId].PRE) === 1 || parseInt(usersObject.PLRS[seatId].GSS) !== 2) {
              if (parseInt(oloGlobals.currentUserDBId) === parseInt(usersObject.PLRS[seatId].UI)) {
                disableRematch = true;
              }
              continue;
            }
            if (ii === 0) {
              rankHtmlArray.push("<div  id='score" + ++ii + "'><img src='https://graph.facebook.com/" + usersObject.PLRS[seatId].PFB + "/picture' /><div class='name'>" + usersObject.PLRS[seatId].PDN + "</div><div class='score'>" + usersObject.PLRS[seatId].PSC + "</div></div>");
            } else {
              rankHtml += "<div class='score_rep' id='score" + ++ii + "'><div class='rank'>" + ii + "nd</div><img src='https://graph.facebook.com/" + usersObject.PLRS[seatId].PFB + "/picture' /><div class='name'>" + usersObject.PLRS[seatId].PDN + "</div><div class='score'>" + usersObject.PLRS[seatId].PSC + "</div></div>";
            }
          }
          if (ii < 2 || disableRematch || resignStatus === 1) {
            jQuery("#rematch").hide();
            jQuery(".dismiss").css({
              marginTop: '1px',
              marginLeft: '50px'
            });
          } else {
            jQuery("#rematch").show();
            jQuery(".dismiss").css({
              marginTop: '',
              marginLeft: ''
            });
          }
          rankHtmlArray.push(rankHtml);
          jQuery("#topScore_div").html(rankHtmlArray[0]);
          jQuery("#bottomScore_div").html(rankHtmlArray[1]);
          return jQuery(".score_show_popup").css("display", "block");
        }
      } catch (_error) {}
    };
    showRoundScorePopup = function() {
      var i, index, rankHtml, roundPopupHeading, scoreArray, scorePopup, scorePopupContent, scorePopuptopthree, seatId, seatIdArray, selfHtml, selfHtmlImg, selfHtmlPoints, userCount, usersObject, x;
      if (oloGlobals.roomVars.CR.split("_")[1] === "0" || oloGlobals.roomVars.FR === "1") {
        return;
      }
      if (parseInt(oloGlobals.roomVars.CR.split("_")[1]) !== _currentRoundStatus) {
        _currentRoundStatus = parseInt(oloGlobals.roomVars.CR.split("_")[1]);
      } else {
        return;
      }
      usersObject = jQuery.parseJSON(oloGlobals.roomVars.AP);
      for (i in usersObject) {
        usersObject[i] = jQuery.parseJSON(usersObject[i]);
        usersObject[i].PLRS = jQuery.parseJSON(usersObject[i].PLRS);
        scoreArray = [];
        seatIdArray = [];
        for (seatId in usersObject[i].PLRS) {
          usersObject[i].PLRS[seatId] = jQuery.parseJSON(usersObject[i].PLRS[seatId]);
          scoreArray[seatId] = parseInt(usersObject[i].PLRS[seatId].PSC);
          seatIdArray.push(seatId);
        }
        seatIdArray.sort(function(x, y) {
          return scoreArray[y] - scoreArray[x];
        });
        usersObject[i].PLSC = {};
        for (x in seatIdArray) {
          usersObject[i].PLSC[x] = seatIdArray[x];
        }
      }
      usersObject = usersObject[i];
      scorePopup = document.createElement("div");
      scorePopup.className = "roundresult";
      scorePopupContent = document.createElement("div");
      scorePopupContent.className = "content_r bounceIn animated";
      scorePopuptopthree = document.createElement("div");
      scorePopuptopthree.className = "top_three_r";
      i = 0;
      rankHtml = "";
      userCount = 0;
      for (index in usersObject.PLSC) {
        seatId = usersObject.PLSC[index];
        if (parseInt(usersObject.PLRS[seatId].GSS) !== 2) {
          continue;
        }
        if (parseInt(usersObject.PLRS[seatId].PRE) === 1) {
          continue;
        }
        userCount++;
        if (userCount <= 3) {
          rankHtml += "<div class='score'><img src='https://graph.facebook.com/" + usersObject.PLRS[seatId].PFB + "/picture' /><div class='points plus'>" + usersObject.PLRS[seatId].PSC + "</div></div>";
        }
        if (oloGlobals.currentUserDBId === usersObject.PLRS[seatId].UI) {
          selfHtml = document.createElement("div");
          selfHtml.className = "score self";
          selfHtmlImg = document.createElement("img");
          selfHtmlImg.src = "https://graph.facebook.com/" + usersObject.PLRS[seatId].PFB + "/picture";
          selfHtmlPoints = document.createElement("div");
          selfHtmlPoints.className = "points plus";
          selfHtmlPoints.innerHTML = usersObject.PLRS[seatId].PSC;
          selfHtml.appendChild(selfHtmlImg);
          selfHtml.appendChild(selfHtmlPoints);
        }
      }
      jQuery(".roundresult").remove();
      jQuery(scorePopuptopthree).append(rankHtml);
      roundPopupHeading = document.createElement("h2");
      roundPopupHeading.id = "round_no_r";
      jQuery(roundPopupHeading).text("Round " + parseInt(oloGlobals.roomVars.CR.split("_")[1]));
      scorePopupContent.appendChild(roundPopupHeading);
      if (selfHtml) {
        scorePopupContent.appendChild(selfHtml);
        scorePopupContent.appendChild(scorePopuptopthree);
        scorePopup.appendChild(scorePopupContent);
        if (parseInt(oloGlobals.roomVars.CR.split("_")[1]) > 0) {
          $("#active-screen").append(scorePopup);
          setTimeout((function() {
            return $(".roundresult").remove();
          }), 5000);
          return $(".roundresult").click(function() {
            return $(this).remove();
          });
        }
      }
    };
    showInviteStatus = function(currentGameUsersData) {
      var acceptedImgs, declinedImgs, gameObjPLRS, img, imgWrapper, invitedImgs, popupDiv, popupDivBase, popupDivClose, popupStatusBase, popupStatusWrapper, popupacceptBlock, popupbuttonWrapper, popupdeclineBlock, popupimgWrapper, popupinviteBlock, popupleftButton, popupleftButtonWrapper, popuprightButton, popuprightButtonWrapper, popuptextLeftButton, popuptextRightButton, popuptopUserInfo, rejected, spanTag, toShow, totalUser, userInfo, usersInfoObject, x, y, z;
      popupDivBase = document.createElement("div");
      popupDivBase.className = "status_show_popup zalerio_popup";
      popupDivBase.id = "invitestatus";
      popupDivBase.style.display = "block";
      popupDiv = document.createElement("div");
      popupDiv.id = "score_friendpopup";
      popupDiv.className = "outer_base";
      popupDivClose = document.createElement("a");
      popupDivClose.id = "close";
      popupDivClose.className = "positionAbsolute";
      popupDivClose.onclick = function() {
        jQuery('.status_show_popup').remove();
        return false;
      };
      popupStatusBase = document.createElement("div");
      popupStatusBase.className = "invite_status_base";
      popupStatusBase.style.paddingTop = "32px";
      popuptopUserInfo = document.createElement("div");
      popuptopUserInfo.className = "topUserInfo";
      popupStatusWrapper = document.createElement("div");
      popupStatusWrapper.className = "statusWrapper";
      popupacceptBlock = document.createElement("div");
      popupacceptBlock.className = "acceptBlock";
      popupinviteBlock = document.createElement("div");
      popupinviteBlock.className = "inviteBlock";
      popupdeclineBlock = document.createElement("div");
      popupdeclineBlock.className = "declineBlock";
      popupbuttonWrapper = document.createElement("div");
      popupbuttonWrapper.className = "buttonWrapper";
      popupleftButtonWrapper = document.createElement("div");
      popupleftButtonWrapper.className = "leftButtonWrapper";
      popupleftButton = document.createElement("div");
      popupleftButton.className = "leftButton";
      popupleftButton.innerHTML = "Close Invitations";
      popupleftButton.onclick = function() {
        return closeInvits();
      };
      popuptextLeftButton = document.createElement("div");
      popuptextLeftButton.className = "textLeftButton";
      popuptextLeftButton.innerHTML = "Game will kick-off with all friends that have accepted your game invitation so far";
      popuprightButtonWrapper = document.createElement("div");
      popuprightButtonWrapper.className = "rightButtonWrapper";
      popuprightButton = document.createElement("div");
      popuprightButton.className = "rightButton";
      popuprightButton.innerHTML = "Send Reminder";
      popuptextRightButton = document.createElement("div");
      popuptextRightButton.className = "textRightButton";
      popuptextRightButton.innerHTML = "Friends who did not respond yet will get a gentle reminder to join your game...";
      for (x in currentGameUsersData) {
        usersInfoObject = currentGameUsersData[x];
        totalUser = usersInfoObject.TP;
        toShow = usersInfoObject.GCB;
        gameObjPLRS = jQuery.parseJSON(usersInfoObject.PLRS);
        break;
      }
      invitedImgs = [];
      acceptedImgs = [];
      declinedImgs = [];
      rejected = [];
      for (y in gameObjPLRS) {
        userInfo = jQuery.parseJSON(gameObjPLRS[y]);
        if (parseInt(userInfo.GSS) === 1) {
          img = document.createElement("img");
          img.src = "https://graph.facebook.com/" + userInfo.PFB + "/picture";
          invitedImgs.push(img);
        } else if (parseInt(userInfo.GSS) === 2) {
          img = document.createElement("img");
          img.src = "https://graph.facebook.com/" + userInfo.PFB + "/picture";
          acceptedImgs.push(img);
        } else if (parseInt(userInfo.GSS) === 3) {
          img = document.createElement("img");
          img.src = "https://graph.facebook.com/" + userInfo.PFB + "/picture";
          declinedImgs.push(img);
        } else {
          rejected.push(userInfo.GSS);
        }
      }
      popupimgWrapper = document.createElement("div");
      popupimgWrapper.className = "imgWrapper";
      if (parseInt(toShow) !== parseInt(oloGlobals.currentUserDBId)) {
        return;
      }
      if (!(acceptedImgs.length + declinedImgs.length > totalUser / 2 && invitedImgs.length !== 0)) {
        return;
      }
      if (oloGlobals.inviteStatus !== null && typeof oloGlobals.inviteStatus !== "undefined") {
        if (!(rejected.length + acceptedImgs.length + declinedImgs.length > oloGlobals.inviteStatus)) {
          return;
        }
      }
      oloGlobals.inviteStatus = rejected.length + acceptedImgs.length + declinedImgs.length;
      if (acceptedImgs.length !== 0) {
        imgWrapper = document.createElement("div");
        imgWrapper.className = "imgWrapper";
        spanTag = document.createElement("span");
        spanTag.innerHTML = "Accepted";
        for (z in acceptedImgs) {
          imgWrapper.appendChild(acceptedImgs[z]);
        }
        popupacceptBlock.appendChild(spanTag);
        popupacceptBlock.appendChild(imgWrapper);
      }
      if (declinedImgs.length !== 0) {
        imgWrapper = document.createElement("div");
        imgWrapper.className = "imgWrapper";
        spanTag = document.createElement("span");
        spanTag.innerHTML = "Declined";
        for (z in declinedImgs) {
          imgWrapper.appendChild(declinedImgs);
        }
        popupdeclineBlock.appendChild(spanTag);
        popupdeclineBlock.appendChild(imgWrapper);
      }
      if (invitedImgs.length !== 0) {
        imgWrapper = document.createElement("div");
        imgWrapper.className = "imgWrapper";
        spanTag = document.createElement("span");
        spanTag.innerHTML = "Not responded yet ...";
        for (z in invitedImgs) {
          console.log("invitedImgs", invitedImgs);
          imgWrapper.appendChild(invitedImgs[z]);
        }
        popupinviteBlock.appendChild(spanTag);
        popupinviteBlock.appendChild(imgWrapper);
      }
      popupStatusWrapper.appendChild(popupacceptBlock);
      popupStatusWrapper.appendChild(popupdeclineBlock);
      popupStatusWrapper.appendChild(popupinviteBlock);
      popupStatusBase.appendChild(popuptopUserInfo);
      popupStatusBase.appendChild(popupStatusWrapper);
      popupleftButtonWrapper.appendChild(popupleftButton);
      popupleftButtonWrapper.appendChild(popuptextLeftButton);
      popuprightButtonWrapper.appendChild(popuprightButton);
      popuprightButtonWrapper.appendChild(popuptextRightButton);
      popupbuttonWrapper.appendChild(popupleftButtonWrapper);
      popupbuttonWrapper.appendChild(popuprightButtonWrapper);
      popupStatusBase.appendChild(popupbuttonWrapper);
      popupDiv.appendChild(popupDivClose);
      popupDiv.appendChild(popupStatusBase);
      popupDivBase.appendChild(popupDiv);
      jQuery('.status_show_popup').remove();
      return jQuery("body").append(popupDivBase);
    };
    currentGameUsersData = {};
    setPlayersInfo = function() {
      var i, scoreArray, seatId, seatIdArray, usersObject, x;
      usersObject = jQuery.parseJSON(oloGlobals.roomVars.AP);
      for (i in usersObject) {
        usersObject[i] = jQuery.parseJSON(usersObject[i]);
        usersObject[i].PLRS = jQuery.parseJSON(usersObject[i].PLRS);
        scoreArray = [];
        seatIdArray = [];
        for (seatId in usersObject[i].PLRS) {
          usersObject[i].PLRS[seatId] = jQuery.parseJSON(usersObject[i].PLRS[seatId]);
          scoreArray[seatId] = parseInt(usersObject[i].PLRS[seatId].PSC);
          seatIdArray.push(seatId);
        }
        seatIdArray.sort(function(x, y) {
          return scoreArray[y] - scoreArray[x];
        });
        usersObject[i].PLSC = {};
        for (x in seatIdArray) {
          usersObject[i].PLSC[x] = seatIdArray[x];
        }
      }
      oloGlobals.dataObjVars.AP = usersObject[i];
      jDocument.trigger("dataObj:" + oloGlobals.dataObjCodes.ALL_PLAYER_INFO, oloGlobals.dataObjVars.AP);
      return showInviteStatus(usersObject);
    };
    jQuery(function() {
      var _this;
      _this = this;
      docElems["currentWinnerName"] = document.getElementById("jCurrentWinnerName");
      docElems["currentWinnerImage"] = document.getElementById("jCurrentWinnerImage");
      jDocument.bind(oloEvents.RECEIVE_USERVO, pushToUserVO);
      jDocument.bind(oloEvents.REMOVE_USERVO, removeFromUserVO);
      jDocument.bind(oloEvents.WINNER_CHANGE, changeWinner);
      jDocument.bind("room:" + oloGlobals.roomCodes.ZALERIO_SCORES, updateZalerioScores);
      jDocument.bind("room:" + oloGlobals.roomCodes.TOTAL_SEATS, updateTotalSeats);
      jDocument.bind("room:" + oloGlobals.roomCodes.PLAYER_BETS_PLACE, renderUserVOToUserPanel);
      jDocument.bind("room:" + oloGlobals.roomCodes.ALL_PLAYER_INFO, setPlayersInfo);
      jDocument.bind("dataObj:" + oloGlobals.dataObjCodes.ALL_PLAYER_INFO, showFinalScore);
      jDocument.bind("room:" + oloGlobals.roomCodes.ALL_PLAYER_INFO, updateLeftHud);
      jDocument.bind("room:" + oloGlobals.roomCodes.ALL_PLAYER_INFO, drawUserPanel);
      jDocument.bind("room:" + oloGlobals.roomCodes.ALL_PLAYER_INFO, showRoundScorePopup);
      jDocument.bind("client:" + oloGlobals.clientCodes.UINFO, usersRecordCall);
      jDocument.bind("client:" + oloGlobals.clientCodes.ALL_PAST_GAME, usersRecordCall);
      jDocument.bind("client:" + oloGlobals.msgCodes.RIGHT_HUD, usersRecordCall);
      jDocument.bind("client:" + oloGlobals.msgCodes.RIGHT_HUD, updateRightHud);
      return jDocument.bind("client:" + oloGlobals.clientCodes.USERINFO, updatePlayerPlate);
    });
    return ZalerioUserComponent;
  })();
  crouselObjSize = function(obj) {
    var key, size, userObject;
    size = 0;
    for (key in obj) {
      userObject = jQuery.parseJSON(obj[key]);
      if (userObject.GSS === 3 || userObject.GSS === 5) {
        continue;
      }
      if (obj.hasOwnProperty(key)) {
        size++;
      }
    }
    return size;
  };
  objSize = function(obj) {
    var key, size;
    size = 0;
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        size++;
      }
    }
    return size;
  };
  sendOriginalFigsRequest = function() {
    return jDocument.trigger(oloEvents.SEND_UPC_MESSAGE, [UPC.SEND_ROOMMODULE_MESSAGE, oloGlobals.roomVars[oloGlobals.roomCodes.ROOM_ID], "RQ", "C|OF"]);
  };
  placeBetsToServer = function(betStr) {
    return jDocument.trigger(oloEvents.SEND_UPC_MESSAGE, [UPC.SEND_ROOMMODULE_MESSAGE, oloGlobals.roomVars[oloGlobals.roomCodes.ROOM_ID], "RQ", "C|PB", "BI|" + betStr]);
  };
  sendResignToServer = function() {
    jQuery(".draggableBets").attr("draggable", "false");
    jQuery(".resignPopup").hide();
    jQuery("#gameBetPanel").hide();
    return jDocument.trigger(oloEvents.SEND_UPC_MESSAGE, [UPC.SEND_ROOMMODULE_MESSAGE, oloGlobals.roomVars[oloGlobals.roomCodes.ROOM_ID], "RQ", "C|RG"]);
  };
  closeInvits = function() {
    return jDocument.trigger(oloEvents.SEND_UPC_MESSAGE, [UPC.SEND_ROOMMODULE_MESSAGE, oloGlobals.roomVars[oloGlobals.roomCodes.ROOM_ID], "RQ", "C|CI"]);
  };
  resignme = document.getElementById("resignme");
  addEventHandler(resignme, "click", sendResignToServer, false);
  rematchCall = function(e, rematchPlayerFBID) {
    var gameId, i, userObject, usersInfoObject, usersObject, x, _results;
    if (e.preventDefault) {
      e.preventDefault();
    }
    if (playSound) {
      otherbuttonSound.Play;
    }
    if (typeof rematchPlayerFBID === "undefined") {
      usersObject = jQuery.parseJSON(oloGlobals.roomVars.AP);
      if (isDevEnvironment) {
        console.log("Score Board left (oloGlobals.roomVars.AP", userObject);
      }
      for (gameId in usersObject) {
        usersInfoObject = jQuery.parseJSON(usersObject[gameId]);
        break;
      }
      i = 0;
      usersInfoObject = jQuery.parseJSON(usersInfoObject.PLRS);
      _results = [];
      for (x in usersInfoObject) {
        userObject = jQuery.parseJSON(usersInfoObject[x]);
        _results.push(userObject.PFB);
      }
    } else {
      _results = [];
      _results.push(rematchPlayerFBID);
    }
    InviteFriends(_results, 'Rematch', gameId);
    jQuery('.zalerio_popup').css('display', 'none');
  };
  addEventHandler(document.getElementById('rematch'), 'click', rematchCall, false);
  usersRecordCall = function() {
    var gameIdArray, i, scoreArray, seatId, usersInfo, usersObjectAPG, usersObjectUINFO;
    if (typeof oloGlobals.clientVars.UINFO !== 'undefined' && oloGlobals.clientVars.UINFO !== 'USERINFO') {
      usersObjectUINFO = jQuery.parseJSON(oloGlobals.clientVars.UINFO);
    }
    if (typeof oloGlobals.clientVars.APG !== 'undefined' && oloGlobals.clientVars.APG !== 'ALL_PAST_GAME') {
      usersObjectAPG = jQuery.parseJSON(oloGlobals.clientVars.APG);
      scoreArray = [];
      gameIdArray = [];
      for (i in usersObjectAPG) {
        usersObjectAPG[i] = jQuery.parseJSON(usersObjectAPG[i]);
        usersObjectAPG[i].PLRS = jQuery.parseJSON(usersObjectAPG[i].PLRS);
        scoreArray[i] = parseInt(usersObjectAPG[i].EDL);
        gameIdArray.push(i);
        for (seatId in usersObjectAPG[i].PLRS) {
          usersObjectAPG[i].PLRS[seatId] = jQuery.parseJSON(usersObjectAPG[i].PLRS[seatId]);
        }
      }
      gameIdArray.sort(function(x, y) {
        return scoreArray[y] - scoreArray[x];
      });
    }
    usersInfo = {
      RH: oloGlobals.msgVars.RH,
      APG: usersObjectAPG,
      APG_SORT: gameIdArray,
      UINFO: usersObjectUINFO
    };
    usersRecord(usersInfo);
  };
  sendPlaceBetRequest = function() {
    var bet, betStr;
    if (isDevEnvironment) {
      console.log("bet Validation before sen  ding the request t  o server");
    }
    betStr = "";
    for (bet in bets) {
      betStr += (betStr === "" ? bets[bet] : ":" + bets[bet]);
      if (isDevEnvironment) {
        console.log("bets[" + bet + "] : " + bets[bet]);
      }
    }
    if (isDevEnvironment) {
      console.log("[betStr: " + betStr + "]");
    }
    if (betStr === "") {
      if (isDevEnvironment) {
        console.log("No bets placed!");
      }
      messagePopup("No bets placed!");
      return false;
    } else {
      if (isDevEnvironment) {
        console.log("every thing is fine end the bets to the server");
      }
      placeBetsToServer(betStr);
    }
    return false;
  };
  if (typeof String.prototype.startsWith !== "function") {
    String.prototype.startsWith = function(str) {
      return this.indexOf(str) === 0;
    };
  }
  jQuery(function() {
    var SpriteAnimation, gameStartAnimation;
    SpriteAnimation = (function() {
      var iFrame, _ref;
      SpriteAnimation = function(picHeight, picWidth, el, noOfFrames, horizontalMajor, animSpeed) {
        this.picHeight = picHeight;
        this.picWidth = picWidth;
        this.el = el;
        this.noOfFrames = noOfFrames;
        this.horizontalMajor = horizontalMajor;
        return this.animSpeed = animSpeed;
      };
      SpriteAnimation.cFrame = 0;
      SpriteAnimation.elBgIndex = [];
      iFrame = 0;
      _ref = SpriteAnimation.noOfFrames;
      while ((0 <= _ref ? iFrame <= _ref : iFrame >= _ref)) {
        if (SpriteAnimation.horizontalMajor) {
          SpriteAnimation.elBgIndex[iFrame] = "-" + (iFrame * SpriteAnimation.picWidth) + "px 0px";
        } else {
          SpriteAnimation.elBgIndex[iFrame] = "0px " + "-" + (iFrame * SpriteAnimation.picWidth) + "px";
        }
        if (0 <= _ref) {
          iFrame++;
        } else {
          iFrame--;
        }
      }
      SpriteAnimation.prototype.nextFrame = function() {
        if (++this.cFrame % this.noOfFrames === 0) {
          this.cFrame = 0;
          return this.elBgIndex[this.cFrame];
        }
      };
      SpriteAnimation.prototype.animate = function() {
        var that;
        that = void 0;
        if ((this.el != null) && (this.el.style != null) && (this.el.style.backgroundPosition != null)) {
          this.el.style.backgroundPosition = this.nextFrame();
          that = this;
          return this.animateFlag = window.setTimeout(function() {
            return that.animate();
          }, this.animSpeed);
        }
      };
      SpriteAnimation.prototype.startAnimation = function() {
        return this.animate();
      };
      SpriteAnimation.prototype.stopAnimation = function() {
        return window.clearTimeout(this.animateFlag);
      };
      return SpriteAnimation;
    })();
    gameStartAnimation = new SpriteAnimation(200, 125, document.getElementById("loadWaitAnimation"), 12, true, 70);
    return gameStartAnimation.startAnimation();
  });
  oloConnection = new OloUnionConnection;
  oloUserComponent();
  resignPopUP = function() {
    return jQuery("#bottomHUDbuttons-more").click(function() {
      var currentUserObj, i, seatId, totalPlayer, usersObjectAP;
      totalPlayer = 0;
      usersObjectAP = jQuery.parseJSON(oloGlobals.roomVars.AP);
      for (i in usersObjectAP) {
        usersObjectAP[i] = jQuery.parseJSON(usersObjectAP[i]);
        usersObjectAP[i].PLRS = jQuery.parseJSON(usersObjectAP[i].PLRS);
        for (seatId in usersObjectAP[i].PLRS) {
          usersObjectAP[i].PLRS[seatId] = jQuery.parseJSON(usersObjectAP[i].PLRS[seatId]);
          if (usersObjectAP[i].PLRS[seatId].GSS === 2 || usersObjectAP[i].PLRS[seatId].GSS === 1) {
            ++totalPlayer;
          }
        }
        break;
      }
      currentUserObj = jQuery.parseJSON(oloGlobals.clientVars.UINFO);
      if (totalPlayer > 1 && parseInt(oloGlobals.roomVars.FR) !== 1 && parseInt(currentUserObj.PRE) !== 1) {
        return jQuery(".resignPopup").show();
      }
    });
  };
  if (document.domain === "localhost" || document.domain === "zl.mobicules.com") {
    addEventHandler(document.getElementById("bottomHUDbuttons-more"), "click", sendOriginalFigsRequest, false);
    window.sendOriginalFigsRequest = sendOriginalFigsRequest;
    resignPopUP();
  } else {
    resignPopUP();
  }
});

messagePopup = function(message, callback, callback_param) {
  var msgCancelDiv, msgDiv, msgInnerDiv, msgOkDiv, msgTextDiv, msgTextP;
  jQuery('.msg-outer-div').remove();
  try {
    if (playSound) {
      popupapperence.play();
    }
  } catch (_error) {}
  msgDiv = document.createElement("div");
  msgDiv.className = 'msg-outer-div bounceIn animated';
  msgInnerDiv = document.createElement("div");
  msgInnerDiv.className = 'msg-inner-div';
  msgTextDiv = document.createElement("div");
  msgTextDiv.className = 'msgbox-msg';
  msgTextP = document.createElement("p");
  msgTextP.innerHTML = message;
  msgOkDiv = document.createElement("div");
  msgOkDiv.className = 'msgbox-ok';
  msgOkDiv.innerHTML = 'ok';
  if (typeof callback === 'undefined') {
    msgOkDiv.onclick = function() {
      try {
        if (playSound) {
          closebutton.play();
        }
      } catch (_error) {}
      return jQuery('.msg-outer-div').remove();
    };
  } else {
    msgCancelDiv = document.createElement("div");
    msgCancelDiv.className = 'msgbox-cancel';
    msgCancelDiv.innerHTML = 'cancel';
    msgOkDiv.className = 'msgbox-ok msgbox-cancel';
    msgCancelDiv.onclick = function() {
      try {
        if (playSound) {
          closebutton.play();
        }
      } catch (_error) {}
      return jQuery('.msg-outer-div').remove();
    };
    msgOkDiv.onclick = function() {
      callback(callback_param);
      try {
        if (playSound) {
          closebutton.play();
        }
      } catch (_error) {}
      return jQuery('.msg-outer-div').remove();
    };
  }
  msgTextDiv.appendChild(msgTextP);
  msgInnerDiv.appendChild(msgTextDiv);
  msgInnerDiv.appendChild(msgOkDiv);
  if (msgCancelDiv) {
    msgInnerDiv.appendChild(msgCancelDiv);
  }
  msgDiv.appendChild(msgInnerDiv);
  return jQuery('#active-screen').append(jQuery(msgDiv));
};
