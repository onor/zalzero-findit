// Generated by CoffeeScript 1.3.3

define([], function() {
  var panelMoveMagnitudeCodes;
  panelMoveMagnitudeCodes = {
    ONE: "1",
    ONE_VIEW: "One screen at a time",
    START: "Be ginning of the list",
    END: "End of the list"
  };
  window.panelMoveMagnitudeCodes = panelMoveMagnitudeCodes;
  return {
    UserPanelMov: (function() {
      var UserPanelMov;
      UserPanelMov = function(jUserPanelCenterNav, USER_PANEL_PLAYER_DIV_WIDTH, USER_PANEL_PLAYER_DIV_WIDTH_PADDING, USER_PANEL_VIEW_LIMIT, currentNoOfUsers) {
        this.jUserPanelCenterNav = jUserPanelCenterNav;
        this.USER_PANEL_PLAYER_DIV_WIDTH = (USER_PANEL_PLAYER_DIV_WIDTH != null ? USER_PANEL_PLAYER_DIV_WIDTH : 145);
        this.USER_PANEL_PLAYER_DIV_WIDTH_PADDING = (USER_PANEL_PLAYER_DIV_WIDTH_PADDING != null ? USER_PANEL_PLAYER_DIV_WIDTH_PADDING : 0);
        this.USER_PANEL_VIEW_LIMIT = (USER_PANEL_VIEW_LIMIT != null ? USER_PANEL_VIEW_LIMIT : 1);
        this.currentNoOfUsers = (currentNoOfUsers != null ? currentNoOfUsers : 0);
        return this.currentPos = 0;
      };
      UserPanelMov.prototype.moveUserPanelDivNow = function() {
        var startPx, _this;
        startPx = void 0;
        _this = this;
        startPx = this.currentPos * (this.USER_PANEL_PLAYER_DIV_WIDTH + this.USER_PANEL_PLAYER_DIV_WIDTH_PADDING);
        if (isDevEnvironment) {
          console.log("[currentNoOfUsers:", this.currentNoOfUsers, ",currentPos:", this.currentPos, ",USER_PANEL_PLAYER_DIV_WIDTH:", this.USER_PANEL_PLAYER_DIV_WIDTH, "USER_PANEL_PLAYER_DIV_WIDTH_PADDING:", this.USER_PANEL_PLAYER_DIV_WIDTH_PADDING, "startPx:", startPx, " : Element : ", this.jUserPanelCenterNav);
        }
        if (this.jUserPanelCenterNav != null) {
          if (isDevEnvironment) {
            console.log("step 1 for move");
          }
          if (this.jUserPanelCenterNav.animate != null) {
            if (isDevEnvironment) {
              console.log("step 2 for move");
            }
            return this.jUserPanelCenterNav.animate({
              left: "-" + startPx + "px"
            }, "fast", function() {
              return {};
            });
          } else if ((this.jUserPanelCenterNav.style != null) && (this.jUserPanelCenterNav.style.offsetLeft != null)) {
            if (isDevEnvironment) {
              console.log("setting left prop");
            }
            return this.jUserPanelCenterNav.style.offsetLeft = startPx + "px";
          }
        }
      };
      UserPanelMov.prototype.move = function(panelMoveDirection, panelMoveMagnitude) {
        var flag_NO_EXTREME_END, magnitude;
        if (isDevEnvironment) {
          console.log("moveUserPanelFn() - " + panelMoveDirection + "," + panelMoveMagnitude);
        }
        magnitude = 0;
        flag_NO_EXTREME_END = false;
        panelMoveDirection = (panelMoveDirection !== "LEFT" ? "RIGHT" : "LEFT");
        switch (panelMoveMagnitude) {
          case panelMoveMagnitudeCodes.ONE:
            magnitude = 1;
            flag_NO_EXTREME_END = true;
            break;
          case panelMoveMagnitudeCodes.ONE_VIEW:
            magnitude = this.USER_PANEL_VIEW_LIMIT;
            flag_NO_EXTREME_END = true;
        }
        if (flag_NO_EXTREME_END === true) {
          if (panelMoveDirection === "LEFT") {
            if (this.currentNoOfUsers <= this.USER_PANEL_VIEW_LIMIT || (this.currentPos - magnitude) < 1) {
              panelMoveMagnitude = panelMoveMagnitudeCodes.START;
            } else if ((this.currentPos - magnitude) >= (this.currentNoOfUsers - this.USER_PANEL_VIEW_LIMIT)) {
              panelMoveMagnitude = panelMoveMagnitudeCodes.END;
            } else {
              this.currentPos = this.currentPos - magnitude;
            }
          } else {
            if ((this.currentNoOfUsers <= this.USER_PANEL_VIEW_LIMIT) || ((this.currentPos + magnitude) < 1)) {
              panelMoveMagnitude = panelMoveMagnitudeCodes.START;
            } else if ((this.currentPos + magnitude) >= (this.currentNoOfUsers - this.USER_PANEL_VIEW_LIMIT)) {
              panelMoveMagnitude = panelMoveMagnitudeCodes.END;
            } else {
              this.currentPos = this.currentPos + magnitude;
            }
          }
        }
        switch (panelMoveMagnitude) {
          case panelMoveMagnitudeCodes.END:
            this.currentPos = this.currentNoOfUsers - this.USER_PANEL_VIEW_LIMIT;
            break;
          case panelMoveMagnitudeCodes.START:
            this.currentPos = 0;
        }
        return this.moveUserPanelDivNow();
      };
      return UserPanelMov;
    })()
  };
});
