// Generated by CoffeeScript 1.3.3

define(["./config", "../helper/utils"], function(config, utils) {
  var DEFAULT_PLAYER_IMG_URL, zzCMDListners, zzEvents, zzGlobals;
  DEFAULT_PLAYER_IMG_URL = "/olotheme/images/fbDefaultUser.gif";
  zzEvents = {
    JOINED_ROOM: "joinedRoomListener",
    RESET_GAME_VARIABLES: "resetGameVariables",
    CLIENT_ADDED_TO_ROOM: "clientAddedListener",
    CLIENT_REMOVED_FROM_ROOM: "clientRemovedListener",
    ROOM_SNAPSHOT: "roomSnapshotListener",
    CLIENT_SNAPSHOT: "clientSnapshotListener",
    ROOM_ATTR_UPDATE: "roomAttrUpdateListener",
    CLIENT_ATTR_UPDATE: "clientAttrUpdateListener",
    ROOM_OCCUPANTCOUNT_UPDATE: "roomOccupantCountUpdateListener",
    LOGGED_IN: "onLoginResult",
    RECEIVE_MESSAGE: "messageListener",
    SEND_UPC_MESSAGE: "send_upc_message",
    RECEIVE_USERVO: "received_userVO",
    REMOVE_USERVO: "remove_userVO",
    UPDATE_TTL: "update_ttl",
    CONNECTION_CLOSE: "connection_close",
    SEND_CHAT_MESSAGE: "send_chat_message",
    UPDATE_LOCAL_TTL: "update_local_ttl",
    BID_CHANGED: "bid_changed",
    SERVER_MESSAGE: "SERVER_MESSAGE",
    WINNER_CHANGE: "winner_change",
    CLIENT_JOINED: "client_joined",
    CLIENT_LEFT: "client_left",
    OLOTUTS_MESSAGE: "olotuts_message",
    CLIENT_BETS_PLACED: "zalerioUserBetPlaced"
  };
  zzGlobals = function() {
    var UserVO, clientCodes, clientVars, currentUserDBId, dataObjCodes, dataObjVars, gameDuration, generateAttrVars, getUserName, inviteStatus, msgCodes, msgVars, offlinePlayers, pageRefresh, roomCodes, roomVars, roomVarsFlag, setClockInterval, ttl, updateClock, updateGameDuration, updateTTL, userFBVOs, userVOs, userVOsIndex, userVOsPartyIndex, userVOsSeatIndex;
    inviteStatus = null;
    ttl = null;
    currentUserDBId = null;
    offlinePlayers = null;
    clientCodes = {
      USER_ID: "UI",
      USER_DISPLAY_NAME: "UD",
      USER_NAME: "UN",
      USER_UNION_ID: "UU",
      USER_FACEBOOK_ID: "UF",
      USER_PARTY_ID: "UP",
      USER_SEAT_ID: "UR",
      Z_USER_SCORE: "ZS",
      MY_TURN: "MT",
      THEIR_TURN: "TT",
      ALL_PAST_GAME: "APG",
      USERINFO: "UINFO"
    };
    msgCodes = {
      RIGHT_HUD: "RH"
    };
    dataObjCodes = {
      ALL_PLAYER_INFO: "AP"
    };
    roomCodes = {
      ROOM_ID: "GI",
      USER_TOTAL: "UT",
      USER_COUNT: "UC",
      WINNER_NAME: "WN",
      WINNER_ID: "WI",
      GAME_ENDED: "GE",
      TIME_LEFT: "TL",
      GAME_DURATION: "GD",
      START_TIME: "ST",
      END_TIME: "ET",
      ROOM_NAME: "RN",
      TOTAL_SEATS: "TS",
      ROOM_PRIZE_NAME: "RP",
      ROOM_MRP: "RM",
      ROOM_IMAGEROOM_MRP: "RI",
      TOTALROUNDS: "TR",
      CURRENTROUND: "CR",
      ROUND_ENDTIME: "RE",
      ROUND_ENDTIMEINMS: "EM",
      ROUND_NOOFBETS: "NB",
      BOARDVARS: "BV",
      BOARD_XY: "XY",
      TOTALFIGS: "TF",
      ROOM_ALLROUNDS: "AR",
      FIGURE_DETAILS: "FD",
      ZALERIO_SCORES: "ZS",
      GAME_FINISH: "FR",
      PLAYER_BETS_PLACE: "PP",
      ALL_PLAYER_INFO: "AP"
    };
    userVOsIndex = {};
    userVOsSeatIndex = {};
    userVOsPartyIndex = {};
    generateAttrVars = function(attrCodes) {
      var attrV, i;
      attrV = {};
      for (i in attrCodes) {
        attrV[attrCodes[i]] = i;
      }
      return attrV;
    };
    msgVars = generateAttrVars(msgCodes);
    dataObjVars = generateAttrVars(dataObjCodes);
    clientVars = generateAttrVars(clientCodes);
    roomVars = generateAttrVars(roomCodes);
    roomVarsFlag = generateAttrVars(roomCodes);
    userVOs = {};
    userFBVOs = {};
    gameDuration = "";
    setClockInterval = "";
    UserVO = function(userUnionId, userSnapshotObj) {
      var i, userVArr, userVArrLen;
      if (config.isDevEnvironment) {
        utils.log("Added to room " + userSnapshotObj);
        utils.log("Current User local ID : " + zzGlobals.currentUserDBId);
      }
      for (i in clientCodes) {
        this[clientCodes[i]] = "-1";
      }
      userVArr = userSnapshotObj.split("|");
      userVArrLen = userVArr.length;
      i = 0;
      while (i < userVArrLen) {
        if (clientVars[userVArr[i]]) {
          this[userVArr[i]] = userVArr[i + 1];
        }
        i += 3;
      }
      if (this[clientCodes.USER_ID]) {
        this[clientCodes.USER_UNION_ID] = userUnionId;
      }
      if (this[clientCodes.USER_ID] === zzGlobals.currentUserDBId) {
        i = 0;
        while (i < userVArrLen) {
          if (clientVars[userVArr[i]]) {
            zzGlobals.clientVars[userVArr[i]] = userVArr[i + 1];
          }
          i += 3;
        }
      }
      return this;
    };
    getUserName = function(clientID) {
      var userName;
      userName = clientID;
      if (clientID && zzGlobals.userVOsIndex[clientID]) {
        userName = zzGlobals.userVOsIndex[clientID][clientCodes.USER_DISPLAY_NAME];
      }
      return userName;
    };
    updateGameDuration = function(event, data) {
      data = (data ? parseInt(data) : null);
      if (data && !isNaN(data)) {
        return gameDuration = data;
      }
    };
    updateClock = function() {
      ttl--;
      if (ttl > 0) {
        if (pageRefresh && pageRefresh.isTimerEnabled && pageRefresh.isTimerEnabled()) {
          pageRefresh.clearTimer();
        }
      } else {
        if (pageRefresh && ttl <= 0) {
          if (pageRefresh.isTimerEnabled && !(pageRefresh.isTimerEnabled()) && currentScreen !== "postscreen") {
            if (config.isDevEnvironment) {
              utils.log("Pagerefresh.isTimerEnabled false!");
            }
            pageRefresh.enableTimer();
          }
        }
      }
      return jDocument.trigger(oloEvents.UPDATE_LOCAL_TTL, this.ttl);
    };
    updateTTL = function(event, data) {
      if (setClockInterval) {
        clearInterval(setClockInterval);
      }
      data = (data ? parseInt(data) : null);
      if (data && typeof data === "number") {
        ttl = data;
      }
      return setClockInterval = setInterval(updateClock, 10000);
    };
    pageRefresh = function() {
      var clearTimerFn, enableTimerFn, timer;
      timer = null;
      enableTimerFn = function() {
        var _this;
        _this = this;
        timer = setTimeout(function() {
          return redirectToPlayNow(gameInstId);
        }, 5000);
        if (config.isDevEnvironment) {
          return utils.log("refresh timer set!");
        }
      };
      clearTimerFn = function() {
        timer = null;
        if (config.isDevEnvironment) {
          return utils.log("refresh timer cleared!");
        }
      };
      return {
        isTimerEnabled: function() {
          if (timer) {
            return true;
          } else {
            return false;
          }
        },
        enableTimer: function() {
          return enableTimerFn();
        },
        clearTimer: function() {
          return clearTimerFn();
        }
      };
    };
    return {
      generateAttrVarsFn: function(p) {
        return generateAttrVars(p);
      },
      roomCodes: roomCodes,
      clientCodes: clientCodes,
      msgCodes: msgCodes,
      dataObjCodes: dataObjCodes,
      dataObjVars: dataObjVars,
      UserVO: UserVO,
      userVOsIndex: userVOsIndex,
      roomVars: roomVars,
      roomVarsFlag: roomVarsFlag,
      clientVars: clientVars,
      msgVars: msgVars,
      userVOs: userVOs,
      userFBVOs: userFBVOs,
      getUserName: getUserName,
      userVOsPartyIndex: userVOsPartyIndex,
      getTtl: function() {
        return ttl;
      },
      userVOsSeatIndex: userVOsSeatIndex,
      getGameDuration: function() {
        return gameDuration;
      },
      offlinePlayers: offlinePlayers,
      currentUserDBId: currentUserDBId
    };
  };
  zzCMDListners = {
    ORIG_FIGS: "OF",
    BET_RESPONSE: "PB",
    BET_CHANGES: "CB",
    RESIGN_GAME: "RG",
    CLOSE_INVITE: "CI",
    RIGHT_HUD: "MT",
    DECLINE_STATUS: "DG"
  };
  window.jDocument = jQuery(document);
  window.zalerioCMDListners = zzCMDListners;
  window.zzGlobals = new zzGlobals();
  return window.zzEvents = zzEvents;
});
